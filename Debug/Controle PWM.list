
Controle PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa8  08009fa8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb0  08009fb0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb0  08009fb0  00019fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fb4  08009fb4  00019fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08009fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c98  2000005c  0800a014  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000cf4  0800a014  00020cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c20b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000343f  00000000  00000000  0003c2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001908  00000000  00000000  0003f720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138b  00000000  00000000  00041028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216c8  00000000  00000000  000423b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d910  00000000  00000000  00063a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df04b  00000000  00000000  0008138b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007158  00000000  00000000  001603d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00167530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008fb4 	.word	0x08008fb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08008fb4 	.word	0x08008fb4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	flagADC = 1;												//QUANDO ACABAR UMA CONVERSÃO A A INTERRUPÇÃO IR�? DIRECIONAR PARA ESSE CALLBACK
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_ADC_ConvCpltCallback+0x1c>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200002cc 	.word	0x200002cc

080005ec <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <HAL_UART_RxCpltCallback+0xbc>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d150      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0xb4>
		if(rcv_byte == '(' || rcv_byte == '['){
 80005fe:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b28      	cmp	r3, #40	; 0x28
 8000604:	d003      	beq.n	800060e <HAL_UART_RxCpltCallback+0x22>
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b5b      	cmp	r3, #91	; 0x5b
 800060c:	d10a      	bne.n	8000624 <HAL_UART_RxCpltCallback+0x38>
			rx_init = 1;
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000610:	2201      	movs	r2, #1
 8000612:	701a      	strb	r2, [r3, #0]
			byte_cont = 0;
 8000614:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
			memset(data_rx_buff, 0x00, sizeof(data_rx_buff));
 800061a:	2232      	movs	r2, #50	; 0x32
 800061c:	2100      	movs	r1, #0
 800061e:	4826      	ldr	r0, [pc, #152]	; (80006b8 <HAL_UART_RxCpltCallback+0xcc>)
 8000620:	f008 f8f0 	bl	8008804 <memset>
		}
		if(rcv_byte == ')'){
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b29      	cmp	r3, #41	; 0x29
 800062a:	d102      	bne.n	8000632 <HAL_UART_RxCpltCallback+0x46>
			pacote_completo = 1;
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <HAL_UART_RxCpltCallback+0xd0>)
 800062e:	2201      	movs	r2, #1
 8000630:	701a      	strb	r2, [r3, #0]
		}
		if(rcv_byte == ']'){
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b5d      	cmp	r3, #93	; 0x5d
 8000638:	d102      	bne.n	8000640 <HAL_UART_RxCpltCallback+0x54>
			cmd_completo = 1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <HAL_UART_RxCpltCallback+0xd4>)
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
		}
		if(byte_cont >= 45)
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b2c      	cmp	r3, #44	; 0x2c
 8000646:	d902      	bls.n	800064e <HAL_UART_RxCpltCallback+0x62>
			byte_cont = 45;
 8000648:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 800064a:	222d      	movs	r2, #45	; 0x2d
 800064c:	701a      	strb	r2, [r3, #0]

		if(rx_init)
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d017      	beq.n	8000686 <HAL_UART_RxCpltCallback+0x9a>
		{
			data_rx_buff[byte_cont] = rcv_byte;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <HAL_UART_RxCpltCallback+0xcc>)
 8000662:	5499      	strb	r1, [r3, r2]
			byte_cont++;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	b2da      	uxtb	r2, r3
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_UART_RxCpltCallback+0xc8>)
 800066e:	701a      	strb	r2, [r3, #0]

			if(rcv_byte == ')' || rcv_byte == ']')
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b29      	cmp	r3, #41	; 0x29
 8000676:	d003      	beq.n	8000680 <HAL_UART_RxCpltCallback+0x94>
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b5d      	cmp	r3, #93	; 0x5d
 800067e:	d102      	bne.n	8000686 <HAL_UART_RxCpltCallback+0x9a>
				rx_init = 0;
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <HAL_UART_RxCpltCallback+0xc4>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
		}
		/*HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));*/	/*RECEBE UM BYTE*/
		if(!pacote_completo || !cmd_completo){
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <HAL_UART_RxCpltCallback+0xd0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d003      	beq.n	8000696 <HAL_UART_RxCpltCallback+0xaa>
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_UART_RxCpltCallback+0xd4>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d104      	bne.n	80006a0 <HAL_UART_RxCpltCallback+0xb4>
			HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));	/*RECEBE UM BYTE*/
 8000696:	2201      	movs	r2, #1
 8000698:	4904      	ldr	r1, [pc, #16]	; (80006ac <HAL_UART_RxCpltCallback+0xc0>)
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <HAL_UART_RxCpltCallback+0xd8>)
 800069c:	f005 fc7a 	bl	8005f94 <HAL_UART_Receive_IT>
		}
	}
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004800 	.word	0x40004800
 80006ac:	2000038a 	.word	0x2000038a
 80006b0:	200002d5 	.word	0x200002d5
 80006b4:	200002d6 	.word	0x200002d6
 80006b8:	20000358 	.word	0x20000358
 80006bc:	200002d4 	.word	0x200002d4
 80006c0:	200002d7 	.word	0x200002d7
 80006c4:	20000238 	.word	0x20000238

080006c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){//ENDEREÇO DE HTIM COMO PARAMETRO
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d13d      	bne.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x8e>
		timer_teste[0]++;
 80006da:	4b22      	ldr	r3, [pc, #136]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b20      	ldr	r3, [pc, #128]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006e4:	801a      	strh	r2, [r3, #0]
		cont[0]++;
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006f0:	801a      	strh	r2, [r3, #0]
		if(flag_com[0])cont[6]++;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d005      	beq.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006fc:	899b      	ldrh	r3, [r3, #12]
 80006fe:	3301      	adds	r3, #1
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000704:	819a      	strh	r2, [r3, #12]
		if(timer_teste[0]>=250){
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	2bf9      	cmp	r3, #249	; 0xf9
 800070c:	d907      	bls.n	800071e <HAL_TIM_PeriodElapsedCallback+0x56>
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800070e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000714:	f003 f8ee 	bl	80038f4 <HAL_GPIO_TogglePin>
			timer_teste[0] = 0;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800071a:	2200      	movs	r2, #0
 800071c:	801a      	strh	r2, [r3, #0]
		}
		if(cont[0]>=1500 && !flagUART){
 800071e:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	f240 52db 	movw	r2, #1499	; 0x5db
 8000726:	4293      	cmp	r3, r2
 8000728:	d909      	bls.n	800073e <HAL_TIM_PeriodElapsedCallback+0x76>
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d105      	bne.n	800073e <HAL_TIM_PeriodElapsedCallback+0x76>
			flagtransmit = 1;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]
			cont[0] = 0;
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800073a:	2200      	movs	r2, #0
 800073c:	801a      	strh	r2, [r3, #0]
		}
		if(cont[6]>2500){
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000740:	899b      	ldrh	r3, [r3, #12]
 8000742:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000746:	4293      	cmp	r3, r2
 8000748:	d905      	bls.n	8000756 <HAL_TIM_PeriodElapsedCallback+0x8e>
			cont[6] = 0;
 800074a:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800074c:	2200      	movs	r2, #0
 800074e:	819a      	strh	r2, [r3, #12]
			flag_com[0] = 0;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40000400 	.word	0x40000400
 8000764:	20000340 	.word	0x20000340
 8000768:	20000348 	.word	0x20000348
 800076c:	200002d0 	.word	0x200002d0
 8000770:	48000400 	.word	0x48000400
 8000774:	200002cd 	.word	0x200002cd
 8000778:	200002cf 	.word	0x200002cf

0800077c <trata_teclas>:
void trata_teclas(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	/**********************************************************************************/
	/*                           TRATA EVENTO TECLA CONF                              */
	/**********************************************************************************/
	if(!HAL_GPIO_ReadPin(TCF_GPIO_Port, TCF_Pin)){
 8000780:	2140      	movs	r1, #64	; 0x40
 8000782:	4876      	ldr	r0, [pc, #472]	; (800095c <trata_teclas+0x1e0>)
 8000784:	f003 f886 	bl	8003894 <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d117      	bne.n	80007be <trata_teclas+0x42>
		deboucing = 50;										//CONTADOR DEBOUCING
 800078e:	4b74      	ldr	r3, [pc, #464]	; (8000960 <trata_teclas+0x1e4>)
 8000790:	2232      	movs	r2, #50	; 0x32
 8000792:	701a      	strb	r2, [r3, #0]
		cont[2]=0x00;
 8000794:	4b73      	ldr	r3, [pc, #460]	; (8000964 <trata_teclas+0x1e8>)
 8000796:	2200      	movs	r2, #0
 8000798:	809a      	strh	r2, [r3, #4]
		while(deboucing>0){
 800079a:	e005      	b.n	80007a8 <trata_teclas+0x2c>
			deboucing--;									//DECREMENTO DO DEBOUCING
 800079c:	4b70      	ldr	r3, [pc, #448]	; (8000960 <trata_teclas+0x1e4>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	4b6e      	ldr	r3, [pc, #440]	; (8000960 <trata_teclas+0x1e4>)
 80007a6:	701a      	strb	r2, [r3, #0]
		while(deboucing>0){
 80007a8:	4b6d      	ldr	r3, [pc, #436]	; (8000960 <trata_teclas+0x1e4>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d1f5      	bne.n	800079c <trata_teclas+0x20>
		}
		if(!flagespera)
 80007b0:	4b6d      	ldr	r3, [pc, #436]	; (8000968 <trata_teclas+0x1ec>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <trata_teclas+0x42>
			flag_bt = OK;									//SETA FLAG DE BOTÃO ACIONADO
 80007b8:	4b6c      	ldr	r3, [pc, #432]	; (800096c <trata_teclas+0x1f0>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
	}
	if(flag_bt == OK)beep();
 80007be:	4b6b      	ldr	r3, [pc, #428]	; (800096c <trata_teclas+0x1f0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d101      	bne.n	80007ca <trata_teclas+0x4e>
 80007c6:	f000 f943 	bl	8000a50 <beep>


	/**********************************************************************************/
	/*                           TRATA EVENTO TECLA VOLTA                             */
	/**********************************************************************************/
	if(!HAL_GPIO_ReadPin(TVL_GPIO_Port, TVL_Pin)){
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4868      	ldr	r0, [pc, #416]	; (8000970 <trata_teclas+0x1f4>)
 80007d0:	f003 f860 	bl	8003894 <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d117      	bne.n	800080a <trata_teclas+0x8e>
		deboucing = 50;							//CONTADOR DEBOUCING
 80007da:	4b61      	ldr	r3, [pc, #388]	; (8000960 <trata_teclas+0x1e4>)
 80007dc:	2232      	movs	r2, #50	; 0x32
 80007de:	701a      	strb	r2, [r3, #0]
		cont[2]=0x00;
 80007e0:	4b60      	ldr	r3, [pc, #384]	; (8000964 <trata_teclas+0x1e8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	809a      	strh	r2, [r3, #4]
		while(deboucing>0){
 80007e6:	e005      	b.n	80007f4 <trata_teclas+0x78>
			deboucing--;						//DECREMENTO DO DEBOUCING
 80007e8:	4b5d      	ldr	r3, [pc, #372]	; (8000960 <trata_teclas+0x1e4>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <trata_teclas+0x1e4>)
 80007f2:	701a      	strb	r2, [r3, #0]
		while(deboucing>0){
 80007f4:	4b5a      	ldr	r3, [pc, #360]	; (8000960 <trata_teclas+0x1e4>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f5      	bne.n	80007e8 <trata_teclas+0x6c>
		}
		if(!flagespera)
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <trata_teclas+0x1ec>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <trata_teclas+0x8e>
			flag_bt = BCK;							//SETA FLAG DE BOTÃO ACIONADO
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <trata_teclas+0x1f0>)
 8000806:	2202      	movs	r2, #2
 8000808:	701a      	strb	r2, [r3, #0]
	}
	if(flag_bt == BCK)beep();
 800080a:	4b58      	ldr	r3, [pc, #352]	; (800096c <trata_teclas+0x1f0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d101      	bne.n	8000816 <trata_teclas+0x9a>
 8000812:	f000 f91d 	bl	8000a50 <beep>
	/**********************************************************************************/
	/*                               TRATA TECLA VOLTA                                */
	/**********************************************************************************/
	if(flag_bt==BCK){
 8000816:	4b55      	ldr	r3, [pc, #340]	; (800096c <trata_teclas+0x1f0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b02      	cmp	r3, #2
 800081c:	d10d      	bne.n	800083a <trata_teclas+0xbe>
		flag_bt = 0;
 800081e:	4b53      	ldr	r3, [pc, #332]	; (800096c <trata_teclas+0x1f0>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		flagUART = 1;
 8000824:	4b53      	ldr	r3, [pc, #332]	; (8000974 <trata_teclas+0x1f8>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
		stt = 'D';
 800082a:	4b53      	ldr	r3, [pc, #332]	; (8000978 <trata_teclas+0x1fc>)
 800082c:	2244      	movs	r2, #68	; 0x44
 800082e:	701a      	strb	r2, [r3, #0]
		transmite_UART();
 8000830:	f000 f95a 	bl	8000ae8 <transmite_UART>
		flagUART = 0;
 8000834:	4b4f      	ldr	r3, [pc, #316]	; (8000974 <trata_teclas+0x1f8>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	}

	/**********************************************************************************/
	/*                           TRATA EVENTO TECLA CIMA                              */
	/**********************************************************************************/
	if(!HAL_GPIO_ReadPin(TCM_GPIO_Port, TCM_Pin)){
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	4847      	ldr	r0, [pc, #284]	; (800095c <trata_teclas+0x1e0>)
 800083e:	f003 f829 	bl	8003894 <HAL_GPIO_ReadPin>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d117      	bne.n	8000878 <trata_teclas+0xfc>
		deboucing = 50;												//CONTADOR DEBOUCING
 8000848:	4b45      	ldr	r3, [pc, #276]	; (8000960 <trata_teclas+0x1e4>)
 800084a:	2232      	movs	r2, #50	; 0x32
 800084c:	701a      	strb	r2, [r3, #0]
		cont[2]=0x00;
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <trata_teclas+0x1e8>)
 8000850:	2200      	movs	r2, #0
 8000852:	809a      	strh	r2, [r3, #4]
		while(deboucing>0){
 8000854:	e005      	b.n	8000862 <trata_teclas+0xe6>
			deboucing--;											//DECREMENTO DO DEBOUCING
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <trata_teclas+0x1e4>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	3b01      	subs	r3, #1
 800085c:	b2da      	uxtb	r2, r3
 800085e:	4b40      	ldr	r3, [pc, #256]	; (8000960 <trata_teclas+0x1e4>)
 8000860:	701a      	strb	r2, [r3, #0]
		while(deboucing>0){
 8000862:	4b3f      	ldr	r3, [pc, #252]	; (8000960 <trata_teclas+0x1e4>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f5      	bne.n	8000856 <trata_teclas+0xda>
		}
		if(!flagespera)
 800086a:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <trata_teclas+0x1ec>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d102      	bne.n	8000878 <trata_teclas+0xfc>
			flag_bt = UP;												//SETA FLAG DE BOTÃO ACIONADO
 8000872:	4b3e      	ldr	r3, [pc, #248]	; (800096c <trata_teclas+0x1f0>)
 8000874:	2203      	movs	r2, #3
 8000876:	701a      	strb	r2, [r3, #0]
	}
	if(flag_bt==UP)beep();
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <trata_teclas+0x1f0>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d101      	bne.n	8000884 <trata_teclas+0x108>
 8000880:	f000 f8e6 	bl	8000a50 <beep>
	/**********************************************************************************/
	/*                              TRATA TECLA CIMA                                  */
	/**********************************************************************************/
	if(flag_bt==UP){
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <trata_teclas+0x1f0>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d11c      	bne.n	80008c6 <trata_teclas+0x14a>
		flag_bt = 0;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <trata_teclas+0x1f0>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
		flagUART = 1;
 8000892:	4b38      	ldr	r3, [pc, #224]	; (8000974 <trata_teclas+0x1f8>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		stt = 'H';
 8000898:	4b37      	ldr	r3, [pc, #220]	; (8000978 <trata_teclas+0x1fc>)
 800089a:	2248      	movs	r2, #72	; 0x48
 800089c:	701a      	strb	r2, [r3, #0]
		transmite_UART();
 800089e:	f000 f923 	bl	8000ae8 <transmite_UART>
		trata_tela();
 80008a2:	f000 f86b 	bl	800097c <trata_tela>
		while(!HAL_GPIO_ReadPin(TCM_GPIO_Port, TCM_Pin)){				//SEGURA O PROGRAMA ENQUANTO O BOTÃO
 80008a6:	bf00      	nop
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	482c      	ldr	r0, [pc, #176]	; (800095c <trata_teclas+0x1e0>)
 80008ac:	f002 fff2 	bl	8003894 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f8      	beq.n	80008a8 <trata_teclas+0x12c>
				//asm("nop");												//CONTINUAR PRESSIONADO
		}
		stt = 'D';
 80008b6:	4b30      	ldr	r3, [pc, #192]	; (8000978 <trata_teclas+0x1fc>)
 80008b8:	2244      	movs	r2, #68	; 0x44
 80008ba:	701a      	strb	r2, [r3, #0]
		transmite_UART();
 80008bc:	f000 f914 	bl	8000ae8 <transmite_UART>
		flagUART = 0;
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <trata_teclas+0x1f8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	}
	/**********************************************************************************/
	/*                           TRATA EVENTO TECLA BAIXO                             */
	/**********************************************************************************/
	if(!HAL_GPIO_ReadPin(TBX_GPIO_Port, TBX_Pin)){
 80008c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ca:	4829      	ldr	r0, [pc, #164]	; (8000970 <trata_teclas+0x1f4>)
 80008cc:	f002 ffe2 	bl	8003894 <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d117      	bne.n	8000906 <trata_teclas+0x18a>
		deboucing = 50;							//CONTADOR DEBOUCING
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <trata_teclas+0x1e4>)
 80008d8:	2232      	movs	r2, #50	; 0x32
 80008da:	701a      	strb	r2, [r3, #0]
		cont[2]=0x00;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <trata_teclas+0x1e8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	809a      	strh	r2, [r3, #4]
		while(deboucing>0){
 80008e2:	e005      	b.n	80008f0 <trata_teclas+0x174>
			deboucing--;						//DECREMENTO DO DEBOUCING
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <trata_teclas+0x1e4>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <trata_teclas+0x1e4>)
 80008ee:	701a      	strb	r2, [r3, #0]
		while(deboucing>0){
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <trata_teclas+0x1e4>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f5      	bne.n	80008e4 <trata_teclas+0x168>
		}
		if(!flagespera)
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <trata_teclas+0x1ec>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <trata_teclas+0x18a>
			flag_bt = DW;							//SETA FLAG DE BOTÃO ACIONADO
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <trata_teclas+0x1f0>)
 8000902:	2204      	movs	r2, #4
 8000904:	701a      	strb	r2, [r3, #0]
	}
	if(flag_bt==DW)beep();
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <trata_teclas+0x1f0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b04      	cmp	r3, #4
 800090c:	d101      	bne.n	8000912 <trata_teclas+0x196>
 800090e:	f000 f89f 	bl	8000a50 <beep>
	/**********************************************************************************/
	/*                               TRATA TECLA BAIXO                                */
	/**********************************************************************************/
	if(flag_bt==DW){
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <trata_teclas+0x1f0>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b04      	cmp	r3, #4
 8000918:	d11d      	bne.n	8000956 <trata_teclas+0x1da>
		flag_bt = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <trata_teclas+0x1f0>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
		flagUART = 1;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <trata_teclas+0x1f8>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
		stt = 'A';
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <trata_teclas+0x1fc>)
 8000928:	2241      	movs	r2, #65	; 0x41
 800092a:	701a      	strb	r2, [r3, #0]
		transmite_UART();
 800092c:	f000 f8dc 	bl	8000ae8 <transmite_UART>
		trata_tela();
 8000930:	f000 f824 	bl	800097c <trata_tela>
		while(!HAL_GPIO_ReadPin(TBX_GPIO_Port, TBX_Pin)){	//SEGURA O PROGRAMA ENQUANTO O BOTÃO
 8000934:	bf00      	nop
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <trata_teclas+0x1f4>)
 800093c:	f002 ffaa 	bl	8003894 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f7      	beq.n	8000936 <trata_teclas+0x1ba>
			//asm("nop");								//CONTINUAR PRESSIONADO
		}
		stt = 'D';
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <trata_teclas+0x1fc>)
 8000948:	2244      	movs	r2, #68	; 0x44
 800094a:	701a      	strb	r2, [r3, #0]
		transmite_UART();
 800094c:	f000 f8cc 	bl	8000ae8 <transmite_UART>
		flagUART = 0;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <trata_teclas+0x1f8>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	}
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	48000800 	.word	0x48000800
 8000960:	200002d9 	.word	0x200002d9
 8000964:	20000348 	.word	0x20000348
 8000968:	200002da 	.word	0x200002da
 800096c:	200002d8 	.word	0x200002d8
 8000970:	48000400 	.word	0x48000400
 8000974:	200002cd 	.word	0x200002cd
 8000978:	2000038b 	.word	0x2000038b

0800097c <trata_tela>:
void trata_tela(void){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	char temp[4] = "00%";
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <trata_tela+0xac>)
 8000984:	607b      	str	r3, [r7, #4]

	OLED_Clear(0);
 8000986:	2000      	movs	r0, #0
 8000988:	f007 fbda 	bl	8008140 <OLED_Clear>
	FontSet(Lucida_12);
 800098c:	4827      	ldr	r0, [pc, #156]	; (8000a2c <trata_tela+0xb0>)
 800098e:	f007 fe3f 	bl	8008610 <FontSet>
	OLED_DrawStr("SENTIDO:", CENTER, 0, 1);
 8000992:	2301      	movs	r3, #1
 8000994:	2200      	movs	r2, #0
 8000996:	21ff      	movs	r1, #255	; 0xff
 8000998:	4825      	ldr	r0, [pc, #148]	; (8000a30 <trata_tela+0xb4>)
 800099a:	f007 fd8b 	bl	80084b4 <OLED_DrawStr>
	if(stt == 'H'){
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <trata_tela+0xb8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b48      	cmp	r3, #72	; 0x48
 80009a4:	d108      	bne.n	80009b8 <trata_tela+0x3c>
		FontSet(Lucida_12);
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <trata_tela+0xb0>)
 80009a8:	f007 fe32 	bl	8008610 <FontSet>
		OLED_DrawStr("HORARIO", CENTER, 16, 1);
 80009ac:	2301      	movs	r3, #1
 80009ae:	2210      	movs	r2, #16
 80009b0:	21ff      	movs	r1, #255	; 0xff
 80009b2:	4821      	ldr	r0, [pc, #132]	; (8000a38 <trata_tela+0xbc>)
 80009b4:	f007 fd7e 	bl	80084b4 <OLED_DrawStr>
	}
	if(stt == 'A'){
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <trata_tela+0xb8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b41      	cmp	r3, #65	; 0x41
 80009be:	d108      	bne.n	80009d2 <trata_tela+0x56>
		FontSet(Lucida_12);
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <trata_tela+0xb0>)
 80009c2:	f007 fe25 	bl	8008610 <FontSet>
		OLED_DrawStr("ANTI-HORARIO", CENTER, 16, 1);
 80009c6:	2301      	movs	r3, #1
 80009c8:	2210      	movs	r2, #16
 80009ca:	21ff      	movs	r1, #255	; 0xff
 80009cc:	481b      	ldr	r0, [pc, #108]	; (8000a3c <trata_tela+0xc0>)
 80009ce:	f007 fd71 	bl	80084b4 <OLED_DrawStr>
	}
	if(stt == 'D'){
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <trata_tela+0xb8>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b44      	cmp	r3, #68	; 0x44
 80009d8:	d108      	bne.n	80009ec <trata_tela+0x70>
		FontSet(Lucida_12);
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <trata_tela+0xb0>)
 80009dc:	f007 fe18 	bl	8008610 <FontSet>
		OLED_DrawStr("DESLIGADO", CENTER, 16, 1);
 80009e0:	2301      	movs	r3, #1
 80009e2:	2210      	movs	r2, #16
 80009e4:	21ff      	movs	r1, #255	; 0xff
 80009e6:	4816      	ldr	r0, [pc, #88]	; (8000a40 <trata_tela+0xc4>)
 80009e8:	f007 fd64 	bl	80084b4 <OLED_DrawStr>
	}
	FontSet(Lucida_12);
 80009ec:	480f      	ldr	r0, [pc, #60]	; (8000a2c <trata_tela+0xb0>)
 80009ee:	f007 fe0f 	bl	8008610 <FontSet>
	OLED_DrawStr("VELOCIDADE:", CENTER, 33, 1);
 80009f2:	2301      	movs	r3, #1
 80009f4:	2221      	movs	r2, #33	; 0x21
 80009f6:	21ff      	movs	r1, #255	; 0xff
 80009f8:	4812      	ldr	r0, [pc, #72]	; (8000a44 <trata_tela+0xc8>)
 80009fa:	f007 fd5b 	bl	80084b4 <OLED_DrawStr>
	sprintf(temp,"%2d%%", uartvpot);
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <trata_tela+0xcc>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4911      	ldr	r1, [pc, #68]	; (8000a4c <trata_tela+0xd0>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f007 fedb 	bl	80087c4 <siprintf>
	OLED_DrawStr(temp, CENTER, 49, 1);
 8000a0e:	1d38      	adds	r0, r7, #4
 8000a10:	2301      	movs	r3, #1
 8000a12:	2231      	movs	r2, #49	; 0x31
 8000a14:	21ff      	movs	r1, #255	; 0xff
 8000a16:	f007 fd4d 	bl	80084b4 <OLED_DrawStr>
	OLED_UpdateScreen();
 8000a1a:	f007 fdb3 	bl	8008584 <OLED_UpdateScreen>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	00253030 	.word	0x00253030
 8000a2c:	0800908c 	.word	0x0800908c
 8000a30:	08008fcc 	.word	0x08008fcc
 8000a34:	2000038b 	.word	0x2000038b
 8000a38:	08008fd8 	.word	0x08008fd8
 8000a3c:	08008fe0 	.word	0x08008fe0
 8000a40:	08008ff0 	.word	0x08008ff0
 8000a44:	08008ffc 	.word	0x08008ffc
 8000a48:	200002ce 	.word	0x200002ce
 8000a4c:	08009008 	.word	0x08009008

08000a50 <beep>:
void beep(void){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(BZ1_GPIO_Port, BZ1_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <beep+0x28>)
 8000a5c:	f002 ff32 	bl	80038c4 <HAL_GPIO_WritePin>
		HAL_Delay(25);
 8000a60:	2019      	movs	r0, #25
 8000a62:	f000 fef3 	bl	800184c <HAL_Delay>
		HAL_GPIO_WritePin(BZ1_GPIO_Port, BZ1_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <beep+0x28>)
 8000a6e:	f002 ff29 	bl	80038c4 <HAL_GPIO_WritePin>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	48000800 	.word	0x48000800

08000a7c <mediaADC>:
uint8_t mediaADC(uint32_t n){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	uint32_t analog_pot = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
	uint8_t perc = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	72bb      	strb	r3, [r7, #10]

	for(uint8_t i = 0; i<n; i++){			//FAZ A MEDIA DAS AMOSTRAS NO VETOR QUE O DMA ARMAZENA OS DADOS DO ADC
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	72fb      	strb	r3, [r7, #11]
 8000a90:	e00a      	b.n	8000aa8 <mediaADC+0x2c>
		analog_pot += adc_buffer[i];
 8000a92:	7afb      	ldrb	r3, [r7, #11]
 8000a94:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <mediaADC+0x64>)
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i<n; i++){			//FAZ A MEDIA DAS AMOSTRAS NO VETOR QUE O DMA ARMAZENA OS DADOS DO ADC
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	72fb      	strb	r3, [r7, #11]
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f0      	bhi.n	8000a92 <mediaADC+0x16>
	}

	analog_pot/=n;
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab8:	60fb      	str	r3, [r7, #12]
	perc = (analog_pot*100)/ADREF;			//TIRAMOS A PORCENTAGEM DO AD.
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2264      	movs	r2, #100	; 0x64
 8000abe:	fb03 f202 	mul.w	r2, r3, r2
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <mediaADC+0x68>)
 8000ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac8:	1ad2      	subs	r2, r2, r3
 8000aca:	0852      	lsrs	r2, r2, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	0adb      	lsrs	r3, r3, #11
 8000ad0:	72bb      	strb	r3, [r7, #10]

	return perc;
 8000ad2:	7abb      	ldrb	r3, [r7, #10]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	200002dc 	.word	0x200002dc
 8000ae4:	00100101 	.word	0x00100101

08000ae8 <transmite_UART>:
void transmite_UART(void){
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b087      	sub	sp, #28
 8000aec:	af00      	add	r7, sp, #0
	char temp[16] = "[CPWM01,P=99,D]";
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <transmite_UART+0x5c>)
 8000af0:	1d3c      	adds	r4, r7, #4
 8000af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t vpot = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	75fb      	strb	r3, [r7, #23]

	vpot  = uartvpot;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <transmite_UART+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	75fb      	strb	r3, [r7, #23]
	sprintf(temp,"[CPWM01,P=%2d,%c]", vpot, stt);
 8000b02:	7dfa      	ldrb	r2, [r7, #23]
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <transmite_UART+0x64>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	1d38      	adds	r0, r7, #4
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <transmite_UART+0x68>)
 8000b0c:	f007 fe5a 	bl	80087c4 <siprintf>
	HAL_GPIO_TogglePin(LED_TX_GPIO_Port, LED_TX_Pin);
 8000b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b18:	f002 feec 	bl	80038f4 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart3, (uint8_t*)&temp, sizeof(temp), HAL_MAX_DELAY);
 8000b1c:	1d39      	adds	r1, r7, #4
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b22:	2210      	movs	r2, #16
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <transmite_UART+0x6c>)
 8000b26:	f005 f9a7 	bl	8005e78 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, (uint8_t*)&rcv_byte, sizeof(rcv_byte));
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	490a      	ldr	r1, [pc, #40]	; (8000b58 <transmite_UART+0x70>)
 8000b2e:	4809      	ldr	r0, [pc, #36]	; (8000b54 <transmite_UART+0x6c>)
 8000b30:	f005 fa30 	bl	8005f94 <HAL_UART_Receive_IT>
	HAL_Delay(50);
 8000b34:	2032      	movs	r0, #50	; 0x32
 8000b36:	f000 fe89 	bl	800184c <HAL_Delay>
	//trata_rx();
}
 8000b3a:	bf00      	nop
 8000b3c:	371c      	adds	r7, #28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	bf00      	nop
 8000b44:	08009024 	.word	0x08009024
 8000b48:	200002ce 	.word	0x200002ce
 8000b4c:	2000038b 	.word	0x2000038b
 8000b50:	08009010 	.word	0x08009010
 8000b54:	20000238 	.word	0x20000238
 8000b58:	2000038a 	.word	0x2000038a

08000b5c <initdisp>:
void initdisp(void){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	OLED_Clear(0);
 8000b60:	2000      	movs	r0, #0
 8000b62:	f007 faed 	bl	8008140 <OLED_Clear>
	OLED_DrawXBM(0 , 0, logov2);/*LOGO AUTOBAN*/
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <initdisp+0x30>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f007 fafb 	bl	8008166 <OLED_DrawXBM>
	OLED_UpdateScreen();
 8000b70:	f007 fd08 	bl	8008584 <OLED_UpdateScreen>
	HAL_Delay(3500);
 8000b74:	f640 50ac 	movw	r0, #3500	; 0xdac
 8000b78:	f000 fe68 	bl	800184c <HAL_Delay>
	OLED_Clear(0);
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f007 fadf 	bl	8008140 <OLED_Clear>
	OLED_UpdateScreen();
 8000b82:	f007 fcff 	bl	8008584 <OLED_UpdateScreen>
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08009b70 	.word	0x08009b70

08000b90 <init_VARS>:
void init_VARS(void){
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
	stt = 'D';
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <init_VARS+0x14>)
 8000b96:	2244      	movs	r2, #68	; 0x44
 8000b98:	701a      	strb	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	2000038b 	.word	0x2000038b

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 8000bac:	f000 fddd 	bl	800176a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f86e 	bl	8000c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa74 	bl	80010a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bb8:	f000 fa48 	bl	800104c <MX_DMA_Init>
  MX_I2C3_Init();
 8000bbc:	f000 f96c 	bl	8000e98 <MX_I2C3_Init>
  MX_TIM3_Init();
 8000bc0:	f000 f9aa 	bl	8000f18 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000bc4:	f000 f9f6 	bl	8000fb4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000bc8:	f000 f926 	bl	8000e18 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000bcc:	f000 f8ac 	bl	8000d28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	/*CONFIGS PERIFERICOS*/
	HAL_TIM_Base_Start_IT(&htim3); //INCIA TIMER3 COM INTERRUPÇÃO NO OVERFLOW
 8000bd0:	4825      	ldr	r0, [pc, #148]	; (8000c68 <main+0xc0>)
 8000bd2:	f004 fc25 	bl	8005420 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 50);
 8000bd6:	2232      	movs	r2, #50	; 0x32
 8000bd8:	4924      	ldr	r1, [pc, #144]	; (8000c6c <main+0xc4>)
 8000bda:	4825      	ldr	r0, [pc, #148]	; (8000c70 <main+0xc8>)
 8000bdc:	f001 f9fa 	bl	8001fd4 <HAL_ADC_Start_DMA>
	HAL_Delay(500);
 8000be0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be4:	f000 fe32 	bl	800184c <HAL_Delay>
	/*CONFIG DISP*/
	OLED_Init(&hi2c3); //INICIANDO DISPLAY
 8000be8:	4822      	ldr	r0, [pc, #136]	; (8000c74 <main+0xcc>)
 8000bea:	f007 fa41 	bl	8008070 <OLED_Init>
	OLED_Clear(11);
 8000bee:	200b      	movs	r0, #11
 8000bf0:	f007 faa6 	bl	8008140 <OLED_Clear>
	OLED_UpdateScreen();
 8000bf4:	f007 fcc6 	bl	8008584 <OLED_UpdateScreen>
	/*-----------*/
	/*CONFIGS EEPROM*/
	/*--------------*/
	/*INICIA AS VARIAVEIS DO SISTEMA*/
	initdisp(); //IMPRIMINDO O BITMAP
 8000bf8:	f7ff ffb0 	bl	8000b5c <initdisp>
	init_VARS();
 8000bfc:	f7ff ffc8 	bl	8000b90 <init_VARS>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if(flagADC){
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <main+0xd0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d010      	beq.n	8000c2a <main+0x82>
			uartvpot = mediaADC(NUMAMOSTRAS);
 8000c08:	2032      	movs	r0, #50	; 0x32
 8000c0a:	f7ff ff37 	bl	8000a7c <mediaADC>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <main+0xd4>)
 8000c14:	701a      	strb	r2, [r3, #0]
			if(uartvpot>99)
 8000c16:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <main+0xd4>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b63      	cmp	r3, #99	; 0x63
 8000c1c:	d902      	bls.n	8000c24 <main+0x7c>
				uartvpot=99;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <main+0xd4>)
 8000c20:	2263      	movs	r2, #99	; 0x63
 8000c22:	701a      	strb	r2, [r3, #0]
			flagADC = 0;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <main+0xd0>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
		}
		/*if(cmd_completo){
			trata_rx();

		}*/
		trata_teclas();
 8000c2a:	f7ff fda7 	bl	800077c <trata_teclas>
		if(flag_com[0]){
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <main+0xd8>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d014      	beq.n	8000c60 <main+0xb8>
			OLED_Clear(0);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f007 fa82 	bl	8008140 <OLED_Clear>
			FontSet(Lucida_12);
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <main+0xdc>)
 8000c3e:	f007 fce7 	bl	8008610 <FontSet>
			OLED_DrawStr("FALHA NA", CENTER, 0, 1);
 8000c42:	2301      	movs	r3, #1
 8000c44:	2200      	movs	r2, #0
 8000c46:	21ff      	movs	r1, #255	; 0xff
 8000c48:	480f      	ldr	r0, [pc, #60]	; (8000c88 <main+0xe0>)
 8000c4a:	f007 fc33 	bl	80084b4 <OLED_DrawStr>
			OLED_DrawStr("COMUNICACAO", CENTER, 16, 1);
 8000c4e:	2301      	movs	r3, #1
 8000c50:	2210      	movs	r2, #16
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <main+0xe4>)
 8000c56:	f007 fc2d 	bl	80084b4 <OLED_DrawStr>
			OLED_UpdateScreen();
 8000c5a:	f007 fc93 	bl	8008584 <OLED_UpdateScreen>
 8000c5e:	e7cf      	b.n	8000c00 <main+0x58>
		}
		else
			trata_tela();
 8000c60:	f7ff fe8c 	bl	800097c <trata_tela>
		if(flagADC){
 8000c64:	e7cc      	b.n	8000c00 <main+0x58>
 8000c66:	bf00      	nop
 8000c68:	200001ec 	.word	0x200001ec
 8000c6c:	200002dc 	.word	0x200002dc
 8000c70:	20000078 	.word	0x20000078
 8000c74:	20000198 	.word	0x20000198
 8000c78:	200002cc 	.word	0x200002cc
 8000c7c:	200002ce 	.word	0x200002ce
 8000c80:	200002d0 	.word	0x200002d0
 8000c84:	0800908c 	.word	0x0800908c
 8000c88:	08009034 	.word	0x08009034
 8000c8c:	08009040 	.word	0x08009040

08000c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	; 0x50
 8000c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	2238      	movs	r2, #56	; 0x38
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f007 fdb0 	bl	8008804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb6:	f003 fb89 	bl	80043cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 fc23 	bl	8004534 <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000cf4:	f000 fa76 	bl	80011e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 ff21 	bl	8004b58 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d1c:	f000 fa62 	bl	80011e4 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3750      	adds	r7, #80	; 0x50
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2220      	movs	r2, #32
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f007 fd5f 	bl	8008804 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d46:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d48:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d56:	4b2e      	ldr	r3, [pc, #184]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d70:	2208      	movs	r2, #8
 8000d72:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d74:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da2:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db0:	4817      	ldr	r0, [pc, #92]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000db2:	f000 ff8b 	bl	8001ccc <HAL_ADC_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000dbc:	f000 fa12 	bl	80011e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000dcc:	f001 fefa 	bl	8002bc4 <HAL_ADCEx_MultiModeConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000dd6:	f000 fa05 	bl	80011e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_ADC1_Init+0xec>)
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dde:	2306      	movs	r3, #6
 8000de0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000de2:	2306      	movs	r3, #6
 8000de4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000de6:	237f      	movs	r3, #127	; 0x7f
 8000de8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dea:	2304      	movs	r3, #4
 8000dec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	; (8000e10 <MX_ADC1_Init+0xe8>)
 8000df8:	f001 f9b4 	bl	8002164 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e02:	f000 f9ef 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	; 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000078 	.word	0x20000078
 8000e14:	04300002 	.word	0x04300002

08000e18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_I2C1_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <MX_I2C1_Init+0x7c>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e52:	480e      	ldr	r0, [pc, #56]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e54:	f002 fd68 	bl	8003928 <HAL_I2C_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e5e:	f000 f9c1 	bl	80011e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e62:	2100      	movs	r1, #0
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e66:	f003 fa19 	bl	800429c <HAL_I2CEx_ConfigAnalogFilter>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e70:	f000 f9b8 	bl	80011e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e74:	2100      	movs	r1, #0
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_I2C1_Init+0x74>)
 8000e78:	f003 fa5b 	bl	8004332 <HAL_I2CEx_ConfigDigitalFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f9af 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000144 	.word	0x20000144
 8000e90:	40005400 	.word	0x40005400
 8000e94:	00602173 	.word	0x00602173

08000e98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	; (8000f10 <MX_I2C3_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00602173;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <MX_I2C3_Init+0x7c>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb4:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ed2:	480e      	ldr	r0, [pc, #56]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ed4:	f002 fd28 	bl	8003928 <HAL_I2C_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ede:	f000 f981 	bl	80011e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4809      	ldr	r0, [pc, #36]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ee6:	f003 f9d9 	bl	800429c <HAL_I2CEx_ConfigAnalogFilter>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ef0:	f000 f978 	bl	80011e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_I2C3_Init+0x74>)
 8000ef8:	f003 fa1b 	bl	8004332 <HAL_I2CEx_ConfigDigitalFilter>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f000 f96f 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000198 	.word	0x20000198
 8000f10:	40007800 	.word	0x40007800
 8000f14:	00602173 	.word	0x00602173

08000f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f38:	4a1d      	ldr	r2, [pc, #116]	; (8000fb0 <MX_TIM3_Init+0x98>)
 8000f3a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f3e:	22c7      	movs	r2, #199	; 0xc7
 8000f40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 239;
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f4a:	22ef      	movs	r2, #239	; 0xef
 8000f4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f5a:	4814      	ldr	r0, [pc, #80]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f5c:	f004 fa08 	bl	8005370 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f66:	f000 f93d 	bl	80011e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f78:	f004 fc0c 	bl	8005794 <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f000 f92f 	bl	80011e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_TIM3_Init+0x94>)
 8000f94:	f004 fe58 	bl	8005c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f9e:	f000 f921 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3720      	adds	r7, #32
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001ec 	.word	0x200001ec
 8000fb0:	40000400 	.word	0x40000400

08000fb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fba:	4a23      	ldr	r2, [pc, #140]	; (8001048 <MX_USART3_UART_Init+0x94>)
 8000fbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fda:	220c      	movs	r2, #12
 8000fdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ffc:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8000ffe:	f004 feeb 	bl	8005dd8 <HAL_UART_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001008:	f000 f8ec 	bl	80011e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100c:	2100      	movs	r1, #0
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8001010:	f006 ff13 	bl	8007e3a <HAL_UARTEx_SetTxFifoThreshold>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800101a:	f000 f8e3 	bl	80011e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8001022:	f006 ff48 	bl	8007eb6 <HAL_UARTEx_SetRxFifoThreshold>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800102c:	f000 f8da 	bl	80011e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	; (8001044 <MX_USART3_UART_Init+0x90>)
 8001032:	f006 fec9 	bl	8007dc8 <HAL_UARTEx_DisableFifoMode>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800103c:	f000 f8d2 	bl	80011e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000238 	.word	0x20000238
 8001048:	40004800 	.word	0x40004800

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_DMA_Init+0x50>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001056:	4a11      	ldr	r2, [pc, #68]	; (800109c <MX_DMA_Init+0x50>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6493      	str	r3, [r2, #72]	; 0x48
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_DMA_Init+0x50>)
 8001060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_DMA_Init+0x50>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <MX_DMA_Init+0x50>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6493      	str	r3, [r2, #72]	; 0x48
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_DMA_Init+0x50>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	200b      	movs	r0, #11
 8001088:	f001 ff1b 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800108c:	200b      	movs	r0, #11
 800108e:	f001 ff32 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a47      	ldr	r2, [pc, #284]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b45      	ldr	r3, [pc, #276]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <MX_GPIO_Init+0x138>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_SET_Pin|BZ1_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f240 4101 	movw	r1, #1025	; 0x401
 8001104:	4835      	ldr	r0, [pc, #212]	; (80011dc <MX_GPIO_Init+0x13c>)
 8001106:	f002 fbdd 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	4833      	ldr	r0, [pc, #204]	; (80011e0 <MX_GPIO_Init+0x140>)
 8001112:	f002 fbd7 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f002 fbd0 	bl	80038c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SET_Pin */
  GPIO_InitStruct.Pin = RF_SET_Pin;
 8001124:	2301      	movs	r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF_SET_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	4828      	ldr	r0, [pc, #160]	; (80011dc <MX_GPIO_Init+0x13c>)
 800113c:	f002 fa28 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001146:	2311      	movs	r3, #17
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	4821      	ldr	r0, [pc, #132]	; (80011e0 <MX_GPIO_Init+0x140>)
 800115a:	f002 fa19 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : TVL_Pin TBX_Pin */
  GPIO_InitStruct.Pin = TVL_Pin|TBX_Pin;
 800115e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <MX_GPIO_Init+0x140>)
 8001174:	f002 fa0c 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : TCF_Pin TCM_Pin */
  GPIO_InitStruct.Pin = TCF_Pin|TCM_Pin;
 8001178:	23c0      	movs	r3, #192	; 0xc0
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	4814      	ldr	r0, [pc, #80]	; (80011dc <MX_GPIO_Init+0x13c>)
 800118c:	f002 fa00 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TX_Pin */
  GPIO_InitStruct.Pin = LED_TX_Pin;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_TX_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ac:	f002 f9f0 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : BZ1_Pin */
  GPIO_InitStruct.Pin = BZ1_Pin;
 80011b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BZ1_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_GPIO_Init+0x13c>)
 80011ca:	f002 f9e1 	bl	8003590 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000800 	.word	0x48000800
 80011e0:	48000400 	.word	0x48000400

080011e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e8:	b672      	cpsid	i
}
 80011ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ec:	e7fe      	b.n	80011ec <Error_Handler+0x8>
	...

080011f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_MspInit+0x44>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_MspInit+0x44>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <HAL_MspInit+0x44>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x44>)
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x44>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6593      	str	r3, [r2, #88]	; 0x58
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x44>)
 800121c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001226:	f003 f975 	bl	8004514 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09a      	sub	sp, #104	; 0x68
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	2244      	movs	r2, #68	; 0x44
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f007 fad3 	bl	8008804 <memset>
  if(hadc->Instance==ADC1)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001266:	d15f      	bne.n	8001328 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800126e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fe89 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001284:	f7ff ffae 	bl	80011e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_ADC_MspInit+0xf8>)
 800128a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128c:	4a28      	ldr	r2, [pc, #160]	; (8001330 <HAL_ADC_MspInit+0xf8>)
 800128e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_ADC_MspInit+0xf8>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_ADC_MspInit+0xf8>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_ADC_MspInit+0xf8>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_ADC_MspInit+0xf8>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADCpot_Pin;
 80012b8:	2301      	movs	r3, #1
 80012ba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012bc:	2303      	movs	r3, #3
 80012be:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(ADCpot_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c8:	4619      	mov	r1, r3
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ce:	f002 f95f 	bl	8003590 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012d4:	4a18      	ldr	r2, [pc, #96]	; (8001338 <HAL_ADC_MspInit+0x100>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012da:	2205      	movs	r2, #5
 80012dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 80012fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 8001302:	2220      	movs	r2, #32
 8001304:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 800130e:	f001 fe0d 	bl	8002f2c <HAL_DMA_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8001318:	f7ff ff64 	bl	80011e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_ADC_MspInit+0xfc>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3768      	adds	r7, #104	; 0x68
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	200000e4 	.word	0x200000e4
 8001338:	40020008 	.word	0x40020008

0800133c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b09e      	sub	sp, #120	; 0x78
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	2244      	movs	r2, #68	; 0x44
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fa51 	bl	8008804 <memset>
  if(hi2c->Instance==I2C1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a4c      	ldr	r2, [pc, #304]	; (8001498 <HAL_I2C_MspInit+0x15c>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d154      	bne.n	8001416 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800136c:	2340      	movs	r3, #64	; 0x40
 800136e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001370:	2300      	movs	r3, #0
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fe09 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001384:	f7ff ff2e 	bl	80011e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_I2C_MspInit+0x160>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a43      	ldr	r2, [pc, #268]	; (800149c <HAL_I2C_MspInit+0x160>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b41      	ldr	r3, [pc, #260]	; (800149c <HAL_I2C_MspInit+0x160>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a0:	4b3e      	ldr	r3, [pc, #248]	; (800149c <HAL_I2C_MspInit+0x160>)
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	4a3d      	ldr	r2, [pc, #244]	; (800149c <HAL_I2C_MspInit+0x160>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <HAL_I2C_MspInit+0x160>)
 80013ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	2312      	movs	r3, #18
 80013c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ca:	2304      	movs	r3, #4
 80013cc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d8:	f002 f8da 	bl	8003590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e0:	2312      	movs	r3, #18
 80013e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ec:	2304      	movs	r3, #4
 80013ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013f4:	4619      	mov	r1, r3
 80013f6:	482a      	ldr	r0, [pc, #168]	; (80014a0 <HAL_I2C_MspInit+0x164>)
 80013f8:	f002 f8ca 	bl	8003590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_I2C_MspInit+0x160>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <HAL_I2C_MspInit+0x160>)
 8001402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001406:	6593      	str	r3, [r2, #88]	; 0x58
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_I2C_MspInit+0x160>)
 800140a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001414:	e03c      	b.n	8001490 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <HAL_I2C_MspInit+0x168>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d137      	bne.n	8001490 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001424:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142a:	f107 0320 	add.w	r3, r7, #32
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fdae 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_MspInit+0x102>
      Error_Handler();
 800143a:	f7ff fed3 	bl	80011e4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_I2C_MspInit+0x160>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_I2C_MspInit+0x160>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_I2C_MspInit+0x160>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001456:	f44f 7340 	mov.w	r3, #768	; 0x300
 800145a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145c:	2312      	movs	r3, #18
 800145e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001468:	2308      	movs	r3, #8
 800146a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_I2C_MspInit+0x16c>)
 8001474:	f002 f88c 	bl	8003590 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_I2C_MspInit+0x160>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_I2C_MspInit+0x160>)
 800147e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_I2C_MspInit+0x160>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	bf00      	nop
 8001492:	3778      	adds	r7, #120	; 0x78
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40005400 	.word	0x40005400
 800149c:	40021000 	.word	0x40021000
 80014a0:	48000400 	.word	0x48000400
 80014a4:	40007800 	.word	0x40007800
 80014a8:	48000800 	.word	0x48000800

080014ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_TIM_Base_MspInit+0x44>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d113      	bne.n	80014e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_Base_MspInit+0x48>)
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2102      	movs	r1, #2
 80014da:	201d      	movs	r0, #29
 80014dc:	f001 fcf1 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e0:	201d      	movs	r0, #29
 80014e2:	f001 fd08 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40000400 	.word	0x40000400
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	; 0x70
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	2244      	movs	r2, #68	; 0x44
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f007 f973 	bl	8008804 <memset>
  if(huart->Instance==USART3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <HAL_UART_MspInit+0xf0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d15b      	bne.n	80015e0 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001528:	2304      	movs	r3, #4
 800152a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fd2b 	bl	8004f90 <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001540:	f7ff fe50 	bl	80011e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_UART_MspInit+0xf4>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	4a28      	ldr	r2, [pc, #160]	; (80015ec <HAL_UART_MspInit+0xf4>)
 800154a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154e:	6593      	str	r3, [r2, #88]	; 0x58
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_UART_MspInit+0xf4>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_UART_MspInit+0xf4>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_UART_MspInit+0xf4>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_UART_MspInit+0xf4>)
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_UART_MspInit+0xf4>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_UART_MspInit+0xf4>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_UART_MspInit+0xf4>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PB9     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800158c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001590:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800159e:	2307      	movs	r3, #7
 80015a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015a6:	4619      	mov	r1, r3
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <HAL_UART_MspInit+0xf8>)
 80015aa:	f001 fff1 	bl	8003590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015c0:	2307      	movs	r3, #7
 80015c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015c8:	4619      	mov	r1, r3
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <HAL_UART_MspInit+0xfc>)
 80015cc:	f001 ffe0 	bl	8003590 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2027      	movs	r0, #39	; 0x27
 80015d6:	f001 fc74 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015da:	2027      	movs	r0, #39	; 0x27
 80015dc:	f001 fc8b 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3770      	adds	r7, #112	; 0x70
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40004800 	.word	0x40004800
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000400 	.word	0x48000400

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f8e4 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA1_Channel1_IRQHandler+0x10>)
 8001652:	f001 fe4e 	bl	80032f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200000e4 	.word	0x200000e4

08001660 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <TIM3_IRQHandler+0x10>)
 8001666:	f003 ff45 	bl	80054f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001ec 	.word	0x200001ec

08001674 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <USART3_IRQHandler+0x10>)
 800167a:	f004 fcd7 	bl	800602c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000238 	.word	0x20000238

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	; (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f007 f8bc 	bl	8008834 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	; (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20008000 	.word	0x20008000
 80016e8:	00000600 	.word	0x00000600
 80016ec:	2000038c 	.word	0x2000038c
 80016f0:	20000cf8 	.word	0x20000cf8

080016f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	; (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	; (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f007 f87b 	bl	8008840 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800174a:	f7ff fa2d 	bl	8000ba8 <main>

0800174e <LoopForever>:

LoopForever:
    b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   r0, =_estack
 8001750:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800175c:	08009fb8 	.word	0x08009fb8
  ldr r2, =_sbss
 8001760:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001764:	20000cf4 	.word	0x20000cf4

08001768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC1_2_IRQHandler>

0800176a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001774:	2003      	movs	r0, #3
 8001776:	f001 fb99 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800177a:	200f      	movs	r0, #15
 800177c:	f000 f80e 	bl	800179c <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d002      	beq.n	800178c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	e001      	b.n	8001790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800178c:	f7ff fd30 	bl	80011f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001790:	79fb      	ldrb	r3, [r7, #7]

}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_InitTick+0x68>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d022      	beq.n	80017f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_InitTick+0x6c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_InitTick+0x68>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fba4 	bl	8002f12 <HAL_SYSTICK_Config>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10f      	bne.n	80017f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b0f      	cmp	r3, #15
 80017d4:	d809      	bhi.n	80017ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d6:	2200      	movs	r2, #0
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	f04f 30ff 	mov.w	r0, #4294967295
 80017de:	f001 fb70 	bl	8002ec2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_InitTick+0x70>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	e007      	b.n	80017fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	e004      	b.n	80017fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e001      	b.n	80017fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_IncTick+0x1c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x20>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4413      	add	r3, r2
 800181e:	4a03      	ldr	r2, [pc, #12]	; (800182c <HAL_IncTick+0x1c>)
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000390 	.word	0x20000390
 8001830:	20000008 	.word	0x20000008

08001834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return uwTick;
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_GetTick+0x14>)
 800183a:	681b      	ldr	r3, [r3, #0]
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000390 	.word	0x20000390

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff ffee 	bl	8001834 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d004      	beq.n	8001870 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_Delay+0x40>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001870:	bf00      	nop
 8001872:	f7ff ffdf 	bl	8001834 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	429a      	cmp	r2, r3
 8001880:	d8f7      	bhi.n	8001872 <HAL_Delay+0x26>
  {
  }
}
 8001882:	bf00      	nop
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000008 	.word	0x20000008

08001890 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	609a      	str	r2, [r3, #8]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3360      	adds	r3, #96	; 0x60
 800190a:	461a      	mov	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <LL_ADC_SetOffset+0x44>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	4313      	orrs	r3, r2
 8001928:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001930:	bf00      	nop
 8001932:	371c      	adds	r7, #28
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	03fff000 	.word	0x03fff000

08001940 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3360      	adds	r3, #96	; 0x60
 800194e:	461a      	mov	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3360      	adds	r3, #96	; 0x60
 800197c:	461a      	mov	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	431a      	orrs	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b087      	sub	sp, #28
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3360      	adds	r3, #96	; 0x60
 80019b2:	461a      	mov	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3360      	adds	r3, #96	; 0x60
 80019e8:	461a      	mov	r2, r3
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
 8001a16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	615a      	str	r2, [r3, #20]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b087      	sub	sp, #28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3330      	adds	r3, #48	; 0x30
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	0a1b      	lsrs	r3, r3, #8
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f003 030c 	and.w	r3, r3, #12
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	211f      	movs	r1, #31
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	401a      	ands	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	f003 011f 	and.w	r1, r3, #31
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aa6:	bf00      	nop
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b087      	sub	sp, #28
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	60f8      	str	r0, [r7, #12]
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	0e5b      	lsrs	r3, r3, #25
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0d1b      	lsrs	r3, r3, #20
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2107      	movs	r1, #7
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	0d1b      	lsrs	r3, r3, #20
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	431a      	orrs	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f003 0318 	and.w	r3, r3, #24
 8001b2a:	4908      	ldr	r1, [pc, #32]	; (8001b4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b2c:	40d9      	lsrs	r1, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	400b      	ands	r3, r1
 8001b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b36:	431a      	orrs	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	0007ffff 	.word	0x0007ffff

08001b50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <LL_ADC_IsEnabled+0x18>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <LL_ADC_IsEnabled+0x1a>
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c6a:	f043 0204 	orr.w	r2, r3, #4
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d101      	bne.n	8001c96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d101      	bne.n	8001cbc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b590      	push	{r4, r7, lr}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e167      	b.n	8001fb6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fa9f 	bl	8001238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff3f 	bl	8001b90 <LL_ADC_IsDeepPowerDownEnabled>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff25 	bl	8001b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff ff5a 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d115      	bne.n	8001d5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff3e 	bl	8001bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d3c:	4ba0      	ldr	r3, [pc, #640]	; (8001fc0 <HAL_ADC_Init+0x2f4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	099b      	lsrs	r3, r3, #6
 8001d42:	4aa0      	ldr	r2, [pc, #640]	; (8001fc4 <HAL_ADC_Init+0x2f8>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff3c 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10d      	bne.n	8001d8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	f043 0210 	orr.w	r2, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff75 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8001d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f040 8100 	bne.w	8001fa4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f040 80fc 	bne.w	8001fa4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001db4:	f043 0202 	orr.w	r2, r3, #2
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <LL_ADC_IsEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001dd0:	f7ff ff2e 	bl	8001c30 <LL_ADC_IsEnabled>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	487c      	ldr	r0, [pc, #496]	; (8001fc8 <HAL_ADC_Init+0x2fc>)
 8001dd8:	f7ff ff2a 	bl	8001c30 <LL_ADC_IsEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	4323      	orrs	r3, r4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4878      	ldr	r0, [pc, #480]	; (8001fcc <HAL_ADC_Init+0x300>)
 8001dec:	f7ff fd50 	bl	8001890 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7f5b      	ldrb	r3, [r3, #29]
 8001df4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dfa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e00:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e06:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e0e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d106      	bne.n	8001e2c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	3b01      	subs	r3, #1
 8001e24:	045b      	lsls	r3, r3, #17
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d009      	beq.n	8001e48 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <HAL_ADC_Init+0x304>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	69b9      	ldr	r1, [r7, #24]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff14 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 8001e7c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d16d      	bne.n	8001f60 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d16a      	bne.n	8001f60 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e8e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e96:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea6:	f023 0302 	bic.w	r3, r3, #2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d017      	beq.n	8001eec <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001eca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ed4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6911      	ldr	r1, [r2, #16]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001eea:	e013      	b.n	8001f14 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001efa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f10:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d118      	bne.n	8001f50 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f3a:	4311      	orrs	r1, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f40:	430a      	orrs	r2, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0201 	orr.w	r2, r2, #1
 8001f4c:	611a      	str	r2, [r3, #16]
 8001f4e:	e007      	b.n	8001f60 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691a      	ldr	r2, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	695b      	ldr	r3, [r3, #20]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d10c      	bne.n	8001f82 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f023 010f 	bic.w	r1, r3, #15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	1e5a      	subs	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f80:	e007      	b.n	8001f92 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 020f 	bic.w	r2, r2, #15
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	f043 0201 	orr.w	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fa2:	e007      	b.n	8001fb4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	f043 0210 	orr.w	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd90      	pop	{r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	053e2d63 	.word	0x053e2d63
 8001fc8:	50000100 	.word	0x50000100
 8001fcc:	50000300 	.word	0x50000300
 8001fd0:	fff04007 	.word	0xfff04007

08001fd4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fe0:	4851      	ldr	r0, [pc, #324]	; (8002128 <HAL_ADC_Start_DMA+0x154>)
 8001fe2:	f7ff fdb5 	bl	8001b50 <LL_ADC_GetMultimode>
 8001fe6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fe46 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 808f 	bne.w	8002118 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADC_Start_DMA+0x34>
 8002004:	2302      	movs	r3, #2
 8002006:	e08a      	b.n	800211e <HAL_ADC_Start_DMA+0x14a>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	2b05      	cmp	r3, #5
 800201a:	d002      	beq.n	8002022 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b09      	cmp	r3, #9
 8002020:	d173      	bne.n	800210a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fc8e 	bl	8002944 <ADC_Enable>
 8002028:	4603      	mov	r3, r0
 800202a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800202c:	7dfb      	ldrb	r3, [r7, #23]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d166      	bne.n	8002100 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002036:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800203a:	f023 0301 	bic.w	r3, r3, #1
 800203e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a38      	ldr	r2, [pc, #224]	; (800212c <HAL_ADC_Start_DMA+0x158>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d002      	beq.n	8002056 <HAL_ADC_Start_DMA+0x82>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e001      	b.n	800205a <HAL_ADC_Start_DMA+0x86>
 8002056:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	4293      	cmp	r3, r2
 8002060:	d002      	beq.n	8002068 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002084:	f023 0206 	bic.w	r2, r3, #6
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	661a      	str	r2, [r3, #96]	; 0x60
 800208c:	e002      	b.n	8002094 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_ADC_Start_DMA+0x15c>)
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_ADC_Start_DMA+0x160>)
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <HAL_ADC_Start_DMA+0x164>)
 80020aa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	221c      	movs	r2, #28
 80020b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0210 	orr.w	r2, r2, #16
 80020ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3340      	adds	r3, #64	; 0x40
 80020e6:	4619      	mov	r1, r3
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f000 ffc6 	bl	800307c <HAL_DMA_Start_IT>
 80020f0:	4603      	mov	r3, r0
 80020f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fdac 	bl	8001c56 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80020fe:	e00d      	b.n	800211c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002108:	e008      	b.n	800211c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002116:	e001      	b.n	800211c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002118:	2302      	movs	r3, #2
 800211a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	50000300 	.word	0x50000300
 800212c:	50000100 	.word	0x50000100
 8002130:	08002a51 	.word	0x08002a51
 8002134:	08002b29 	.word	0x08002b29
 8002138:	08002b45 	.word	0x08002b45

0800213c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0b6      	sub	sp, #216	; 0xd8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x22>
 8002182:	2302      	movs	r3, #2
 8002184:	e3c8      	b.n	8002918 <HAL_ADC_ConfigChannel+0x7b4>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fd73 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 83ad 	bne.w	80028fa <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	f7ff fc54 	bl	8001a5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fd61 	bl	8001c7e <LL_ADC_REG_IsConversionOngoing>
 80021bc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fd6d 	bl	8001ca4 <LL_ADC_INJ_IsConversionOngoing>
 80021ca:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 81d9 	bne.w	800258a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f040 81d4 	bne.w	800258a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021ea:	d10f      	bne.n	800220c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2200      	movs	r2, #0
 80021f6:	4619      	mov	r1, r3
 80021f8:	f7ff fc5b 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fc02 	bl	8001a0e <LL_ADC_SetSamplingTimeCommonConfig>
 800220a:	e00e      	b.n	800222a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6819      	ldr	r1, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	461a      	mov	r2, r3
 800221a:	f7ff fc4a 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fbf2 	bl	8001a0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d022      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6919      	ldr	r1, [r3, #16]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800225c:	f7ff fb4c 	bl	80018f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6919      	ldr	r1, [r3, #16]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	461a      	mov	r2, r3
 800226e:	f7ff fb98 	bl	80019a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800227e:	2b01      	cmp	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x124>
 8002282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002286:	e000      	b.n	800228a <HAL_ADC_ConfigChannel+0x126>
 8002288:	2300      	movs	r3, #0
 800228a:	461a      	mov	r2, r3
 800228c:	f7ff fba4 	bl	80019d8 <LL_ADC_SetOffsetSaturation>
 8002290:	e17b      	b.n	800258a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fb51 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <HAL_ADC_ConfigChannel+0x15a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fb46 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	0e9b      	lsrs	r3, r3, #26
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	e01e      	b.n	80022fc <HAL_ADC_ConfigChannel+0x198>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fb3b 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80022ec:	2320      	movs	r3, #32
 80022ee:	e004      	b.n	80022fa <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80022f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1b0>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	f003 031f 	and.w	r3, r3, #31
 8002312:	e018      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1e2>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800232c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002338:	2320      	movs	r3, #32
 800233a:	e004      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800233c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002346:	429a      	cmp	r2, r3
 8002348:	d106      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fb0a 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff faee 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10a      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x220>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2101      	movs	r1, #1
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fae3 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	f003 021f 	and.w	r2, r3, #31
 8002382:	e01e      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x25e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fad8 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80023a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80023aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80023b2:	2320      	movs	r3, #32
 80023b4:	e004      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80023b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d105      	bne.n	80023da <HAL_ADC_ConfigChannel+0x276>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	e018      	b.n	800240c <HAL_ADC_ConfigChannel+0x2a8>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80023fe:	2320      	movs	r3, #32
 8002400:	e004      	b.n	800240c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002402:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002406:	fab3 f383 	clz	r3, r3
 800240a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2200      	movs	r2, #0
 8002416:	2101      	movs	r1, #1
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff faa7 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2102      	movs	r1, #2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fa8b 	bl	8001940 <LL_ADC_GetOffsetChannel>
 800242a:	4603      	mov	r3, r0
 800242c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <HAL_ADC_ConfigChannel+0x2e6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2102      	movs	r1, #2
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fa80 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	0e9b      	lsrs	r3, r3, #26
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	e01e      	b.n	8002488 <HAL_ADC_ConfigChannel+0x324>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2102      	movs	r1, #2
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fa75 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002460:	fa93 f3a3 	rbit	r3, r3
 8002464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800246c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002470:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002478:	2320      	movs	r3, #32
 800247a:	e004      	b.n	8002486 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800247c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x33c>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	e016      	b.n	80024ce <HAL_ADC_ConfigChannel+0x36a>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ac:	fa93 f3a3 	rbit	r3, r3
 80024b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e004      	b.n	80024ce <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d106      	bne.n	80024e0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2102      	movs	r1, #2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa46 	bl	800196c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2103      	movs	r1, #3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fa2a 	bl	8001940 <LL_ADC_GetOffsetChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_ADC_ConfigChannel+0x3a8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2103      	movs	r1, #3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff fa1f 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002502:	4603      	mov	r3, r0
 8002504:	0e9b      	lsrs	r3, r3, #26
 8002506:	f003 021f 	and.w	r2, r3, #31
 800250a:	e017      	b.n	800253c <HAL_ADC_ConfigChannel+0x3d8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2103      	movs	r1, #3
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fa14 	bl	8001940 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002526:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e003      	b.n	800253a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3f0>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	e011      	b.n	8002578 <HAL_ADC_ConfigChannel+0x414>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002564:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	2103      	movs	r1, #3
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff f9f1 	bl	800196c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb4e 	bl	8001c30 <LL_ADC_IsEnabled>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 8140 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	461a      	mov	r2, r3
 80025aa:	f7ff faad 	bl	8001b08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a8f      	ldr	r2, [pc, #572]	; (80027f0 <HAL_ADC_ConfigChannel+0x68c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f040 8131 	bne.w	800281c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x47e>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	3301      	adds	r3, #1
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	bf94      	ite	ls
 80025da:	2301      	movls	r3, #1
 80025dc:	2300      	movhi	r3, #0
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	e019      	b.n	8002616 <HAL_ADC_ConfigChannel+0x4b2>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80025fa:	2320      	movs	r3, #32
 80025fc:	e003      	b.n	8002606 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80025fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002600:	fab3 f383 	clz	r3, r3
 8002604:	b2db      	uxtb	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	2b09      	cmp	r3, #9
 800260e:	bf94      	ite	ls
 8002610:	2301      	movls	r3, #1
 8002612:	2300      	movhi	r3, #0
 8002614:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002616:	2b00      	cmp	r3, #0
 8002618:	d079      	beq.n	800270e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002622:	2b00      	cmp	r3, #0
 8002624:	d107      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x4d2>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	0e9b      	lsrs	r3, r3, #26
 800262c:	3301      	adds	r3, #1
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002634:	e015      	b.n	8002662 <HAL_ADC_ConfigChannel+0x4fe>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002646:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e003      	b.n	800265a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	fab3 f383 	clz	r3, r3
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	069b      	lsls	r3, r3, #26
 800265e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x51e>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	0e9b      	lsrs	r3, r3, #26
 8002674:	3301      	adds	r3, #1
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f303 	lsl.w	r3, r1, r3
 8002680:	e017      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x54e>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e003      	b.n	80026a6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800269e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	3301      	adds	r3, #1
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	2101      	movs	r1, #1
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x574>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	0e9b      	lsrs	r3, r3, #26
 80026c8:	3301      	adds	r3, #1
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	051b      	lsls	r3, r3, #20
 80026d6:	e018      	b.n	800270a <HAL_ADC_ConfigChannel+0x5a6>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80026f0:	2320      	movs	r3, #32
 80026f2:	e003      	b.n	80026fc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80026f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f6:	fab3 f383 	clz	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f003 021f 	and.w	r2, r3, #31
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800270a:	430b      	orrs	r3, r1
 800270c:	e081      	b.n	8002812 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <HAL_ADC_ConfigChannel+0x5c6>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	0e9b      	lsrs	r3, r3, #26
 8002720:	3301      	adds	r3, #1
 8002722:	069b      	lsls	r3, r3, #26
 8002724:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002728:	e015      	b.n	8002756 <HAL_ADC_ConfigChannel+0x5f2>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002742:	2320      	movs	r3, #32
 8002744:	e003      	b.n	800274e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	3301      	adds	r3, #1
 8002750:	069b      	lsls	r3, r3, #26
 8002752:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x612>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	3301      	adds	r3, #1
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2101      	movs	r1, #1
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	e017      	b.n	80027a6 <HAL_ADC_ConfigChannel+0x642>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	fa93 f3a3 	rbit	r3, r3
 8002782:	61fb      	str	r3, [r7, #28]
  return result;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800278e:	2320      	movs	r3, #32
 8002790:	e003      	b.n	800279a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	2101      	movs	r1, #1
 80027a2:	fa01 f303 	lsl.w	r3, r1, r3
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x66e>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	3301      	adds	r3, #1
 80027be:	f003 021f 	and.w	r2, r3, #31
 80027c2:	4613      	mov	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	4413      	add	r3, r2
 80027c8:	3b1e      	subs	r3, #30
 80027ca:	051b      	lsls	r3, r3, #20
 80027cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d0:	e01e      	b.n	8002810 <HAL_ADC_ConfigChannel+0x6ac>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	613b      	str	r3, [r7, #16]
  return result;
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80027ea:	2320      	movs	r3, #32
 80027ec:	e006      	b.n	80027fc <HAL_ADC_ConfigChannel+0x698>
 80027ee:	bf00      	nop
 80027f0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	f003 021f 	and.w	r2, r3, #31
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	3b1e      	subs	r3, #30
 800280a:	051b      	lsls	r3, r3, #20
 800280c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002810:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002816:	4619      	mov	r1, r3
 8002818:	f7ff f94b 	bl	8001ab2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_ADC_ConfigChannel+0x7bc>)
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d071      	beq.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002828:	483e      	ldr	r0, [pc, #248]	; (8002924 <HAL_ADC_ConfigChannel+0x7c0>)
 800282a:	f7ff f857 	bl	80018dc <LL_ADC_GetCommonPathInternalCh>
 800282e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <HAL_ADC_ConfigChannel+0x7c4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d004      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x6e2>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3a      	ldr	r2, [pc, #232]	; (800292c <HAL_ADC_ConfigChannel+0x7c8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d127      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800284a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d121      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285a:	d157      	bne.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800285c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002860:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002864:	4619      	mov	r1, r3
 8002866:	482f      	ldr	r0, [pc, #188]	; (8002924 <HAL_ADC_ConfigChannel+0x7c0>)
 8002868:	f7ff f825 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800286c:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_ADC_ConfigChannel+0x7cc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	099b      	lsrs	r3, r3, #6
 8002872:	4a30      	ldr	r2, [pc, #192]	; (8002934 <HAL_ADC_ConfigChannel+0x7d0>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	099b      	lsrs	r3, r3, #6
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002886:	e002      	b.n	800288e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3b01      	subs	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002894:	e03a      	b.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a27      	ldr	r2, [pc, #156]	; (8002938 <HAL_ADC_ConfigChannel+0x7d4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d113      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_ADC_ConfigChannel+0x7d8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d02a      	beq.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028be:	4619      	mov	r1, r3
 80028c0:	4818      	ldr	r0, [pc, #96]	; (8002924 <HAL_ADC_ConfigChannel+0x7c0>)
 80028c2:	f7fe fff8 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028c6:	e021      	b.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11c      	bne.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d116      	bne.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a16      	ldr	r2, [pc, #88]	; (800293c <HAL_ADC_ConfigChannel+0x7d8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d011      	beq.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f0:	4619      	mov	r1, r3
 80028f2:	480c      	ldr	r0, [pc, #48]	; (8002924 <HAL_ADC_ConfigChannel+0x7c0>)
 80028f4:	f7fe ffdf 	bl	80018b6 <LL_ADC_SetCommonPathInternalCh>
 80028f8:	e008      	b.n	800290c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002914:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002918:	4618      	mov	r0, r3
 800291a:	37d8      	adds	r7, #216	; 0xd8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	80080000 	.word	0x80080000
 8002924:	50000300 	.word	0x50000300
 8002928:	c3210000 	.word	0xc3210000
 800292c:	90c00010 	.word	0x90c00010
 8002930:	20000000 	.word	0x20000000
 8002934:	053e2d63 	.word	0x053e2d63
 8002938:	c7520000 	.word	0xc7520000
 800293c:	50000100 	.word	0x50000100
 8002940:	cb840000 	.word	0xcb840000

08002944 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800294c:	2300      	movs	r3, #0
 800294e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f96b 	bl	8001c30 <LL_ADC_IsEnabled>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d169      	bne.n	8002a34 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <ADC_Enable+0xfc>)
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00d      	beq.n	800298a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	f043 0210 	orr.w	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e055      	b.n	8002a36 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f93a 	bl	8001c08 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002994:	482b      	ldr	r0, [pc, #172]	; (8002a44 <ADC_Enable+0x100>)
 8002996:	f7fe ffa1 	bl	80018dc <LL_ADC_GetCommonPathInternalCh>
 800299a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <ADC_Enable+0x104>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	4a28      	ldr	r2, [pc, #160]	; (8002a4c <ADC_Enable+0x108>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	099b      	lsrs	r3, r3, #6
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	4613      	mov	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029be:	e002      	b.n	80029c6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f9      	bne.n	80029c0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029cc:	f7fe ff32 	bl	8001834 <HAL_GetTick>
 80029d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029d2:	e028      	b.n	8002a26 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f929 	bl	8001c30 <LL_ADC_IsEnabled>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d104      	bne.n	80029ee <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f90d 	bl	8001c08 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ee:	f7fe ff21 	bl	8001834 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d914      	bls.n	8002a26 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d00d      	beq.n	8002a26 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	f043 0210 	orr.w	r2, r3, #16
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e007      	b.n	8002a36 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d1cf      	bne.n	80029d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	8000003f 	.word	0x8000003f
 8002a44:	50000300 	.word	0x50000300
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	053e2d63 	.word	0x053e2d63

08002a50 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d14b      	bne.n	8002b02 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d021      	beq.n	8002ac8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ffd3 	bl	8001a34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d032      	beq.n	8002afa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d12b      	bne.n	8002afa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11f      	bne.n	8002afa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	f043 0201 	orr.w	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ac6:	e018      	b.n	8002afa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d111      	bne.n	8002afa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7fd fd66 	bl	80005cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b00:	e00e      	b.n	8002b20 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff fb1e 	bl	8002150 <HAL_ADC_ErrorCallback>
}
 8002b14:	e004      	b.n	8002b20 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f7ff fb00 	bl	800213c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b3c:	bf00      	nop
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f043 0204 	orr.w	r2, r3, #4
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff faf0 	bl	8002150 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <LL_ADC_IsEnabled>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <LL_ADC_IsEnabled+0x18>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <LL_ADC_IsEnabled+0x1a>
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b0a1      	sub	sp, #132	; 0x84
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e08b      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bea:	2300      	movs	r3, #0
 8002bec:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bfa:	d102      	bne.n	8002c02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bfc:	4b41      	ldr	r3, [pc, #260]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	e001      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10b      	bne.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e06a      	b.n	8002cfa <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ffb9 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002c2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ffb3 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d14c      	bne.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d149      	bne.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c44:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002c46:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d028      	beq.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c62:	035b      	lsls	r3, r3, #13
 8002c64:	430b      	orrs	r3, r1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c6c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c70:	f7ff ff82 	bl	8002b78 <LL_ADC_IsEnabled>
 8002c74:	4604      	mov	r4, r0
 8002c76:	4823      	ldr	r0, [pc, #140]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c78:	f7ff ff7e 	bl	8002b78 <LL_ADC_IsEnabled>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4323      	orrs	r3, r4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d133      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c8c:	f023 030f 	bic.w	r3, r3, #15
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	6811      	ldr	r1, [r2, #0]
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca0:	e024      	b.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002cb2:	f7ff ff61 	bl	8002b78 <LL_ADC_IsEnabled>
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	4812      	ldr	r0, [pc, #72]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002cba:	f7ff ff5d 	bl	8002b78 <LL_ADC_IsEnabled>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4323      	orrs	r3, r4
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d112      	bne.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002cce:	f023 030f 	bic.w	r3, r3, #15
 8002cd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cd4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd6:	e009      	b.n	8002cec <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cea:	e000      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3784      	adds	r7, #132	; 0x84
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	50000100 	.word	0x50000100
 8002d08:	50000300 	.word	0x50000300

08002d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <__NVIC_SetPriorityGrouping+0x44>)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	60d3      	str	r3, [r2, #12]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d58:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <__NVIC_GetPriorityGrouping+0x18>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	f003 0307 	and.w	r3, r3, #7
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000ed00 	.word	0xe000ed00

08002d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db0b      	blt.n	8002d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 021f 	and.w	r2, r3, #31
 8002d88:	4907      	ldr	r1, [pc, #28]	; (8002da8 <__NVIC_EnableIRQ+0x38>)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100

08002dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	6039      	str	r1, [r7, #0]
 8002db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db0a      	blt.n	8002dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	490c      	ldr	r1, [pc, #48]	; (8002df8 <__NVIC_SetPriority+0x4c>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	0112      	lsls	r2, r2, #4
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd4:	e00a      	b.n	8002dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4908      	ldr	r1, [pc, #32]	; (8002dfc <__NVIC_SetPriority+0x50>)
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	3b04      	subs	r3, #4
 8002de4:	0112      	lsls	r2, r2, #4
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	440b      	add	r3, r1
 8002dea:	761a      	strb	r2, [r3, #24]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000e100 	.word	0xe000e100
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f1c3 0307 	rsb	r3, r3, #7
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	bf28      	it	cs
 8002e1e:	2304      	movcs	r3, #4
 8002e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3304      	adds	r3, #4
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <NVIC_EncodePriority+0x30>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3b03      	subs	r3, #3
 8002e2e:	e000      	b.n	8002e32 <NVIC_EncodePriority+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	f04f 32ff 	mov.w	r2, #4294967295
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	401a      	ands	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	43d9      	mvns	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e58:	4313      	orrs	r3, r2
         );
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	; 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e78:	d301      	bcc.n	8002e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00f      	b.n	8002e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <SysTick_Config+0x40>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e86:	210f      	movs	r1, #15
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295
 8002e8c:	f7ff ff8e 	bl	8002dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <SysTick_Config+0x40>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e96:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <SysTick_Config+0x40>)
 8002e98:	2207      	movs	r2, #7
 8002e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	e000e010 	.word	0xe000e010

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff29 	bl	8002d0c <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff40 	bl	8002d54 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff90 	bl	8002e00 <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5f 	bl	8002dac <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff33 	bl	8002d70 <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff ffa4 	bl	8002e68 <SysTick_Config>
 8002f20:	4603      	mov	r3, r0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e08d      	b.n	800305a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_DMA_Init+0x138>)
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d80f      	bhi.n	8002f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b45      	ldr	r3, [pc, #276]	; (8003068 <HAL_DMA_Init+0x13c>)
 8002f52:	4413      	add	r3, r2
 8002f54:	4a45      	ldr	r2, [pc, #276]	; (800306c <HAL_DMA_Init+0x140>)
 8002f56:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	009a      	lsls	r2, r3, #2
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a42      	ldr	r2, [pc, #264]	; (8003070 <HAL_DMA_Init+0x144>)
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
 8002f68:	e00e      	b.n	8002f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b40      	ldr	r3, [pc, #256]	; (8003074 <HAL_DMA_Init+0x148>)
 8002f72:	4413      	add	r3, r2
 8002f74:	4a3d      	ldr	r2, [pc, #244]	; (800306c <HAL_DMA_Init+0x140>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	009a      	lsls	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a3c      	ldr	r2, [pc, #240]	; (8003078 <HAL_DMA_Init+0x14c>)
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fa76 	bl	80034cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe8:	d102      	bne.n	8002ff0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003004:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_DMA_Init+0x104>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b04      	cmp	r3, #4
 8003014:	d80c      	bhi.n	8003030 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa96 	bl	8003548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e008      	b.n	8003042 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40020407 	.word	0x40020407
 8003068:	bffdfff8 	.word	0xbffdfff8
 800306c:	cccccccd 	.word	0xcccccccd
 8003070:	40020000 	.word	0x40020000
 8003074:	bffdfbf8 	.word	0xbffdfbf8
 8003078:	40020400 	.word	0x40020400

0800307c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_DMA_Start_IT+0x20>
 8003098:	2302      	movs	r3, #2
 800309a:	e066      	b.n	800316a <HAL_DMA_Start_IT+0xee>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d155      	bne.n	800315c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f9bb 	bl	8003450 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 020e 	orr.w	r2, r2, #14
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e00f      	b.n	8003114 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0204 	bic.w	r2, r2, #4
 8003102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 020a 	orr.w	r2, r2, #10
 8003112:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003130:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003148:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	e005      	b.n	8003168 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003164:	2302      	movs	r3, #2
 8003166:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d005      	beq.n	8003196 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2204      	movs	r2, #4
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	e037      	b.n	8003206 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 020e 	bic.w	r2, r2, #14
 80031a4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031b4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f003 021f 	and.w	r2, r3, #31
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f202 	lsl.w	r2, r1, r2
 80031d8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031e2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031fa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003204:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d00d      	beq.n	8003258 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2204      	movs	r2, #4
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e047      	b.n	80032e8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 020e 	bic.w	r2, r2, #14
 8003266:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
    }
  }
  return status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2204      	movs	r2, #4
 8003314:	409a      	lsls	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4013      	ands	r3, r2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d026      	beq.n	800336c <HAL_DMA_IRQHandler+0x7a>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 0304 	and.w	r3, r3, #4
 8003324:	2b00      	cmp	r3, #0
 8003326:	d021      	beq.n	800336c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0204 	bic.w	r2, r2, #4
 8003344:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f003 021f 	and.w	r2, r3, #31
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2104      	movs	r1, #4
 8003354:	fa01 f202 	lsl.w	r2, r1, r2
 8003358:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	2b00      	cmp	r3, #0
 8003360:	d071      	beq.n	8003446 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800336a:	e06c      	b.n	8003446 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	2202      	movs	r2, #2
 8003376:	409a      	lsls	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d02e      	beq.n	80033de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d029      	beq.n	80033de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 020a 	bic.w	r2, r2, #10
 80033a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2102      	movs	r1, #2
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d038      	beq.n	8003446 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80033dc:	e033      	b.n	8003446 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2208      	movs	r2, #8
 80033e8:	409a      	lsls	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02a      	beq.n	8003448 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d025      	beq.n	8003448 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 020e 	bic.w	r2, r2, #14
 800340a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343a:	2b00      	cmp	r3, #0
 800343c:	d004      	beq.n	8003448 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003446:	bf00      	nop
 8003448:	bf00      	nop
}
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003466:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f003 021f 	and.w	r2, r3, #31
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b10      	cmp	r3, #16
 800349c:	d108      	bne.n	80034b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ae:	e007      	b.n	80034c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	60da      	str	r2, [r3, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b16      	ldr	r3, [pc, #88]	; (8003534 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80034dc:	429a      	cmp	r2, r3
 80034de:	d802      	bhi.n	80034e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	e001      	b.n	80034ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034e8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3b08      	subs	r3, #8
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	009a      	lsls	r2, r3, #2
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4413      	add	r3, r2
 800350c:	461a      	mov	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003516:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2201      	movs	r2, #1
 8003520:	409a      	lsls	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40020407 	.word	0x40020407
 8003538:	40020800 	.word	0x40020800
 800353c:	40020820 	.word	0x40020820
 8003540:	cccccccd 	.word	0xcccccccd
 8003544:	40020880 	.word	0x40020880

08003548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	461a      	mov	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a08      	ldr	r2, [pc, #32]	; (800358c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800356a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3b01      	subs	r3, #1
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	1000823f 	.word	0x1000823f
 800358c:	40020940 	.word	0x40020940

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800359e:	e15a      	b.n	8003856 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2101      	movs	r1, #1
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 814c 	beq.w	8003850 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d005      	beq.n	80035d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d130      	bne.n	8003632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003606:	2201      	movs	r2, #1
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 0201 	and.w	r2, r3, #1
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b03      	cmp	r3, #3
 800363c:	d017      	beq.n	800366e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d123      	bne.n	80036c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	08da      	lsrs	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3208      	adds	r2, #8
 8003682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	220f      	movs	r2, #15
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4013      	ands	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	fa02 f303 	lsl.w	r3, r2, r3
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	08da      	lsrs	r2, r3, #3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3208      	adds	r2, #8
 80036bc:	6939      	ldr	r1, [r7, #16]
 80036be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	2203      	movs	r2, #3
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 0203 	and.w	r2, r3, #3
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80a6 	beq.w	8003850 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003704:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <HAL_GPIO_Init+0x2e4>)
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	4a5a      	ldr	r2, [pc, #360]	; (8003874 <HAL_GPIO_Init+0x2e4>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6613      	str	r3, [r2, #96]	; 0x60
 8003710:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_GPIO_Init+0x2e4>)
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371c:	4a56      	ldr	r2, [pc, #344]	; (8003878 <HAL_GPIO_Init+0x2e8>)
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	089b      	lsrs	r3, r3, #2
 8003722:	3302      	adds	r3, #2
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	220f      	movs	r2, #15
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43db      	mvns	r3, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003746:	d01f      	beq.n	8003788 <HAL_GPIO_Init+0x1f8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a4c      	ldr	r2, [pc, #304]	; (800387c <HAL_GPIO_Init+0x2ec>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d019      	beq.n	8003784 <HAL_GPIO_Init+0x1f4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a4b      	ldr	r2, [pc, #300]	; (8003880 <HAL_GPIO_Init+0x2f0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <HAL_GPIO_Init+0x1f0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <HAL_GPIO_Init+0x2f4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00d      	beq.n	800377c <HAL_GPIO_Init+0x1ec>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a49      	ldr	r2, [pc, #292]	; (8003888 <HAL_GPIO_Init+0x2f8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <HAL_GPIO_Init+0x1e8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a48      	ldr	r2, [pc, #288]	; (800388c <HAL_GPIO_Init+0x2fc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_GPIO_Init+0x1e4>
 8003770:	2305      	movs	r3, #5
 8003772:	e00a      	b.n	800378a <HAL_GPIO_Init+0x1fa>
 8003774:	2306      	movs	r3, #6
 8003776:	e008      	b.n	800378a <HAL_GPIO_Init+0x1fa>
 8003778:	2304      	movs	r3, #4
 800377a:	e006      	b.n	800378a <HAL_GPIO_Init+0x1fa>
 800377c:	2303      	movs	r3, #3
 800377e:	e004      	b.n	800378a <HAL_GPIO_Init+0x1fa>
 8003780:	2302      	movs	r3, #2
 8003782:	e002      	b.n	800378a <HAL_GPIO_Init+0x1fa>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_GPIO_Init+0x1fa>
 8003788:	2300      	movs	r3, #0
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	f002 0203 	and.w	r2, r2, #3
 8003790:	0092      	lsls	r2, r2, #2
 8003792:	4093      	lsls	r3, r2
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800379a:	4937      	ldr	r1, [pc, #220]	; (8003878 <HAL_GPIO_Init+0x2e8>)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	3302      	adds	r3, #2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a8:	4b39      	ldr	r3, [pc, #228]	; (8003890 <HAL_GPIO_Init+0x300>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_GPIO_Init+0x300>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037d2:	4b2f      	ldr	r3, [pc, #188]	; (8003890 <HAL_GPIO_Init+0x300>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f6:	4a26      	ldr	r2, [pc, #152]	; (8003890 <HAL_GPIO_Init+0x300>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_GPIO_Init+0x300>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_GPIO_Init+0x300>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_GPIO_Init+0x300>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800384a:	4a11      	ldr	r2, [pc, #68]	; (8003890 <HAL_GPIO_Init+0x300>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f ae9d 	bne.w	80035a0 <HAL_GPIO_Init+0x10>
  }
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40021000 	.word	0x40021000
 8003878:	40010000 	.word	0x40010000
 800387c:	48000400 	.word	0x48000400
 8003880:	48000800 	.word	0x48000800
 8003884:	48000c00 	.word	0x48000c00
 8003888:	48001000 	.word	0x48001000
 800388c:	48001400 	.word	0x48001400
 8003890:	40010400 	.word	0x40010400

08003894 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
 80038b0:	e001      	b.n	80038b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	807b      	strh	r3, [r7, #2]
 80038d0:	4613      	mov	r3, r2
 80038d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038d4:	787b      	ldrb	r3, [r7, #1]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4013      	ands	r3, r2
 800390c:	041a      	lsls	r2, r3, #16
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43d9      	mvns	r1, r3
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	400b      	ands	r3, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e08d      	b.n	8003a56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd fcf4 	bl	800133c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	e006      	b.n	80039b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d108      	bne.n	80039ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	e007      	b.n	80039da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	817b      	strh	r3, [r7, #10]
 8003a70:	4613      	mov	r3, r2
 8003a72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	f040 80fd 	bne.w	8003c7c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2C_Master_Transmit+0x30>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e0f6      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x21e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd fecc 	bl	8001834 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	2319      	movs	r3, #25
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fa00 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0e1      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2221      	movs	r2, #33	; 0x21
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	893a      	ldrh	r2, [r7, #8]
 8003ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2bff      	cmp	r3, #255	; 0xff
 8003aea:	d906      	bls.n	8003afa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003af2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e007      	b.n	8003b0a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b08:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d024      	beq.n	8003b5c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	4b4e      	ldr	r3, [pc, #312]	; (8003c88 <HAL_I2C_Master_Transmit+0x228>)
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fb6f 	bl	8004238 <I2C_TransferConfig>
 8003b5a:	e066      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	8979      	ldrh	r1, [r7, #10]
 8003b64:	4b48      	ldr	r3, [pc, #288]	; (8003c88 <HAL_I2C_Master_Transmit+0x228>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fb64 	bl	8004238 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b70:	e05b      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	6a39      	ldr	r1, [r7, #32]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f9f3 	bl	8003f62 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07b      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d034      	beq.n	8003c2a <HAL_I2C_Master_Transmit+0x1ca>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d130      	bne.n	8003c2a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f96c 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e04d      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d90e      	bls.n	8003c0a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	22ff      	movs	r2, #255	; 0xff
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	8979      	ldrh	r1, [r7, #10]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb18 	bl	8004238 <I2C_TransferConfig>
 8003c08:	e00f      	b.n	8003c2a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fb07 	bl	8004238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d19e      	bne.n	8003b72 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	6a39      	ldr	r1, [r7, #32]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f9d9 	bl	8003ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e01a      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <HAL_I2C_Master_Transmit+0x22c>)
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	80002000 	.word	0x80002000
 8003c8c:	fe00e800 	.word	0xfe00e800

08003c90 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	f040 80d6 	bne.w	8003e5e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0cc      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_I2C_IsDeviceReady+0x44>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e0c5      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2224      	movs	r2, #36	; 0x24
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d107      	bne.n	8003d02 <HAL_I2C_IsDeviceReady+0x72>
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d00:	e006      	b.n	8003d10 <HAL_I2C_IsDeviceReady+0x80>
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	6812      	ldr	r2, [r2, #0]
 8003d14:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003d16:	f7fd fd8d 	bl	8001834 <HAL_GetTick>
 8003d1a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	bf0c      	ite	eq
 8003d2a:	2301      	moveq	r3, #1
 8003d2c:	2300      	movne	r3, #0
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d48:	e034      	b.n	8003db4 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d01a      	beq.n	8003d88 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fd fd6f 	bl	8001834 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <HAL_I2C_IsDeviceReady+0xd8>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f043 0220 	orr.w	r2, r3, #32
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e06b      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_I2C_IsDeviceReady+0x130>
 8003dba:	7fbb      	ldrb	r3, [r7, #30]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0c4      	beq.n	8003d4a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d01a      	beq.n	8003e04 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2120      	movs	r1, #32
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f869 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e03b      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2220      	movs	r2, #32
 8003dee:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e02d      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2120      	movs	r1, #32
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f84e 	bl	8003eb0 <I2C_WaitOnFlagUntilTimeout>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e020      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	3301      	adds	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	f63f af56 	bhi.w	8003cea <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
  }
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d103      	bne.n	8003e86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d007      	beq.n	8003ea4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	619a      	str	r2, [r3, #24]
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec0:	e03b      	b.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	6839      	ldr	r1, [r7, #0]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8d6 	bl	8004078 <I2C_IsErrorOccurred>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e041      	b.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d02d      	beq.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fd fca9 	bl	8001834 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d122      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d113      	bne.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00f      	b.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d0b4      	beq.n	8003ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f6e:	e033      	b.n	8003fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f87f 	bl	8004078 <I2C_IsErrorOccurred>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e031      	b.n	8003fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d025      	beq.n	8003fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8c:	f7fd fc52 	bl	8001834 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d302      	bcc.n	8003fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d11a      	bne.n	8003fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d013      	beq.n	8003fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	f043 0220 	orr.w	r2, r3, #32
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e007      	b.n	8003fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d1c4      	bne.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ffc:	e02f      	b.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f838 	bl	8004078 <I2C_IsErrorOccurred>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e02d      	b.n	800406e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004012:	f7fd fc0f 	bl	8001834 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	429a      	cmp	r2, r3
 8004020:	d302      	bcc.n	8004028 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11a      	bne.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b20      	cmp	r3, #32
 8004034:	d013      	beq.n	800405e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	f043 0220 	orr.w	r2, r3, #32
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e007      	b.n	800406e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b20      	cmp	r3, #32
 800406a:	d1c8      	bne.n	8003ffe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	; 0x28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d068      	beq.n	8004176 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2210      	movs	r2, #16
 80040aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040ac:	e049      	b.n	8004142 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d045      	beq.n	8004142 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040b6:	f7fd fbbd 	bl	8001834 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <I2C_IsErrorOccurred+0x54>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d13a      	bne.n	8004142 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ee:	d121      	bne.n	8004134 <I2C_IsErrorOccurred+0xbc>
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f6:	d01d      	beq.n	8004134 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80040f8:	7cfb      	ldrb	r3, [r7, #19]
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d01a      	beq.n	8004134 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800410c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800410e:	f7fd fb91 	bl	8001834 <HAL_GetTick>
 8004112:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004114:	e00e      	b.n	8004134 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004116:	f7fd fb8d 	bl	8001834 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b19      	cmp	r3, #25
 8004122:	d907      	bls.n	8004134 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f043 0320 	orr.w	r3, r3, #32
 800412a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004132:	e006      	b.n	8004142 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b20      	cmp	r3, #32
 8004140:	d1e9      	bne.n	8004116 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b20      	cmp	r3, #32
 800414e:	d003      	beq.n	8004158 <I2C_IsErrorOccurred+0xe0>
 8004150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0aa      	beq.n	80040ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800415c:	2b00      	cmp	r3, #0
 800415e:	d103      	bne.n	8004168 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2220      	movs	r2, #32
 8004166:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	f043 0304 	orr.w	r3, r3, #4
 800416e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00b      	beq.n	80041a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	f043 0308 	orr.w	r3, r3, #8
 80041b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00b      	beq.n	80041e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f043 0302 	orr.w	r3, r3, #2
 80041d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80041e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01c      	beq.n	8004226 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7ff fe3b 	bl	8003e68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <I2C_IsErrorOccurred+0x1bc>)
 80041fe:	400b      	ands	r3, r1
 8004200:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800422a:	4618      	mov	r0, r3
 800422c:	3728      	adds	r7, #40	; 0x28
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	fe00e800 	.word	0xfe00e800

08004238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	4613      	mov	r3, r2
 8004248:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004250:	7a7b      	ldrb	r3, [r7, #9]
 8004252:	041b      	lsls	r3, r3, #16
 8004254:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004258:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	4313      	orrs	r3, r2
 8004262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004266:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	0d5b      	lsrs	r3, r3, #21
 8004272:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004276:	4b08      	ldr	r3, [pc, #32]	; (8004298 <I2C_TransferConfig+0x60>)
 8004278:	430b      	orrs	r3, r1
 800427a:	43db      	mvns	r3, r3
 800427c:	ea02 0103 	and.w	r1, r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	03ff63ff 	.word	0x03ff63ff

0800429c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d138      	bne.n	8004324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042bc:	2302      	movs	r3, #2
 80042be:	e032      	b.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2224      	movs	r2, #36	; 0x24
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e000      	b.n	8004326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004324:	2302      	movs	r3, #2
  }
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b20      	cmp	r3, #32
 8004346:	d139      	bne.n	80043bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004352:	2302      	movs	r3, #2
 8004354:	e033      	b.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2224      	movs	r2, #36	; 0x24
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0201 	orr.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e000      	b.n	80043be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
  }
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d141      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043da:	4b4b      	ldr	r3, [pc, #300]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d131      	bne.n	800444c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043e8:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	4a46      	ldr	r2, [pc, #280]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004400:	4a41      	ldr	r2, [pc, #260]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004402:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004406:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004408:	4b40      	ldr	r3, [pc, #256]	; (800450c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2232      	movs	r2, #50	; 0x32
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	0c9b      	lsrs	r3, r3, #18
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800441e:	e002      	b.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b01      	subs	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004432:	d102      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f2      	bne.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800443a:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d158      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e057      	b.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800444e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004452:	4a2d      	ldr	r2, [pc, #180]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800445c:	e04d      	b.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004464:	d141      	bne.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004466:	4b28      	ldr	r3, [pc, #160]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d131      	bne.n	80044d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004480:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004484:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800448c:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800448e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004492:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004494:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2232      	movs	r2, #50	; 0x32
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	4a1c      	ldr	r2, [pc, #112]	; (8004510 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044a0:	fba2 2303 	umull	r2, r3, r2, r3
 80044a4:	0c9b      	lsrs	r3, r3, #18
 80044a6:	3301      	adds	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044aa:	e002      	b.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044be:	d102      	bne.n	80044c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f2      	bne.n	80044ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044c6:	4b10      	ldr	r3, [pc, #64]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d2:	d112      	bne.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e011      	b.n	80044fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044de:	4a0a      	ldr	r2, [pc, #40]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80044e8:	e007      	b.n	80044fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40007000 	.word	0x40007000
 800450c:	20000000 	.word	0x20000000
 8004510:	431bde83 	.word	0x431bde83

08004514 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800451e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004522:	6093      	str	r3, [r2, #8]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40007000 	.word	0x40007000

08004534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e2fe      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d075      	beq.n	800463e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004552:	4b97      	ldr	r3, [pc, #604]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800455c:	4b94      	ldr	r3, [pc, #592]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d102      	bne.n	8004572 <HAL_RCC_OscConfig+0x3e>
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d002      	beq.n	8004578 <HAL_RCC_OscConfig+0x44>
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d10b      	bne.n	8004590 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	4b8d      	ldr	r3, [pc, #564]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05b      	beq.n	800463c <HAL_RCC_OscConfig+0x108>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d157      	bne.n	800463c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e2d9      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d106      	bne.n	80045a8 <HAL_RCC_OscConfig+0x74>
 800459a:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a84      	ldr	r2, [pc, #528]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e01d      	b.n	80045e4 <HAL_RCC_OscConfig+0xb0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x98>
 80045b2:	4b7f      	ldr	r3, [pc, #508]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a7e      	ldr	r2, [pc, #504]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	4b7c      	ldr	r3, [pc, #496]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7b      	ldr	r2, [pc, #492]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0xb0>
 80045cc:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a77      	ldr	r2, [pc, #476]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	4b75      	ldr	r3, [pc, #468]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a74      	ldr	r2, [pc, #464]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80045de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d013      	beq.n	8004614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fd f922 	bl	8001834 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd f91e 	bl	8001834 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e29e      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004606:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0xc0>
 8004612:	e014      	b.n	800463e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd f90e 	bl	8001834 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800461c:	f7fd f90a 	bl	8001834 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b64      	cmp	r3, #100	; 0x64
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e28a      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800462e:	4b60      	ldr	r3, [pc, #384]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0xe8>
 800463a:	e000      	b.n	800463e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800463c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d075      	beq.n	8004736 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800464a:	4b59      	ldr	r3, [pc, #356]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004654:	4b56      	ldr	r3, [pc, #344]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d102      	bne.n	800466a <HAL_RCC_OscConfig+0x136>
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d002      	beq.n	8004670 <HAL_RCC_OscConfig+0x13c>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d11f      	bne.n	80046b0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004670:	4b4f      	ldr	r3, [pc, #316]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x154>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e25d      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	4b49      	ldr	r3, [pc, #292]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	4946      	ldr	r1, [pc, #280]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004698:	4313      	orrs	r3, r2
 800469a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800469c:	4b45      	ldr	r3, [pc, #276]	; (80047b4 <HAL_RCC_OscConfig+0x280>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fd f87b 	bl	800179c <HAL_InitTick>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d043      	beq.n	8004734 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e249      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d023      	beq.n	8004700 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b8:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a3c      	ldr	r2, [pc, #240]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd f8b6 	bl	8001834 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd f8b2 	bl	8001834 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e232      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	061b      	lsls	r3, r3, #24
 80046f8:	492d      	ldr	r1, [pc, #180]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	604b      	str	r3, [r1, #4]
 80046fe:	e01a      	b.n	8004736 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004700:	4b2b      	ldr	r3, [pc, #172]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2a      	ldr	r2, [pc, #168]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd f892 	bl	8001834 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd f88e 	bl	8001834 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e20e      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1e0>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d041      	beq.n	80047c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01c      	beq.n	8004784 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800474a:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475a:	f7fd f86b 	bl	8001834 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004760:	e008      	b.n	8004774 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004762:	f7fd f867 	bl	8001834 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	2b02      	cmp	r3, #2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e1e7      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004774:	4b0e      	ldr	r3, [pc, #56]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ef      	beq.n	8004762 <HAL_RCC_OscConfig+0x22e>
 8004782:	e020      	b.n	80047c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 8004786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478a:	4a09      	ldr	r2, [pc, #36]	; (80047b0 <HAL_RCC_OscConfig+0x27c>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd f84e 	bl	8001834 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800479a:	e00d      	b.n	80047b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800479c:	f7fd f84a 	bl	8001834 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d906      	bls.n	80047b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e1ca      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b8:	4b8c      	ldr	r3, [pc, #560]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ea      	bne.n	800479c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80a6 	beq.w	8004920 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047d8:	4b84      	ldr	r3, [pc, #528]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2b4>
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x2b6>
 80047e8:	2300      	movs	r3, #0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00d      	beq.n	800480a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ee:	4b7f      	ldr	r3, [pc, #508]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	4a7e      	ldr	r2, [pc, #504]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
 80047fa:	4b7c      	ldr	r3, [pc, #496]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004806:	2301      	movs	r3, #1
 8004808:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480a:	4b79      	ldr	r3, [pc, #484]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d118      	bne.n	8004848 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004816:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a75      	ldr	r2, [pc, #468]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fd f807 	bl	8001834 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fd f803 	bl	8001834 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e183      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483c:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <HAL_RCC_OscConfig+0x4bc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d108      	bne.n	8004862 <HAL_RCC_OscConfig+0x32e>
 8004850:	4b66      	ldr	r3, [pc, #408]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	4a65      	ldr	r2, [pc, #404]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004860:	e024      	b.n	80048ac <HAL_RCC_OscConfig+0x378>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b05      	cmp	r3, #5
 8004868:	d110      	bne.n	800488c <HAL_RCC_OscConfig+0x358>
 800486a:	4b60      	ldr	r3, [pc, #384]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800486c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004870:	4a5e      	ldr	r2, [pc, #376]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800487a:	4b5c      	ldr	r3, [pc, #368]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	4a5a      	ldr	r2, [pc, #360]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800488a:	e00f      	b.n	80048ac <HAL_RCC_OscConfig+0x378>
 800488c:	4b57      	ldr	r3, [pc, #348]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	4a56      	ldr	r2, [pc, #344]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800489c:	4b53      	ldr	r3, [pc, #332]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a52      	ldr	r2, [pc, #328]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d016      	beq.n	80048e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fc ffbe 	bl	8001834 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fc ffba 	bl	8001834 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e138      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d2:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ed      	beq.n	80048bc <HAL_RCC_OscConfig+0x388>
 80048e0:	e015      	b.n	800490e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fc ffa7 	bl	8001834 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fc ffa3 	bl	8001834 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e121      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004900:	4b3a      	ldr	r3, [pc, #232]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ed      	bne.n	80048ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800490e:	7ffb      	ldrb	r3, [r7, #31]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004914:	4b35      	ldr	r3, [pc, #212]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	4a34      	ldr	r2, [pc, #208]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800491a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800491e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d03c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01c      	beq.n	800496e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004934:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800493a:	4a2c      	ldr	r2, [pc, #176]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fc ff76 	bl	8001834 <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800494c:	f7fc ff72 	bl	8001834 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e0f2      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800495e:	4b23      	ldr	r3, [pc, #140]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ef      	beq.n	800494c <HAL_RCC_OscConfig+0x418>
 800496c:	e01b      	b.n	80049a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800496e:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fc ff59 	bl	8001834 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004986:	f7fc ff55 	bl	8001834 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0d5      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004998:	4b14      	ldr	r3, [pc, #80]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 800499a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ef      	bne.n	8004986 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80c9 	beq.w	8004b42 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b0c      	cmp	r3, #12
 80049ba:	f000 8083 	beq.w	8004ac4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d15e      	bne.n	8004a84 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_RCC_OscConfig+0x4b8>)
 80049cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fc ff2f 	bl	8001834 <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d8:	e00c      	b.n	80049f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049da:	f7fc ff2b 	bl	8001834 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d905      	bls.n	80049f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0ab      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f4:	4b55      	ldr	r3, [pc, #340]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ec      	bne.n	80049da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a00:	4b52      	ldr	r3, [pc, #328]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	4b52      	ldr	r3, [pc, #328]	; (8004b50 <HAL_RCC_OscConfig+0x61c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6a11      	ldr	r1, [r2, #32]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004a1a:	0212      	lsls	r2, r2, #8
 8004a1c:	4311      	orrs	r1, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a22:	0852      	lsrs	r2, r2, #1
 8004a24:	3a01      	subs	r2, #1
 8004a26:	0552      	lsls	r2, r2, #21
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0652      	lsls	r2, r2, #25
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a3a:	06d2      	lsls	r2, r2, #27
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4943      	ldr	r1, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a44:	4b41      	ldr	r3, [pc, #260]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a40      	ldr	r2, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a4e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a50:	4b3e      	ldr	r3, [pc, #248]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	4a3d      	ldr	r2, [pc, #244]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fc feea 	bl	8001834 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fc fee6 	bl	8001834 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e066      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a76:	4b35      	ldr	r3, [pc, #212]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0f0      	beq.n	8004a64 <HAL_RCC_OscConfig+0x530>
 8004a82:	e05e      	b.n	8004b42 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a30      	ldr	r2, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004a8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fc fed0 	bl	8001834 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a98:	f7fc fecc 	bl	8001834 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e04c      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4924      	ldr	r1, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004abc:	4b25      	ldr	r3, [pc, #148]	; (8004b54 <HAL_RCC_OscConfig+0x620>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60cb      	str	r3, [r1, #12]
 8004ac2:	e03e      	b.n	8004b42 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e039      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	; (8004b4c <HAL_RCC_OscConfig+0x618>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f003 0203 	and.w	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d12c      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	3b01      	subs	r3, #1
 8004af0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d123      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d11b      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d113      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	3b01      	subs	r3, #1
 8004b38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	019f800c 	.word	0x019f800c
 8004b54:	feeefffc 	.word	0xfeeefffc

08004b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e11e      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b70:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d910      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7e:	4b8e      	ldr	r3, [pc, #568]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f023 020f 	bic.w	r2, r3, #15
 8004b86:	498c      	ldr	r1, [pc, #560]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8e:	4b8a      	ldr	r3, [pc, #552]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d001      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e106      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d073      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d129      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bb4:	4b81      	ldr	r3, [pc, #516]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e0f4      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bc4:	f000 f99e 	bl	8004f04 <RCC_GetSysClockFreqFromPLLSource>
 8004bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4a7c      	ldr	r2, [pc, #496]	; (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d93f      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bd2:	4b7a      	ldr	r3, [pc, #488]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d033      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d12f      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bf2:	4b72      	ldr	r3, [pc, #456]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfa:	4a70      	ldr	r2, [pc, #448]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c02:	2380      	movs	r3, #128	; 0x80
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	e024      	b.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c10:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0c6      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c20:	4b66      	ldr	r3, [pc, #408]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0be      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c30:	f000 f8ce 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <HAL_RCC_ClockConfig+0x268>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d909      	bls.n	8004c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c46:	4a5d      	ldr	r2, [pc, #372]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c52:	4b5a      	ldr	r3, [pc, #360]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f023 0203 	bic.w	r2, r3, #3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4957      	ldr	r1, [pc, #348]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fc fde6 	bl	8001834 <HAL_GetTick>
 8004c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c6c:	f7fc fde2 	bl	8001834 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e095      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c82:	4b4e      	ldr	r3, [pc, #312]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 020c 	and.w	r2, r3, #12
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d1eb      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d023      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cac:	4b43      	ldr	r3, [pc, #268]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a42      	ldr	r2, [pc, #264]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ccc:	4a3b      	ldr	r2, [pc, #236]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd4:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4936      	ldr	r1, [pc, #216]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b80      	cmp	r3, #128	; 0x80
 8004cec:	d105      	bne.n	8004cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cee:	4b33      	ldr	r3, [pc, #204]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	4a32      	ldr	r2, [pc, #200]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d21d      	bcs.n	8004d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f023 020f 	bic.w	r2, r3, #15
 8004d10:	4929      	ldr	r1, [pc, #164]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d18:	f7fc fd8c 	bl	8001834 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d1e:	e00a      	b.n	8004d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d20:	f7fc fd88 	bl	8001834 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e03b      	b.n	8004dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <HAL_RCC_ClockConfig+0x260>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d1ed      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d50:	4b1a      	ldr	r3, [pc, #104]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4917      	ldr	r1, [pc, #92]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d009      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	490f      	ldr	r1, [pc, #60]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d82:	f000 f825 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8004d86:	4602      	mov	r2, r0
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <HAL_RCC_ClockConfig+0x264>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	490c      	ldr	r1, [pc, #48]	; (8004dc4 <HAL_RCC_ClockConfig+0x26c>)
 8004d94:	5ccb      	ldrb	r3, [r1, r3]
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9e:	4a0a      	ldr	r2, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x270>)
 8004da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004da2:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <HAL_RCC_ClockConfig+0x274>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fc fcf8 	bl	800179c <HAL_InitTick>
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40022000 	.word	0x40022000
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	04c4b400 	.word	0x04c4b400
 8004dc4:	0800904c 	.word	0x0800904c
 8004dc8:	20000000 	.word	0x20000000
 8004dcc:	20000004 	.word	0x20000004

08004dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d102      	bne.n	8004de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004de2:	4b2a      	ldr	r3, [pc, #168]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e047      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d102      	bne.n	8004dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e03e      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004dfa:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 030c 	and.w	r3, r3, #12
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d136      	bne.n	8004e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e06:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d10c      	bne.n	8004e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e2e:	68d2      	ldr	r2, [r2, #12]
 8004e30:	0a12      	lsrs	r2, r2, #8
 8004e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e36:	fb02 f303 	mul.w	r3, r2, r3
 8004e3a:	617b      	str	r3, [r7, #20]
      break;
 8004e3c:	e00c      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e3e:	4a13      	ldr	r2, [pc, #76]	; (8004e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	0a12      	lsrs	r2, r2, #8
 8004e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
      break;
 8004e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e58:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	0e5b      	lsrs	r3, r3, #25
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	3301      	adds	r3, #1
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	e001      	b.n	8004e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e78:	693b      	ldr	r3, [r7, #16]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	371c      	adds	r7, #28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	00f42400 	.word	0x00f42400
 8004e90:	007a1200 	.word	0x007a1200

08004e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000000 	.word	0x20000000

08004eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004eb0:	f7ff fff0 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4904      	ldr	r1, [pc, #16]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	0800905c 	.word	0x0800905c

08004ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004edc:	f7ff ffda 	bl	8004e94 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b06      	ldr	r3, [pc, #24]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0adb      	lsrs	r3, r3, #11
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4904      	ldr	r1, [pc, #16]	; (8004f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	0800905c 	.word	0x0800905c

08004f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f14:	4b1b      	ldr	r3, [pc, #108]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d10c      	bne.n	8004f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f28:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f30:	4a14      	ldr	r2, [pc, #80]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	0a12      	lsrs	r2, r2, #8
 8004f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]
    break;
 8004f40:	e00c      	b.n	8004f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f42:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f4c:	68d2      	ldr	r2, [r2, #12]
 8004f4e:	0a12      	lsrs	r2, r2, #8
 8004f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    break;
 8004f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	0e5b      	lsrs	r3, r3, #25
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	3301      	adds	r3, #1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f76:	687b      	ldr	r3, [r7, #4]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40021000 	.word	0x40021000
 8004f88:	007a1200 	.word	0x007a1200
 8004f8c:	00f42400 	.word	0x00f42400

08004f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f98:	2300      	movs	r3, #0
 8004f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8098 	beq.w	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb2:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	4b40      	ldr	r3, [pc, #256]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a3f      	ldr	r2, [pc, #252]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	4b3d      	ldr	r3, [pc, #244]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fda:	4b3a      	ldr	r3, [pc, #232]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a39      	ldr	r2, [pc, #228]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe6:	f7fc fc25 	bl	8001834 <HAL_GetTick>
 8004fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fec:	e009      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fc fc21 	bl	8001834 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d159      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	d019      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005030:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800503c:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800504c:	4b1c      	ldr	r3, [pc, #112]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800505c:	4a18      	ldr	r2, [pc, #96]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fc fbe1 	bl	8001834 <HAL_GetTick>
 8005072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005074:	e00b      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005076:	f7fc fbdd 	bl	8001834 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d902      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	74fb      	strb	r3, [r7, #19]
            break;
 800508c:	e006      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	4b0c      	ldr	r3, [pc, #48]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ec      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a2:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	4903      	ldr	r1, [pc, #12]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050b8:	e008      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ba:	7cfb      	ldrb	r3, [r7, #19]
 80050bc:	74bb      	strb	r3, [r7, #18]
 80050be:	e005      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050cc:	7c7b      	ldrb	r3, [r7, #17]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d105      	bne.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d2:	4ba6      	ldr	r3, [pc, #664]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d6:	4aa5      	ldr	r2, [pc, #660]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ea:	4ba0      	ldr	r3, [pc, #640]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f0:	f023 0203 	bic.w	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	499c      	ldr	r1, [pc, #624]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800510c:	4b97      	ldr	r3, [pc, #604]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800510e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005112:	f023 020c 	bic.w	r2, r3, #12
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	4994      	ldr	r1, [pc, #592]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800512e:	4b8f      	ldr	r3, [pc, #572]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	498b      	ldr	r1, [pc, #556]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005150:	4b86      	ldr	r3, [pc, #536]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	4983      	ldr	r1, [pc, #524]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005172:	4b7e      	ldr	r3, [pc, #504]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005178:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	497a      	ldr	r1, [pc, #488]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005194:	4b75      	ldr	r3, [pc, #468]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	4972      	ldr	r1, [pc, #456]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4969      	ldr	r1, [pc, #420]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d8:	4b64      	ldr	r3, [pc, #400]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	4961      	ldr	r1, [pc, #388]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051fa:	4b5c      	ldr	r3, [pc, #368]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	4958      	ldr	r1, [pc, #352]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800521c:	4b53      	ldr	r3, [pc, #332]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	4950      	ldr	r1, [pc, #320]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523a:	d105      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800523c:	4b4b      	ldr	r3, [pc, #300]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	4a4a      	ldr	r2, [pc, #296]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005254:	4b45      	ldr	r3, [pc, #276]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005262:	4942      	ldr	r1, [pc, #264]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005272:	d105      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005274:	4b3d      	ldr	r3, [pc, #244]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	4a3c      	ldr	r2, [pc, #240]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d015      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800528c:	4b37      	ldr	r3, [pc, #220]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	4934      	ldr	r1, [pc, #208]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052aa:	d105      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ac:	4b2f      	ldr	r3, [pc, #188]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4a2e      	ldr	r2, [pc, #184]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c4:	4b29      	ldr	r3, [pc, #164]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	4926      	ldr	r1, [pc, #152]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e2:	d105      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e4:	4b21      	ldr	r3, [pc, #132]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a20      	ldr	r2, [pc, #128]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d015      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80052fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530a:	4918      	ldr	r1, [pc, #96]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800531a:	d105      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800531c:	4b13      	ldr	r3, [pc, #76]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	4a12      	ldr	r2, [pc, #72]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d015      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005334:	4b0d      	ldr	r3, [pc, #52]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	490a      	ldr	r1, [pc, #40]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005352:	d105      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	4a04      	ldr	r2, [pc, #16]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800535a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005360:	7cbb      	ldrb	r3, [r7, #18]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40021000 	.word	0x40021000

08005370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e049      	b.n	8005416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f888 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 fb12 	bl	80059d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e04a      	b.n	80054ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a21      	ldr	r2, [pc, #132]	; (80054dc <HAL_TIM_Base_Start_IT+0xbc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d013      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1d      	ldr	r2, [pc, #116]	; (80054e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x6c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a19      	ldr	r2, [pc, #100]	; (80054ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d115      	bne.n	80054b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005494:	4013      	ands	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d015      	beq.n	80054ca <HAL_TIM_Base_Start_IT+0xaa>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a4:	d011      	beq.n	80054ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f042 0201 	orr.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	e008      	b.n	80054ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	e000      	b.n	80054cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40000400 	.word	0x40000400
 80054e4:	40000800 	.word	0x40000800
 80054e8:	40013400 	.word	0x40013400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	00010007 	.word	0x00010007

080054f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d020      	beq.n	8005558 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01b      	beq.n	8005558 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0202 	mvn.w	r2, #2
 8005528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa2c 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa1e 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa2f 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d020      	beq.n	80055a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01b      	beq.n	80055a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f06f 0204 	mvn.w	r2, #4
 8005574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa06 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 8005590:	e005      	b.n	800559e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9f8 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fa09 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0208 	mvn.w	r2, #8
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f9e0 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f9d2 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f9e3 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0310 	and.w	r3, r3, #16
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0210 	mvn.w	r2, #16
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2208      	movs	r2, #8
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f9ba 	bl	800599c <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f9ac 	bl	8005988 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f9bd 	bl	80059b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0201 	mvn.w	r2, #1
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fb f834 	bl	80006c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005666:	2b00      	cmp	r3, #0
 8005668:	d104      	bne.n	8005674 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00c      	beq.n	800568e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb69 	bl	8005d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fb61 	bl	8005d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00c      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f977 	bl	80059c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f06f 0220 	mvn.w	r2, #32
 80056f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fb29 	bl	8005d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00c      	beq.n	800571e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fb35 	bl	8005d88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00c      	beq.n	8005742 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fb2d 	bl	8005d9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00c      	beq.n	8005766 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fb25 	bl	8005db0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00c      	beq.n	800578a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fb1d 	bl	8005dc4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_ConfigClockSource+0x1c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0de      	b.n	800596e <HAL_TIM_ConfigClockSource+0x1da>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80057ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a63      	ldr	r2, [pc, #396]	; (8005978 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f000 80a9 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 80057f0:	4a61      	ldr	r2, [pc, #388]	; (8005978 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f200 80ae 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 80057f8:	4a60      	ldr	r2, [pc, #384]	; (800597c <HAL_TIM_ConfigClockSource+0x1e8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	f000 80a1 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005800:	4a5e      	ldr	r2, [pc, #376]	; (800597c <HAL_TIM_ConfigClockSource+0x1e8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	f200 80a6 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005808:	4a5d      	ldr	r2, [pc, #372]	; (8005980 <HAL_TIM_ConfigClockSource+0x1ec>)
 800580a:	4293      	cmp	r3, r2
 800580c:	f000 8099 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005810:	4a5b      	ldr	r2, [pc, #364]	; (8005980 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005812:	4293      	cmp	r3, r2
 8005814:	f200 809e 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005818:	4a5a      	ldr	r2, [pc, #360]	; (8005984 <HAL_TIM_ConfigClockSource+0x1f0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	f000 8091 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005820:	4a58      	ldr	r2, [pc, #352]	; (8005984 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f200 8096 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005828:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800582c:	f000 8089 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005830:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005834:	f200 808e 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583c:	d03e      	beq.n	80058bc <HAL_TIM_ConfigClockSource+0x128>
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005842:	f200 8087 	bhi.w	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584a:	f000 8086 	beq.w	800595a <HAL_TIM_ConfigClockSource+0x1c6>
 800584e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005852:	d87f      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d01a      	beq.n	800588e <HAL_TIM_ConfigClockSource+0xfa>
 8005858:	2b70      	cmp	r3, #112	; 0x70
 800585a:	d87b      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d050      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x16e>
 8005860:	2b60      	cmp	r3, #96	; 0x60
 8005862:	d877      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d03c      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x14e>
 8005868:	2b50      	cmp	r3, #80	; 0x50
 800586a:	d873      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d058      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x18e>
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d86f      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d064      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005878:	2b30      	cmp	r3, #48	; 0x30
 800587a:	d86b      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d060      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d867      	bhi.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d05c      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 8005888:	2b10      	cmp	r3, #16
 800588a:	d05a      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x1ae>
 800588c:	e062      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800589e:	f000 f9b3 	bl	8005c08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	609a      	str	r2, [r3, #8]
      break;
 80058ba:	e04f      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058cc:	f000 f99c 	bl	8005c08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058de:	609a      	str	r2, [r3, #8]
      break;
 80058e0:	e03c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 f90e 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2150      	movs	r1, #80	; 0x50
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f967 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005900:	e02c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 f92d 	bl	8005b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2160      	movs	r1, #96	; 0x60
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f957 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005920:	e01c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592e:	461a      	mov	r2, r3
 8005930:	f000 f8ee 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	4618      	mov	r0, r3
 800593c:	f000 f947 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005940:	e00c      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f000 f93e 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005952:	e003      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	73fb      	strb	r3, [r7, #15]
      break;
 8005958:	e000      	b.n	800595c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800595a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	00100070 	.word	0x00100070
 800597c:	00100040 	.word	0x00100040
 8005980:	00100030 	.word	0x00100030
 8005984:	00100020 	.word	0x00100020

08005988 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a42      	ldr	r2, [pc, #264]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00f      	beq.n	8005a10 <TIM_Base_SetConfig+0x38>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f6:	d00b      	beq.n	8005a10 <TIM_Base_SetConfig+0x38>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a3f      	ldr	r2, [pc, #252]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_Base_SetConfig+0x38>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3e      	ldr	r2, [pc, #248]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0x38>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3d      	ldr	r2, [pc, #244]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a33      	ldr	r2, [pc, #204]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01b      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d017      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a30      	ldr	r2, [pc, #192]	; (8005af8 <TIM_Base_SetConfig+0x120>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2f      	ldr	r2, [pc, #188]	; (8005afc <TIM_Base_SetConfig+0x124>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_Base_SetConfig+0x8a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x134>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d108      	bne.n	8005a74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <TIM_Base_SetConfig+0x11c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00f      	beq.n	8005ac0 <TIM_Base_SetConfig+0xe8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <TIM_Base_SetConfig+0x128>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00b      	beq.n	8005ac0 <TIM_Base_SetConfig+0xe8>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <TIM_Base_SetConfig+0x12c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <TIM_Base_SetConfig+0xe8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <TIM_Base_SetConfig+0x130>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d003      	beq.n	8005ac0 <TIM_Base_SetConfig+0xe8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <TIM_Base_SetConfig+0x134>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d103      	bne.n	8005ac8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f023 0201 	bic.w	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	611a      	str	r2, [r3, #16]
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000800 	.word	0x40000800
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800

08005b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0201 	bic.w	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 030a 	bic.w	r3, r3, #10
 8005b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 0210 	bic.w	r2, r3, #16
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f043 0307 	orr.w	r3, r3, #7
 8005bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	021a      	lsls	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d101      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	e065      	b.n	8005d2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d108      	bne.n	8005ca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d018      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d013      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a18      	ldr	r2, [pc, #96]	; (8005d40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00e      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40013400 	.word	0x40013400
 8005d40:	40000400 	.word	0x40000400
 8005d44:	40000800 	.word	0x40000800
 8005d48:	40014000 	.word	0x40014000

08005d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e042      	b.n	8005e70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d106      	bne.n	8005e02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fb fb7b 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2224      	movs	r2, #36	; 0x24
 8005e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 ff12 	bl	8006c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 fc43 	bl	80066b4 <UART_SetConfig>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e01b      	b.n	8005e70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 ff91 	bl	8006d90 <UART_CheckIdleState>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	2b20      	cmp	r3, #32
 8005e90:	d17b      	bne.n	8005f8a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_UART_Transmit+0x26>
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e074      	b.n	8005f8c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2221      	movs	r2, #33	; 0x21
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eb2:	f7fb fcbf 	bl	8001834 <HAL_GetTick>
 8005eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed0:	d108      	bne.n	8005ee4 <HAL_UART_Transmit+0x6c>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005eec:	e030      	b.n	8005f50 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	2180      	movs	r1, #128	; 0x80
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fff3 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e03d      	b.n	8005f8c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	3302      	adds	r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	e007      	b.n	8005f3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1c8      	bne.n	8005eee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	2140      	movs	r1, #64	; 0x40
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 ffbc 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e006      	b.n	8005f8c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e000      	b.n	8005f8c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
  }
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08a      	sub	sp, #40	; 0x28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d137      	bne.n	800601c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_UART_Receive_IT+0x24>
 8005fb2:	88fb      	ldrh	r3, [r7, #6]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e030      	b.n	800601e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a18      	ldr	r2, [pc, #96]	; (8006028 <HAL_UART_Receive_IT+0x94>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d01f      	beq.n	800600c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d018      	beq.n	800600c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	6a3a      	ldr	r2, [r7, #32]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	61bb      	str	r3, [r7, #24]
   return(result);
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e6      	bne.n	8005fda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	461a      	mov	r2, r3
 8006010:	68b9      	ldr	r1, [r7, #8]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 ffd4 	bl	8006fc0 <UART_Start_Receive_IT>
 8006018:	4603      	mov	r3, r0
 800601a:	e000      	b.n	800601e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40008000 	.word	0x40008000

0800602c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0ba      	sub	sp, #232	; 0xe8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006056:	f640 030f 	movw	r3, #2063	; 0x80f
 800605a:	4013      	ands	r3, r2
 800605c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11b      	bne.n	80060a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606c:	f003 0320 	and.w	r3, r3, #32
 8006070:	2b00      	cmp	r3, #0
 8006072:	d015      	beq.n	80060a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d105      	bne.n	800608c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 82e3 	beq.w	800665c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
      }
      return;
 800609e:	e2dd      	b.n	800665c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8123 	beq.w	80062f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80060ae:	4b8d      	ldr	r3, [pc, #564]	; (80062e4 <HAL_UART_IRQHandler+0x2b8>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060ba:	4b8b      	ldr	r3, [pc, #556]	; (80062e8 <HAL_UART_IRQHandler+0x2bc>)
 80060bc:	4013      	ands	r3, r2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 8116 	beq.w	80062f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d011      	beq.n	80060f4 <HAL_UART_IRQHandler+0xc8>
 80060d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00b      	beq.n	80060f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2201      	movs	r2, #1
 80060e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d011      	beq.n	8006124 <HAL_UART_IRQHandler+0xf8>
 8006100:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2202      	movs	r2, #2
 8006112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f043 0204 	orr.w	r2, r3, #4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d011      	beq.n	8006154 <HAL_UART_IRQHandler+0x128>
 8006130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2204      	movs	r2, #4
 8006142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	f043 0202 	orr.w	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d017      	beq.n	8006190 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d105      	bne.n	8006178 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800616c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006170:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <HAL_UART_IRQHandler+0x2b8>)
 8006172:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2208      	movs	r2, #8
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006198:	2b00      	cmp	r3, #0
 800619a:	d012      	beq.n	80061c2 <HAL_UART_IRQHandler+0x196>
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00c      	beq.n	80061c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f043 0220 	orr.w	r2, r3, #32
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8249 	beq.w	8006660 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d013      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d007      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d005      	beq.n	8006226 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800621a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006222:	2b00      	cmp	r3, #0
 8006224:	d054      	beq.n	80062d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 ffec 	bl	8007204 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d146      	bne.n	80062c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3308      	adds	r3, #8
 8006240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800626a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800627e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1d9      	bne.n	800623a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628c:	2b00      	cmp	r3, #0
 800628e:	d017      	beq.n	80062c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <HAL_UART_IRQHandler+0x2c0>)
 8006298:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fc ffbf 	bl	8003224 <HAL_DMA_Abort_IT>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d019      	beq.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80062ba:	4610      	mov	r0, r2
 80062bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062be:	e00f      	b.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9e1 	bl	8006688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c6:	e00b      	b.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f9dd 	bl	8006688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ce:	e007      	b.n	80062e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f9d9 	bl	8006688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80062de:	e1bf      	b.n	8006660 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	bf00      	nop
    return;
 80062e2:	e1bd      	b.n	8006660 <HAL_UART_IRQHandler+0x634>
 80062e4:	10000001 	.word	0x10000001
 80062e8:	04000120 	.word	0x04000120
 80062ec:	080072d1 	.word	0x080072d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	f040 8153 	bne.w	80065a0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 814c 	beq.w	80065a0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8145 	beq.w	80065a0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2210      	movs	r2, #16
 800631c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	f040 80bb 	bne.w	80064a4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800633c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 818f 	beq.w	8006664 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800634c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006350:	429a      	cmp	r2, r3
 8006352:	f080 8187 	bcs.w	8006664 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800635c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8087 	bne.w	8006482 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006380:	e853 3f00 	ldrex	r3, [r3]
 8006384:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800638c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006390:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800639e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063ae:	e841 2300 	strex	r3, r2, [r1]
 80063b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1da      	bne.n	8006374 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063d0:	f023 0301 	bic.w	r3, r3, #1
 80063d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3308      	adds	r3, #8
 80063de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ee:	e841 2300 	strex	r3, r2, [r1]
 80063f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1e1      	bne.n	80063be <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	3308      	adds	r3, #8
 8006400:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800640a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006410:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	3308      	adds	r3, #8
 800641a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800641e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006420:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006424:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800642c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e3      	bne.n	80063fa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	461a      	mov	r2, r3
 800645e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006462:	65bb      	str	r3, [r7, #88]	; 0x58
 8006464:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1e4      	bne.n	8006440 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800647c:	4618      	mov	r0, r3
 800647e:	f7fc fe78 	bl	8003172 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006494:	b29b      	uxth	r3, r3
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	b29b      	uxth	r3, r3
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f8fd 	bl	800669c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064a2:	e0df      	b.n	8006664 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 80d1 	beq.w	8006668 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80064c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 80cc 	beq.w	8006668 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	e853 3f00 	ldrex	r3, [r3]
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064f2:	647b      	str	r3, [r7, #68]	; 0x44
 80064f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e4      	bne.n	80064d0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	623b      	str	r3, [r7, #32]
   return(result);
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800652e:	633a      	str	r2, [r7, #48]	; 0x30
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e1      	bne.n	8006506 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	60fb      	str	r3, [r7, #12]
   return(result);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0310 	bic.w	r3, r3, #16
 800656a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	461a      	mov	r2, r3
 8006574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006578:	61fb      	str	r3, [r7, #28]
 800657a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	617b      	str	r3, [r7, #20]
   return(result);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e4      	bne.n	8006556 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f87f 	bl	800669c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800659e:	e063      	b.n	8006668 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <HAL_UART_IRQHandler+0x59e>
 80065ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 fbe2 	bl	8007d8c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065c8:	e051      	b.n	800666e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d014      	beq.n	8006600 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80065e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03a      	beq.n	800666c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
    }
    return;
 80065fe:	e035      	b.n	800666c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <HAL_UART_IRQHandler+0x5f4>
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d003      	beq.n	8006620 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fe6f 	bl	80072fc <UART_EndTransmit_IT>
    return;
 800661e:	e026      	b.n	800666e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <HAL_UART_IRQHandler+0x614>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fbbb 	bl	8007db4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800663e:	e016      	b.n	800666e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d010      	beq.n	800666e <HAL_UART_IRQHandler+0x642>
 800664c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006650:	2b00      	cmp	r3, #0
 8006652:	da0c      	bge.n	800666e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 fba3 	bl	8007da0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800665a:	e008      	b.n	800666e <HAL_UART_IRQHandler+0x642>
      return;
 800665c:	bf00      	nop
 800665e:	e006      	b.n	800666e <HAL_UART_IRQHandler+0x642>
    return;
 8006660:	bf00      	nop
 8006662:	e004      	b.n	800666e <HAL_UART_IRQHandler+0x642>
      return;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <HAL_UART_IRQHandler+0x642>
      return;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <HAL_UART_IRQHandler+0x642>
    return;
 800666c:	bf00      	nop
  }
}
 800666e:	37e8      	adds	r7, #232	; 0xe8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b8:	b08c      	sub	sp, #48	; 0x30
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	4313      	orrs	r3, r2
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4bab      	ldr	r3, [pc, #684]	; (8006990 <UART_SetConfig+0x2dc>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	6812      	ldr	r2, [r2, #0]
 80066ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4aa0      	ldr	r2, [pc, #640]	; (8006994 <UART_SetConfig+0x2e0>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671c:	4313      	orrs	r3, r2
 800671e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800672a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006734:	430b      	orrs	r3, r1
 8006736:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673e:	f023 010f 	bic.w	r1, r3, #15
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a91      	ldr	r2, [pc, #580]	; (8006998 <UART_SetConfig+0x2e4>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d125      	bne.n	80067a4 <UART_SetConfig+0xf0>
 8006758:	4b90      	ldr	r3, [pc, #576]	; (800699c <UART_SetConfig+0x2e8>)
 800675a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d81a      	bhi.n	800679c <UART_SetConfig+0xe8>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0xb8>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	0800677d 	.word	0x0800677d
 8006770:	0800678d 	.word	0x0800678d
 8006774:	08006785 	.word	0x08006785
 8006778:	08006795 	.word	0x08006795
 800677c:	2301      	movs	r3, #1
 800677e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006782:	e0d6      	b.n	8006932 <UART_SetConfig+0x27e>
 8006784:	2302      	movs	r3, #2
 8006786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800678a:	e0d2      	b.n	8006932 <UART_SetConfig+0x27e>
 800678c:	2304      	movs	r3, #4
 800678e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006792:	e0ce      	b.n	8006932 <UART_SetConfig+0x27e>
 8006794:	2308      	movs	r3, #8
 8006796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800679a:	e0ca      	b.n	8006932 <UART_SetConfig+0x27e>
 800679c:	2310      	movs	r3, #16
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a2:	e0c6      	b.n	8006932 <UART_SetConfig+0x27e>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a7d      	ldr	r2, [pc, #500]	; (80069a0 <UART_SetConfig+0x2ec>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d138      	bne.n	8006820 <UART_SetConfig+0x16c>
 80067ae:	4b7b      	ldr	r3, [pc, #492]	; (800699c <UART_SetConfig+0x2e8>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	f003 030c 	and.w	r3, r3, #12
 80067b8:	2b0c      	cmp	r3, #12
 80067ba:	d82d      	bhi.n	8006818 <UART_SetConfig+0x164>
 80067bc:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <UART_SetConfig+0x110>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067f9 	.word	0x080067f9
 80067c8:	08006819 	.word	0x08006819
 80067cc:	08006819 	.word	0x08006819
 80067d0:	08006819 	.word	0x08006819
 80067d4:	08006809 	.word	0x08006809
 80067d8:	08006819 	.word	0x08006819
 80067dc:	08006819 	.word	0x08006819
 80067e0:	08006819 	.word	0x08006819
 80067e4:	08006801 	.word	0x08006801
 80067e8:	08006819 	.word	0x08006819
 80067ec:	08006819 	.word	0x08006819
 80067f0:	08006819 	.word	0x08006819
 80067f4:	08006811 	.word	0x08006811
 80067f8:	2300      	movs	r3, #0
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067fe:	e098      	b.n	8006932 <UART_SetConfig+0x27e>
 8006800:	2302      	movs	r3, #2
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006806:	e094      	b.n	8006932 <UART_SetConfig+0x27e>
 8006808:	2304      	movs	r3, #4
 800680a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800680e:	e090      	b.n	8006932 <UART_SetConfig+0x27e>
 8006810:	2308      	movs	r3, #8
 8006812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006816:	e08c      	b.n	8006932 <UART_SetConfig+0x27e>
 8006818:	2310      	movs	r3, #16
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800681e:	e088      	b.n	8006932 <UART_SetConfig+0x27e>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a5f      	ldr	r2, [pc, #380]	; (80069a4 <UART_SetConfig+0x2f0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d125      	bne.n	8006876 <UART_SetConfig+0x1c2>
 800682a:	4b5c      	ldr	r3, [pc, #368]	; (800699c <UART_SetConfig+0x2e8>)
 800682c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006830:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006834:	2b30      	cmp	r3, #48	; 0x30
 8006836:	d016      	beq.n	8006866 <UART_SetConfig+0x1b2>
 8006838:	2b30      	cmp	r3, #48	; 0x30
 800683a:	d818      	bhi.n	800686e <UART_SetConfig+0x1ba>
 800683c:	2b20      	cmp	r3, #32
 800683e:	d00a      	beq.n	8006856 <UART_SetConfig+0x1a2>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d814      	bhi.n	800686e <UART_SetConfig+0x1ba>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <UART_SetConfig+0x19a>
 8006848:	2b10      	cmp	r3, #16
 800684a:	d008      	beq.n	800685e <UART_SetConfig+0x1aa>
 800684c:	e00f      	b.n	800686e <UART_SetConfig+0x1ba>
 800684e:	2300      	movs	r3, #0
 8006850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006854:	e06d      	b.n	8006932 <UART_SetConfig+0x27e>
 8006856:	2302      	movs	r3, #2
 8006858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800685c:	e069      	b.n	8006932 <UART_SetConfig+0x27e>
 800685e:	2304      	movs	r3, #4
 8006860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006864:	e065      	b.n	8006932 <UART_SetConfig+0x27e>
 8006866:	2308      	movs	r3, #8
 8006868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686c:	e061      	b.n	8006932 <UART_SetConfig+0x27e>
 800686e:	2310      	movs	r3, #16
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006874:	e05d      	b.n	8006932 <UART_SetConfig+0x27e>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a4b      	ldr	r2, [pc, #300]	; (80069a8 <UART_SetConfig+0x2f4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d125      	bne.n	80068cc <UART_SetConfig+0x218>
 8006880:	4b46      	ldr	r3, [pc, #280]	; (800699c <UART_SetConfig+0x2e8>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800688a:	2bc0      	cmp	r3, #192	; 0xc0
 800688c:	d016      	beq.n	80068bc <UART_SetConfig+0x208>
 800688e:	2bc0      	cmp	r3, #192	; 0xc0
 8006890:	d818      	bhi.n	80068c4 <UART_SetConfig+0x210>
 8006892:	2b80      	cmp	r3, #128	; 0x80
 8006894:	d00a      	beq.n	80068ac <UART_SetConfig+0x1f8>
 8006896:	2b80      	cmp	r3, #128	; 0x80
 8006898:	d814      	bhi.n	80068c4 <UART_SetConfig+0x210>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <UART_SetConfig+0x1f0>
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d008      	beq.n	80068b4 <UART_SetConfig+0x200>
 80068a2:	e00f      	b.n	80068c4 <UART_SetConfig+0x210>
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068aa:	e042      	b.n	8006932 <UART_SetConfig+0x27e>
 80068ac:	2302      	movs	r3, #2
 80068ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068b2:	e03e      	b.n	8006932 <UART_SetConfig+0x27e>
 80068b4:	2304      	movs	r3, #4
 80068b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ba:	e03a      	b.n	8006932 <UART_SetConfig+0x27e>
 80068bc:	2308      	movs	r3, #8
 80068be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068c2:	e036      	b.n	8006932 <UART_SetConfig+0x27e>
 80068c4:	2310      	movs	r3, #16
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ca:	e032      	b.n	8006932 <UART_SetConfig+0x27e>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a30      	ldr	r2, [pc, #192]	; (8006994 <UART_SetConfig+0x2e0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d12a      	bne.n	800692c <UART_SetConfig+0x278>
 80068d6:	4b31      	ldr	r3, [pc, #196]	; (800699c <UART_SetConfig+0x2e8>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e4:	d01a      	beq.n	800691c <UART_SetConfig+0x268>
 80068e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ea:	d81b      	bhi.n	8006924 <UART_SetConfig+0x270>
 80068ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f0:	d00c      	beq.n	800690c <UART_SetConfig+0x258>
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f6:	d815      	bhi.n	8006924 <UART_SetConfig+0x270>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <UART_SetConfig+0x250>
 80068fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006900:	d008      	beq.n	8006914 <UART_SetConfig+0x260>
 8006902:	e00f      	b.n	8006924 <UART_SetConfig+0x270>
 8006904:	2300      	movs	r3, #0
 8006906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690a:	e012      	b.n	8006932 <UART_SetConfig+0x27e>
 800690c:	2302      	movs	r3, #2
 800690e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006912:	e00e      	b.n	8006932 <UART_SetConfig+0x27e>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800691a:	e00a      	b.n	8006932 <UART_SetConfig+0x27e>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006922:	e006      	b.n	8006932 <UART_SetConfig+0x27e>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800692a:	e002      	b.n	8006932 <UART_SetConfig+0x27e>
 800692c:	2310      	movs	r3, #16
 800692e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a17      	ldr	r2, [pc, #92]	; (8006994 <UART_SetConfig+0x2e0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	f040 80a8 	bne.w	8006a8e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800693e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006942:	2b08      	cmp	r3, #8
 8006944:	d834      	bhi.n	80069b0 <UART_SetConfig+0x2fc>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x298>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006971 	.word	0x08006971
 8006950:	080069b1 	.word	0x080069b1
 8006954:	08006979 	.word	0x08006979
 8006958:	080069b1 	.word	0x080069b1
 800695c:	0800697f 	.word	0x0800697f
 8006960:	080069b1 	.word	0x080069b1
 8006964:	080069b1 	.word	0x080069b1
 8006968:	080069b1 	.word	0x080069b1
 800696c:	08006987 	.word	0x08006987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006970:	f7fe fa9c 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006976:	e021      	b.n	80069bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <UART_SetConfig+0x2f8>)
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800697c:	e01e      	b.n	80069bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800697e:	f7fe fa27 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006984:	e01a      	b.n	80069bc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800698c:	e016      	b.n	80069bc <UART_SetConfig+0x308>
 800698e:	bf00      	nop
 8006990:	cfff69f3 	.word	0xcfff69f3
 8006994:	40008000 	.word	0x40008000
 8006998:	40013800 	.word	0x40013800
 800699c:	40021000 	.word	0x40021000
 80069a0:	40004400 	.word	0x40004400
 80069a4:	40004800 	.word	0x40004800
 80069a8:	40004c00 	.word	0x40004c00
 80069ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 812a 	beq.w	8006c18 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	4a9e      	ldr	r2, [pc, #632]	; (8006c44 <UART_SetConfig+0x590>)
 80069ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80069d6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	4613      	mov	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d305      	bcc.n	80069f4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d903      	bls.n	80069fc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069fa:	e10d      	b.n	8006c18 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	2200      	movs	r2, #0
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	60fa      	str	r2, [r7, #12]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	4a8e      	ldr	r2, [pc, #568]	; (8006c44 <UART_SetConfig+0x590>)
 8006a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2200      	movs	r2, #0
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a1e:	f7f9 fc57 	bl	80002d0 <__aeabi_uldivmod>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4610      	mov	r0, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	f04f 0300 	mov.w	r3, #0
 8006a32:	020b      	lsls	r3, r1, #8
 8006a34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a38:	0202      	lsls	r2, r0, #8
 8006a3a:	6979      	ldr	r1, [r7, #20]
 8006a3c:	6849      	ldr	r1, [r1, #4]
 8006a3e:	0849      	lsrs	r1, r1, #1
 8006a40:	2000      	movs	r0, #0
 8006a42:	460c      	mov	r4, r1
 8006a44:	4605      	mov	r5, r0
 8006a46:	eb12 0804 	adds.w	r8, r2, r4
 8006a4a:	eb43 0905 	adc.w	r9, r3, r5
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	469a      	mov	sl, r3
 8006a56:	4693      	mov	fp, r2
 8006a58:	4652      	mov	r2, sl
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	4640      	mov	r0, r8
 8006a5e:	4649      	mov	r1, r9
 8006a60:	f7f9 fc36 	bl	80002d0 <__aeabi_uldivmod>
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4613      	mov	r3, r2
 8006a6a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a72:	d308      	bcc.n	8006a86 <UART_SetConfig+0x3d2>
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a7a:	d204      	bcs.n	8006a86 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a3a      	ldr	r2, [r7, #32]
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	e0c8      	b.n	8006c18 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a8c:	e0c4      	b.n	8006c18 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a96:	d167      	bne.n	8006b68 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006a98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d828      	bhi.n	8006af2 <UART_SetConfig+0x43e>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x3f4>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006ad5 	.word	0x08006ad5
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	08006af3 	.word	0x08006af3
 8006ab8:	08006ae3 	.word	0x08006ae3
 8006abc:	08006af3 	.word	0x08006af3
 8006ac0:	08006af3 	.word	0x08006af3
 8006ac4:	08006af3 	.word	0x08006af3
 8006ac8:	08006aeb 	.word	0x08006aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006acc:	f7fe f9ee 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006ad0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ad2:	e014      	b.n	8006afe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad4:	f7fe fa00 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ada:	e010      	b.n	8006afe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006adc:	4b5a      	ldr	r3, [pc, #360]	; (8006c48 <UART_SetConfig+0x594>)
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ae0:	e00d      	b.n	8006afe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae2:	f7fe f975 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae8:	e009      	b.n	8006afe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006af0:	e005      	b.n	8006afe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006afc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8089 	beq.w	8006c18 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	4a4e      	ldr	r2, [pc, #312]	; (8006c44 <UART_SetConfig+0x590>)
 8006b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b10:	461a      	mov	r2, r3
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b18:	005a      	lsls	r2, r3, #1
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	441a      	add	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	d916      	bls.n	8006b60 <UART_SetConfig+0x4ac>
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b38:	d212      	bcs.n	8006b60 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f023 030f 	bic.w	r3, r3, #15
 8006b42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	085b      	lsrs	r3, r3, #1
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	f003 0307 	and.w	r3, r3, #7
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	8bfb      	ldrh	r3, [r7, #30]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	8bfa      	ldrh	r2, [r7, #30]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	e05b      	b.n	8006c18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b66:	e057      	b.n	8006c18 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d828      	bhi.n	8006bc2 <UART_SetConfig+0x50e>
 8006b70:	a201      	add	r2, pc, #4	; (adr r2, 8006b78 <UART_SetConfig+0x4c4>)
 8006b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b76:	bf00      	nop
 8006b78:	08006b9d 	.word	0x08006b9d
 8006b7c:	08006ba5 	.word	0x08006ba5
 8006b80:	08006bad 	.word	0x08006bad
 8006b84:	08006bc3 	.word	0x08006bc3
 8006b88:	08006bb3 	.word	0x08006bb3
 8006b8c:	08006bc3 	.word	0x08006bc3
 8006b90:	08006bc3 	.word	0x08006bc3
 8006b94:	08006bc3 	.word	0x08006bc3
 8006b98:	08006bbb 	.word	0x08006bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b9c:	f7fe f986 	bl	8004eac <HAL_RCC_GetPCLK1Freq>
 8006ba0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ba2:	e014      	b.n	8006bce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ba4:	f7fe f998 	bl	8004ed8 <HAL_RCC_GetPCLK2Freq>
 8006ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006baa:	e010      	b.n	8006bce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bac:	4b26      	ldr	r3, [pc, #152]	; (8006c48 <UART_SetConfig+0x594>)
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bb0:	e00d      	b.n	8006bce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bb2:	f7fe f90d 	bl	8004dd0 <HAL_RCC_GetSysClockFreq>
 8006bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006bb8:	e009      	b.n	8006bce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006bc0:	e005      	b.n	8006bce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d021      	beq.n	8006c18 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <UART_SetConfig+0x590>)
 8006bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	441a      	add	r2, r3
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d909      	bls.n	8006c12 <UART_SetConfig+0x55e>
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c04:	d205      	bcs.n	8006c12 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60da      	str	r2, [r3, #12]
 8006c10:	e002      	b.n	8006c18 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2200      	movs	r2, #0
 8006c32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006c34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3730      	adds	r7, #48	; 0x30
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c42:	bf00      	nop
 8006c44:	08009064 	.word	0x08009064
 8006c48:	00f42400 	.word	0x00f42400

08006c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0310 	and.w	r3, r3, #16
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01a      	beq.n	8006d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4a:	d10a      	bne.n	8006d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]
  }
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b098      	sub	sp, #96	; 0x60
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006da0:	f7fa fd48 	bl	8001834 <HAL_GetTick>
 8006da4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d12f      	bne.n	8006e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f88e 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d022      	beq.n	8006e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de2:	653b      	str	r3, [r7, #80]	; 0x50
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dec:	647b      	str	r3, [r7, #68]	; 0x44
 8006dee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e063      	b.n	8006edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0304 	and.w	r3, r3, #4
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d149      	bne.n	8006eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f857 	bl	8006ee4 <UART_WaitOnFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d03c      	beq.n	8006eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	623b      	str	r3, [r7, #32]
   return(result);
 8006e4a:	6a3b      	ldr	r3, [r7, #32]
 8006e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e6      	bne.n	8006e3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e8e:	61fa      	str	r2, [r7, #28]
 8006e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	69b9      	ldr	r1, [r7, #24]
 8006e94:	69fa      	ldr	r2, [r7, #28]
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e012      	b.n	8006edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3758      	adds	r7, #88	; 0x58
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef4:	e04f      	b.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efc:	d04b      	beq.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006efe:	f7fa fc99 	bl	8001834 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e04e      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d037      	beq.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b80      	cmp	r3, #128	; 0x80
 8006f2a:	d034      	beq.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d031      	beq.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d110      	bne.n	8006f62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2208      	movs	r2, #8
 8006f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 f95b 	bl	8007204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2208      	movs	r2, #8
 8006f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e029      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f70:	d111      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f941 	bl	8007204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e00f      	b.n	8006fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	bf0c      	ite	eq
 8006fa6:	2301      	moveq	r3, #1
 8006fa8:	2300      	movne	r3, #0
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	461a      	mov	r2, r3
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d0a0      	beq.n	8006ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b0a3      	sub	sp, #140	; 0x8c
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	88fa      	ldrh	r2, [r7, #6]
 8006fd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	88fa      	ldrh	r2, [r7, #6]
 8006fe0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff2:	d10e      	bne.n	8007012 <UART_Start_Receive_IT+0x52>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d105      	bne.n	8007008 <UART_Start_Receive_IT+0x48>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007006:	e02d      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	22ff      	movs	r2, #255	; 0xff
 800700c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007010:	e028      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10d      	bne.n	8007036 <UART_Start_Receive_IT+0x76>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d104      	bne.n	800702c <UART_Start_Receive_IT+0x6c>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800702a:	e01b      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	227f      	movs	r2, #127	; 0x7f
 8007030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007034:	e016      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800703e:	d10d      	bne.n	800705c <UART_Start_Receive_IT+0x9c>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <UART_Start_Receive_IT+0x92>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	227f      	movs	r2, #127	; 0x7f
 800704c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007050:	e008      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	223f      	movs	r2, #63	; 0x3f
 8007056:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800705a:	e003      	b.n	8007064 <UART_Start_Receive_IT+0xa4>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2222      	movs	r2, #34	; 0x22
 8007070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007098:	673a      	str	r2, [r7, #112]	; 0x70
 800709a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800709e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80070a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e3      	bne.n	8007074 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070b4:	d14f      	bne.n	8007156 <UART_Start_Receive_IT+0x196>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070bc:	88fa      	ldrh	r2, [r7, #6]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d349      	bcc.n	8007156 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ca:	d107      	bne.n	80070dc <UART_Start_Receive_IT+0x11c>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4a47      	ldr	r2, [pc, #284]	; (80071f4 <UART_Start_Receive_IT+0x234>)
 80070d8:	675a      	str	r2, [r3, #116]	; 0x74
 80070da:	e002      	b.n	80070e2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a46      	ldr	r2, [pc, #280]	; (80071f8 <UART_Start_Receive_IT+0x238>)
 80070e0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01a      	beq.n	8007120 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800710c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800710e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007112:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800711a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e4      	bne.n	80070ea <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007136:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007140:	64ba      	str	r2, [r7, #72]	; 0x48
 8007142:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800714e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_Start_Receive_IT+0x160>
 8007154:	e046      	b.n	80071e4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	d107      	bne.n	8007170 <UART_Start_Receive_IT+0x1b0>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a24      	ldr	r2, [pc, #144]	; (80071fc <UART_Start_Receive_IT+0x23c>)
 800716c:	675a      	str	r2, [r3, #116]	; 0x74
 800716e:	e002      	b.n	8007176 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4a23      	ldr	r2, [pc, #140]	; (8007200 <UART_Start_Receive_IT+0x240>)
 8007174:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d019      	beq.n	80071b2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007192:	677b      	str	r3, [r7, #116]	; 0x74
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_Start_Receive_IT+0x1be>
 80071b0:	e018      	b.n	80071e4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	613b      	str	r3, [r7, #16]
   return(result);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f043 0320 	orr.w	r3, r3, #32
 80071c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071d0:	623b      	str	r3, [r7, #32]
 80071d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	69f9      	ldr	r1, [r7, #28]
 80071d6:	6a3a      	ldr	r2, [r7, #32]
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e6      	bne.n	80071b2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	378c      	adds	r7, #140	; 0x8c
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	08007a25 	.word	0x08007a25
 80071f8:	080076c5 	.word	0x080076c5
 80071fc:	0800750d 	.word	0x0800750d
 8007200:	08007355 	.word	0x08007355

08007204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007204:	b480      	push	{r7}
 8007206:	b095      	sub	sp, #84	; 0x54
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007220:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722a:	643b      	str	r3, [r7, #64]	; 0x40
 800722c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007230:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007232:	e841 2300 	strex	r3, r2, [r1]
 8007236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e6      	bne.n	800720c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3308      	adds	r3, #8
 8007244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	61fb      	str	r3, [r7, #28]
   return(result);
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007254:	f023 0301 	bic.w	r3, r3, #1
 8007258:	64bb      	str	r3, [r7, #72]	; 0x48
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007262:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007264:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e3      	bne.n	800723e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d118      	bne.n	80072b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	60bb      	str	r3, [r7, #8]
   return(result);
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	f023 0310 	bic.w	r3, r3, #16
 8007292:	647b      	str	r3, [r7, #68]	; 0x44
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6979      	ldr	r1, [r7, #20]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	613b      	str	r3, [r7, #16]
   return(result);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80072c4:	bf00      	nop
 80072c6:	3754      	adds	r7, #84	; 0x54
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff f9ca 	bl	8006688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	60bb      	str	r3, [r7, #8]
   return(result);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	613b      	str	r3, [r7, #16]
   return(result);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff f995 	bl	8006674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734a:	bf00      	nop
 800734c:	3720      	adds	r7, #32
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b09c      	sub	sp, #112	; 0x70
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007362:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736c:	2b22      	cmp	r3, #34	; 0x22
 800736e:	f040 80be 	bne.w	80074ee <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800737c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007380:	b2d9      	uxtb	r1, r3
 8007382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007386:	b2da      	uxtb	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	400a      	ands	r2, r1
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f040 80a1 	bne.w	80074fe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073da:	65bb      	str	r3, [r7, #88]	; 0x58
 80073dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e6      	bne.n	80073bc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	667b      	str	r3, [r7, #100]	; 0x64
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800740e:	647a      	str	r2, [r7, #68]	; 0x44
 8007410:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e5      	bne.n	80073ee <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a33      	ldr	r2, [pc, #204]	; (8007508 <UART_RxISR_8BIT+0x1b4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d01f      	beq.n	8007480 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d018      	beq.n	8007480 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	623b      	str	r3, [r7, #32]
   return(result);
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007462:	663b      	str	r3, [r7, #96]	; 0x60
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800746c:	633b      	str	r3, [r7, #48]	; 0x30
 800746e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e6      	bne.n	800744e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007484:	2b01      	cmp	r3, #1
 8007486:	d12e      	bne.n	80074e6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	e853 3f00 	ldrex	r3, [r3]
 800749a:	60fb      	str	r3, [r7, #12]
   return(result);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0310 	bic.w	r3, r3, #16
 80074a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074ac:	61fb      	str	r3, [r7, #28]
 80074ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b0:	69b9      	ldr	r1, [r7, #24]
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	e841 2300 	strex	r3, r2, [r1]
 80074b8:	617b      	str	r3, [r7, #20]
   return(result);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1e6      	bne.n	800748e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	f003 0310 	and.w	r3, r3, #16
 80074ca:	2b10      	cmp	r3, #16
 80074cc:	d103      	bne.n	80074d6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2210      	movs	r2, #16
 80074d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff f8dc 	bl	800669c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074e4:	e00b      	b.n	80074fe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7f9 f880 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 80074ec:	e007      	b.n	80074fe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0208 	orr.w	r2, r2, #8
 80074fc:	619a      	str	r2, [r3, #24]
}
 80074fe:	bf00      	nop
 8007500:	3770      	adds	r7, #112	; 0x70
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	40008000 	.word	0x40008000

0800750c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b09c      	sub	sp, #112	; 0x70
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800751a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007524:	2b22      	cmp	r3, #34	; 0x22
 8007526:	f040 80be 	bne.w	80076a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007538:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800753a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800753e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007542:	4013      	ands	r3, r2
 8007544:	b29a      	uxth	r2, r3
 8007546:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007548:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754e:	1c9a      	adds	r2, r3, #2
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800755a:	b29b      	uxth	r3, r3
 800755c:	3b01      	subs	r3, #1
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	f040 80a1 	bne.w	80076b6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007588:	667b      	str	r3, [r7, #100]	; 0x64
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007592:	657b      	str	r3, [r7, #84]	; 0x54
 8007594:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	663b      	str	r3, [r7, #96]	; 0x60
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80075c6:	643a      	str	r2, [r7, #64]	; 0x40
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a33      	ldr	r2, [pc, #204]	; (80076c0 <UART_RxISR_16BIT+0x1b4>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d01f      	beq.n	8007638 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d018      	beq.n	8007638 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	61fb      	str	r3, [r7, #28]
   return(result);
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800761a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007626:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800762a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800763c:	2b01      	cmp	r3, #1
 800763e:	d12e      	bne.n	800769e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	60bb      	str	r3, [r7, #8]
   return(result);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	f023 0310 	bic.w	r3, r3, #16
 800765a:	65bb      	str	r3, [r7, #88]	; 0x58
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6979      	ldr	r1, [r7, #20]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	613b      	str	r3, [r7, #16]
   return(result);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e6      	bne.n	8007646 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	f003 0310 	and.w	r3, r3, #16
 8007682:	2b10      	cmp	r3, #16
 8007684:	d103      	bne.n	800768e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2210      	movs	r2, #16
 800768c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff f800 	bl	800669c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800769c:	e00b      	b.n	80076b6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7f8 ffa4 	bl	80005ec <HAL_UART_RxCpltCallback>
}
 80076a4:	e007      	b.n	80076b6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699a      	ldr	r2, [r3, #24]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0208 	orr.w	r2, r2, #8
 80076b4:	619a      	str	r2, [r3, #24]
}
 80076b6:	bf00      	nop
 80076b8:	3770      	adds	r7, #112	; 0x70
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40008000 	.word	0x40008000

080076c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b0ac      	sub	sp, #176	; 0xb0
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076d2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076fa:	2b22      	cmp	r3, #34	; 0x22
 80076fc:	f040 8182 	bne.w	8007a04 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007706:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800770a:	e125      	b.n	8007958 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007716:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800771a:	b2d9      	uxtb	r1, r3
 800771c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007720:	b2da      	uxtb	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007726:	400a      	ands	r2, r1
 8007728:	b2d2      	uxtb	r2, r2
 800772a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b00      	cmp	r3, #0
 800775c:	d053      	beq.n	8007806 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800775e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d011      	beq.n	800778e <UART_RxISR_8BIT_FIFOEN+0xca>
 800776a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800776e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2201      	movs	r2, #1
 800777c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007784:	f043 0201 	orr.w	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800778e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d011      	beq.n	80077be <UART_RxISR_8BIT_FIFOEN+0xfa>
 800779a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2202      	movs	r2, #2
 80077ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b4:	f043 0204 	orr.w	r2, r3, #4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d011      	beq.n	80077ee <UART_RxISR_8BIT_FIFOEN+0x12a>
 80077ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2204      	movs	r2, #4
 80077dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e4:	f043 0202 	orr.w	r2, r3, #2
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d006      	beq.n	8007806 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7fe ff45 	bl	8006688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 80a2 	bne.w	8007958 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007836:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007838:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800783c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e4      	bne.n	8007814 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800785a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800785c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007872:	66ba      	str	r2, [r7, #104]	; 0x68
 8007874:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007876:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007878:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800787a:	e841 2300 	strex	r3, r2, [r1]
 800787e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007880:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1e1      	bne.n	800784a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2220      	movs	r2, #32
 800788a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a5f      	ldr	r2, [pc, #380]	; (8007a1c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d021      	beq.n	80078e8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01a      	beq.n	80078e8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ba:	e853 3f00 	ldrex	r3, [r3]
 80078be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80078c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	461a      	mov	r2, r3
 80078d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078d4:	657b      	str	r3, [r7, #84]	; 0x54
 80078d6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80078da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078dc:	e841 2300 	strex	r3, r2, [r1]
 80078e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1e4      	bne.n	80078b2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d130      	bne.n	8007952 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fe:	e853 3f00 	ldrex	r3, [r3]
 8007902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	f023 0310 	bic.w	r3, r3, #16
 800790a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007918:	643b      	str	r3, [r7, #64]	; 0x40
 800791a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800791e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e4      	bne.n	80078f6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b10      	cmp	r3, #16
 8007938:	d103      	bne.n	8007942 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2210      	movs	r2, #16
 8007940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe fea6 	bl	800669c <HAL_UARTEx_RxEventCallback>
 8007950:	e002      	b.n	8007958 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7f8 fe4a 	bl	80005ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007958:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800795c:	2b00      	cmp	r3, #0
 800795e:	d006      	beq.n	800796e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	f47f aecf 	bne.w	800770c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007974:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007978:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800797c:	2b00      	cmp	r3, #0
 800797e:	d049      	beq.n	8007a14 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007986:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800798a:	429a      	cmp	r2, r3
 800798c:	d242      	bcs.n	8007a14 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	61fb      	str	r3, [r7, #28]
   return(result);
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80079b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e3      	bne.n	800798e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4a15      	ldr	r2, [pc, #84]	; (8007a20 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80079ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f043 0320 	orr.w	r3, r3, #32
 80079e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079ee:	61bb      	str	r3, [r7, #24]
 80079f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6979      	ldr	r1, [r7, #20]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	613b      	str	r3, [r7, #16]
   return(result);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e4      	bne.n	80079cc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a02:	e007      	b.n	8007a14 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0208 	orr.w	r2, r2, #8
 8007a12:	619a      	str	r2, [r3, #24]
}
 8007a14:	bf00      	nop
 8007a16:	37b0      	adds	r7, #176	; 0xb0
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40008000 	.word	0x40008000
 8007a20:	08007355 	.word	0x08007355

08007a24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b0ae      	sub	sp, #184	; 0xb8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a32:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5a:	2b22      	cmp	r3, #34	; 0x22
 8007a5c:	f040 8186 	bne.w	8007d6c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a66:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a6a:	e129      	b.n	8007cc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007a7e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007a82:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007a86:	4013      	ands	r3, r2
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a94:	1c9a      	adds	r2, r3, #2
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ab6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d053      	beq.n	8007b6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d011      	beq.n	8007af2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007ace:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00b      	beq.n	8007af2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae8:	f043 0201 	orr.w	r2, r3, #1
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007af2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d011      	beq.n	8007b22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007afe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f043 0204 	orr.w	r2, r3, #4
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007b26:	f003 0304 	and.w	r3, r3, #4
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d011      	beq.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2204      	movs	r2, #4
 8007b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b48:	f043 0202 	orr.w	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d006      	beq.n	8007b6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7fe fd93 	bl	8006688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f040 80a4 	bne.w	8007cc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b9e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1e2      	bne.n	8007b78 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007bbc:	e853 3f00 	ldrex	r3, [r3]
 8007bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	f023 0301 	bic.w	r3, r3, #1
 8007bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007bda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bdc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bde:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007be2:	e841 2300 	strex	r3, r2, [r1]
 8007be6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d1e1      	bne.n	8007bb2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a5f      	ldr	r2, [pc, #380]	; (8007d84 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d021      	beq.n	8007c50 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01a      	beq.n	8007c50 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e4      	bne.n	8007c1a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d130      	bne.n	8007cba <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6e:	f023 0310 	bic.w	r3, r3, #16
 8007c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c80:	647b      	str	r3, [r7, #68]	; 0x44
 8007c82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c88:	e841 2300 	strex	r3, r2, [r1]
 8007c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1e4      	bne.n	8007c5e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	f003 0310 	and.w	r3, r3, #16
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	d103      	bne.n	8007caa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2210      	movs	r2, #16
 8007ca8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7fe fcf2 	bl	800669c <HAL_UARTEx_RxEventCallback>
 8007cb8:	e002      	b.n	8007cc0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7f8 fc96 	bl	80005ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cc0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d006      	beq.n	8007cd6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f47f aecb 	bne.w	8007a6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cdc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ce0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d049      	beq.n	8007d7c <UART_RxISR_16BIT_FIFOEN+0x358>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007cee:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d242      	bcs.n	8007d7c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	623b      	str	r3, [r7, #32]
   return(result);
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007d1a:	633a      	str	r2, [r7, #48]	; 0x30
 8007d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e3      	bne.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a15      	ldr	r2, [pc, #84]	; (8007d88 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007d32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f043 0320 	orr.w	r3, r3, #32
 8007d48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	69b9      	ldr	r1, [r7, #24]
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	617b      	str	r3, [r7, #20]
   return(result);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e4      	bne.n	8007d34 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d6a:	e007      	b.n	8007d7c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0208 	orr.w	r2, r2, #8
 8007d7a:	619a      	str	r2, [r3, #24]
}
 8007d7c:	bf00      	nop
 8007d7e:	37b8      	adds	r7, #184	; 0xb8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40008000 	.word	0x40008000
 8007d88:	0800750d 	.word	0x0800750d

08007d8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_UARTEx_DisableFifoMode+0x16>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e027      	b.n	8007e2e <HAL_UARTEx_DisableFifoMode+0x66>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2224      	movs	r2, #36	; 0x24
 8007dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d101      	bne.n	8007e52 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e02d      	b.n	8007eae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2224      	movs	r2, #36	; 0x24
 8007e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	683a      	ldr	r2, [r7, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f850 	bl	8007f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e02d      	b.n	8007f2a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2224      	movs	r2, #36	; 0x24
 8007eda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0201 	bic.w	r2, r2, #1
 8007ef4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f812 	bl	8007f34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d108      	bne.n	8007f56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f54:	e031      	b.n	8007fba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f56:	2308      	movs	r3, #8
 8007f58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f5a:	2308      	movs	r3, #8
 8007f5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	0e5b      	lsrs	r3, r3, #25
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	0f5b      	lsrs	r3, r3, #29
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	7b3a      	ldrb	r2, [r7, #12]
 8007f82:	4911      	ldr	r1, [pc, #68]	; (8007fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007f84:	5c8a      	ldrb	r2, [r1, r2]
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007f8a:	7b3a      	ldrb	r2, [r7, #12]
 8007f8c:	490f      	ldr	r1, [pc, #60]	; (8007fcc <UARTEx_SetNbDataToProcess+0x98>)
 8007f8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	7b7a      	ldrb	r2, [r7, #13]
 8007fa0:	4909      	ldr	r1, [pc, #36]	; (8007fc8 <UARTEx_SetNbDataToProcess+0x94>)
 8007fa2:	5c8a      	ldrb	r2, [r1, r2]
 8007fa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fa8:	7b7a      	ldrb	r2, [r7, #13]
 8007faa:	4908      	ldr	r1, [pc, #32]	; (8007fcc <UARTEx_SetNbDataToProcess+0x98>)
 8007fac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007fba:	bf00      	nop
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	0800907c 	.word	0x0800907c
 8007fcc:	08009084 	.word	0x08009084

08007fd0 <OLED_ClearBuffer>:
static uint8_t oled_buffer[2048];			// Display buffer
static I2C_HandleTypeDef* hi2c;				// Pointer I2C structure

/* private: */
void OLED_ClearBuffer(uint8_t value)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8007fda:	2300      	movs	r3, #0
 8007fdc:	81fb      	strh	r3, [r7, #14]
 8007fde:	e006      	b.n	8007fee <OLED_ClearBuffer+0x1e>
	{
		oled_buffer[i] = value;
 8007fe0:	89fb      	ldrh	r3, [r7, #14]
 8007fe2:	4908      	ldr	r1, [pc, #32]	; (8008004 <OLED_ClearBuffer+0x34>)
 8007fe4:	79fa      	ldrb	r2, [r7, #7]
 8007fe6:	54ca      	strb	r2, [r1, r3]
	for (uint16_t i = 0; i < OLED_BUFFERSIZE; i++)
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	3301      	adds	r3, #1
 8007fec:	81fb      	strh	r3, [r7, #14]
 8007fee:	89fb      	ldrh	r3, [r7, #14]
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff4:	d3f4      	bcc.n	8007fe0 <OLED_ClearBuffer+0x10>
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	20000398 	.word	0x20000398

08008008 <OLED_SendCommand>:

void OLED_SendCommand(uint8_t command)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af02      	add	r7, sp, #8
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x00, command};
 8008012:	2300      	movs	r3, #0
 8008014:	733b      	strb	r3, [r7, #12]
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <OLED_SendCommand+0x30>)
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f107 020c 	add.w	r2, r7, #12
 8008022:	230a      	movs	r3, #10
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	2302      	movs	r3, #2
 8008028:	2178      	movs	r1, #120	; 0x78
 800802a:	f7fb fd19 	bl	8003a60 <HAL_I2C_Master_Transmit>
}
 800802e:	bf00      	nop
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000b98 	.word	0x20000b98

0800803c <OLED_SendData>:

void OLED_SendData(uint8_t data)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af02      	add	r7, sp, #8
 8008042:	4603      	mov	r3, r0
 8008044:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2] = {0x40, data};
 8008046:	2340      	movs	r3, #64	; 0x40
 8008048:	733b      	strb	r3, [r7, #12]
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c, OLED_ADDRESS, dt, 2, 10);
 800804e:	4b07      	ldr	r3, [pc, #28]	; (800806c <OLED_SendData+0x30>)
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	f107 020c 	add.w	r2, r7, #12
 8008056:	230a      	movs	r3, #10
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	2302      	movs	r3, #2
 800805c:	2178      	movs	r1, #120	; 0x78
 800805e:	f7fb fcff 	bl	8003a60 <HAL_I2C_Master_Transmit>
}
 8008062:	bf00      	nop
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000b98 	.word	0x20000b98

08008070 <OLED_Init>:

/* public: */

uint8_t OLED_Init(I2C_HandleTypeDef* i2c_handleTypeDef)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	hi2c = i2c_handleTypeDef;
 8008078:	4a30      	ldr	r2, [pc, #192]	; (800813c <OLED_Init+0xcc>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
	
	if (HAL_I2C_IsDeviceReady(hi2c, OLED_ADDRESS, 10, 100) != HAL_OK)
 800807e:	4b2f      	ldr	r3, [pc, #188]	; (800813c <OLED_Init+0xcc>)
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	2364      	movs	r3, #100	; 0x64
 8008084:	220a      	movs	r2, #10
 8008086:	2178      	movs	r1, #120	; 0x78
 8008088:	f7fb fe02 	bl	8003c90 <HAL_I2C_IsDeviceReady>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <OLED_Init+0x26>
	{
		return 0;
 8008092:	2300      	movs	r3, #0
 8008094:	e04e      	b.n	8008134 <OLED_Init+0xc4>
	}
	
	OLED_SendCommand(OLED_DISPLAY_OFF);
 8008096:	20ae      	movs	r0, #174	; 0xae
 8008098:	f7ff ffb6 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_CLOCK_DIV_RATIO);
 800809c:	20d5      	movs	r0, #213	; 0xd5
 800809e:	f7ff ffb3 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x80);
 80080a2:	2080      	movs	r0, #128	; 0x80
 80080a4:	f7ff ffb0 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_MULTIPLEX_RATIO);
 80080a8:	20a8      	movs	r0, #168	; 0xa8
 80080aa:	f7ff ffad 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x3F);
 80080ae:	203f      	movs	r0, #63	; 0x3f
 80080b0:	f7ff ffaa 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_DISPLAY_OFFSET);
 80080b4:	20d3      	movs	r0, #211	; 0xd3
 80080b6:	f7ff ffa7 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x0);
 80080ba:	2000      	movs	r0, #0
 80080bc:	f7ff ffa4 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_START_LINE | 0x0);
 80080c0:	2040      	movs	r0, #64	; 0x40
 80080c2:	f7ff ffa1 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_CHARGE_PUMP);
 80080c6:	208d      	movs	r0, #141	; 0x8d
 80080c8:	f7ff ff9e 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x14);
 80080cc:	2014      	movs	r0, #20
 80080ce:	f7ff ff9b 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_MEMORY_ADDR_MODE);
 80080d2:	2020      	movs	r0, #32
 80080d4:	f7ff ff98 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x00);
 80080d8:	2000      	movs	r0, #0
 80080da:	f7ff ff95 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_SEGMENT_REMAP | 0x1);
 80080de:	20a1      	movs	r0, #161	; 0xa1
 80080e0:	f7ff ff92 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_COM_SCAN_DIR_DEC);
 80080e4:	20c8      	movs	r0, #200	; 0xc8
 80080e6:	f7ff ff8f 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_COM_PINS);
 80080ea:	20da      	movs	r0, #218	; 0xda
 80080ec:	f7ff ff8c 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x12);
 80080f0:	2012      	movs	r0, #18
 80080f2:	f7ff ff89 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_CONTRAST_CONTROL);
 80080f6:	2081      	movs	r0, #129	; 0x81
 80080f8:	f7ff ff86 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0xFF);
 80080fc:	20ff      	movs	r0, #255	; 0xff
 80080fe:	f7ff ff83 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_PRECHARGE_PERIOD);
 8008102:	20d9      	movs	r0, #217	; 0xd9
 8008104:	f7ff ff80 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0xF1);
 8008108:	20f1      	movs	r0, #241	; 0xf1
 800810a:	f7ff ff7d 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_SET_VCOM_DESELECT);
 800810e:	20db      	movs	r0, #219	; 0xdb
 8008110:	f7ff ff7a 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(0x40);
 8008114:	2040      	movs	r0, #64	; 0x40
 8008116:	f7ff ff77 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ALL_ON_RESUME);
 800811a:	20a4      	movs	r0, #164	; 0xa4
 800811c:	f7ff ff74 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_NORMAL_DISPLAY);
 8008120:	20a6      	movs	r0, #166	; 0xa6
 8008122:	f7ff ff71 	bl	8008008 <OLED_SendCommand>
	OLED_SendCommand(OLED_DISPLAY_ON);
 8008126:	20af      	movs	r0, #175	; 0xaf
 8008128:	f7ff ff6e 	bl	8008008 <OLED_SendCommand>

	OLED_Clear(0);
 800812c:	2000      	movs	r0, #0
 800812e:	f000 f807 	bl	8008140 <OLED_Clear>
	
	return 1;
 8008132:	2301      	movs	r3, #1
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000b98 	.word	0x20000b98

08008140 <OLED_Clear>:

void OLED_Clear(uint8_t mode)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	71fb      	strb	r3, [r7, #7]
	if (mode) OLED_ClearBuffer(0xFF);
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <OLED_Clear+0x18>
 8008150:	20ff      	movs	r0, #255	; 0xff
 8008152:	f7ff ff3d 	bl	8007fd0 <OLED_ClearBuffer>
	else      OLED_ClearBuffer(0x00);
}
 8008156:	e002      	b.n	800815e <OLED_Clear+0x1e>
	else      OLED_ClearBuffer(0x00);
 8008158:	2000      	movs	r0, #0
 800815a:	f7ff ff39 	bl	8007fd0 <OLED_ClearBuffer>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <OLED_DrawXBM>:
		}
	}
}

void OLED_DrawXBM(int16_t xMove, int16_t yMove, const uint8_t *xbm)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	4603      	mov	r3, r0
 800816e:	603a      	str	r2, [r7, #0]
 8008170:	80fb      	strh	r3, [r7, #6]
 8008172:	460b      	mov	r3, r1
 8008174:	80bb      	strh	r3, [r7, #4]
	int16_t width = xbm[0];
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	823b      	strh	r3, [r7, #16]
	int16_t height = xbm[1];
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	3301      	adds	r3, #1
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	81fb      	strh	r3, [r7, #14]

	int16_t widthInXbm = (width + 7) / 8;
 8008184:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008188:	3307      	adds	r3, #7
 800818a:	2b00      	cmp	r3, #0
 800818c:	da00      	bge.n	8008190 <OLED_DrawXBM+0x2a>
 800818e:	3307      	adds	r3, #7
 8008190:	10db      	asrs	r3, r3, #3
 8008192:	81bb      	strh	r3, [r7, #12]
	uint8_t data = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	75fb      	strb	r3, [r7, #23]
	
	for (int16_t y = 0; y < height; y++)
 8008198:	2300      	movs	r3, #0
 800819a:	82bb      	strh	r3, [r7, #20]
 800819c:	e045      	b.n	800822a <OLED_DrawXBM+0xc4>
	{
		for (int16_t x = 0; x < width; x++ )
 800819e:	2300      	movs	r3, #0
 80081a0:	827b      	strh	r3, [r7, #18]
 80081a2:	e036      	b.n	8008212 <OLED_DrawXBM+0xac>
		{
			if (x & 0x7)	data >>= 1;									// Move a bit
 80081a4:	8a7b      	ldrh	r3, [r7, #18]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <OLED_DrawXBM+0x50>
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]
 80081b4:	e013      	b.n	80081de <OLED_DrawXBM+0x78>
			else			data = xbm[(x / 8) + y * widthInXbm + 2]; 	// Read new data every 8 bit
 80081b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da00      	bge.n	80081c0 <OLED_DrawXBM+0x5a>
 80081be:	3307      	adds	r3, #7
 80081c0:	10db      	asrs	r3, r3, #3
 80081c2:	b21b      	sxth	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	440b      	add	r3, r1
 80081d4:	3302      	adds	r3, #2
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	4413      	add	r3, r2
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	75fb      	strb	r3, [r7, #23]

			if (data & 0x01)
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00e      	beq.n	8008206 <OLED_DrawXBM+0xa0>
			{
				OLED_DrawPixel(xMove + x, yMove + y);					// if there is a bit draw it
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	8a7b      	ldrh	r3, [r7, #18]
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	4413      	add	r3, r2
 80081f2:	b2d8      	uxtb	r0, r3
 80081f4:	88bb      	ldrh	r3, [r7, #4]
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	8abb      	ldrh	r3, [r7, #20]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	4619      	mov	r1, r3
 8008202:	f000 f871 	bl	80082e8 <OLED_DrawPixel>
		for (int16_t x = 0; x < width; x++ )
 8008206:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800820a:	b29b      	uxth	r3, r3
 800820c:	3301      	adds	r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	827b      	strh	r3, [r7, #18]
 8008212:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008216:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800821a:	429a      	cmp	r2, r3
 800821c:	dbc2      	blt.n	80081a4 <OLED_DrawXBM+0x3e>
	for (int16_t y = 0; y < height; y++)
 800821e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008222:	b29b      	uxth	r3, r3
 8008224:	3301      	adds	r3, #1
 8008226:	b29b      	uxth	r3, r3
 8008228:	82bb      	strh	r3, [r7, #20]
 800822a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800822e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008232:	429a      	cmp	r2, r3
 8008234:	dbb3      	blt.n	800819e <OLED_DrawXBM+0x38>
			}
		}
	}
}
 8008236:	bf00      	nop
 8008238:	bf00      	nop
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <OLED_DrawPixelStatus>:
		}
	}
}

void OLED_DrawPixelStatus(uint8_t pos_x, uint8_t pos_y, uint8_t mode)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	71fb      	strb	r3, [r7, #7]
 800824a:	460b      	mov	r3, r1
 800824c:	71bb      	strb	r3, [r7, #6]
 800824e:	4613      	mov	r3, r2
 8008250:	717b      	strb	r3, [r7, #5]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 8008252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008256:	2b00      	cmp	r3, #0
 8008258:	db3d      	blt.n	80082d6 <OLED_DrawPixelStatus+0x96>
 800825a:	79bb      	ldrb	r3, [r7, #6]
 800825c:	2b3f      	cmp	r3, #63	; 0x3f
 800825e:	d83a      	bhi.n	80082d6 <OLED_DrawPixelStatus+0x96>
	
	if (mode)	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8008260:	797b      	ldrb	r3, [r7, #5]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01a      	beq.n	800829c <OLED_DrawPixelStatus+0x5c>
 8008266:	79fa      	ldrb	r2, [r7, #7]
 8008268:	79bb      	ldrb	r3, [r7, #6]
 800826a:	08db      	lsrs	r3, r3, #3
 800826c:	b2d8      	uxtb	r0, r3
 800826e:	4603      	mov	r3, r0
 8008270:	01db      	lsls	r3, r3, #7
 8008272:	4413      	add	r3, r2
 8008274:	4a1b      	ldr	r2, [pc, #108]	; (80082e4 <OLED_DrawPixelStatus+0xa4>)
 8008276:	5cd3      	ldrb	r3, [r2, r3]
 8008278:	b25a      	sxtb	r2, r3
 800827a:	79bb      	ldrb	r3, [r7, #6]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	2101      	movs	r1, #1
 8008282:	fa01 f303 	lsl.w	r3, r1, r3
 8008286:	b25b      	sxtb	r3, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	b259      	sxtb	r1, r3
 800828c:	79fa      	ldrb	r2, [r7, #7]
 800828e:	4603      	mov	r3, r0
 8008290:	01db      	lsls	r3, r3, #7
 8008292:	4413      	add	r3, r2
 8008294:	b2c9      	uxtb	r1, r1
 8008296:	4a13      	ldr	r2, [pc, #76]	; (80082e4 <OLED_DrawPixelStatus+0xa4>)
 8008298:	54d1      	strb	r1, [r2, r3]
 800829a:	e01d      	b.n	80082d8 <OLED_DrawPixelStatus+0x98>
	else		oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] &= ~(1 << (pos_y & 7));
 800829c:	79fa      	ldrb	r2, [r7, #7]
 800829e:	79bb      	ldrb	r3, [r7, #6]
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	b2d8      	uxtb	r0, r3
 80082a4:	4603      	mov	r3, r0
 80082a6:	01db      	lsls	r3, r3, #7
 80082a8:	4413      	add	r3, r2
 80082aa:	4a0e      	ldr	r2, [pc, #56]	; (80082e4 <OLED_DrawPixelStatus+0xa4>)
 80082ac:	5cd3      	ldrb	r3, [r2, r3]
 80082ae:	b25a      	sxtb	r2, r3
 80082b0:	79bb      	ldrb	r3, [r7, #6]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	2101      	movs	r1, #1
 80082b8:	fa01 f303 	lsl.w	r3, r1, r3
 80082bc:	b25b      	sxtb	r3, r3
 80082be:	43db      	mvns	r3, r3
 80082c0:	b25b      	sxtb	r3, r3
 80082c2:	4013      	ands	r3, r2
 80082c4:	b259      	sxtb	r1, r3
 80082c6:	79fa      	ldrb	r2, [r7, #7]
 80082c8:	4603      	mov	r3, r0
 80082ca:	01db      	lsls	r3, r3, #7
 80082cc:	4413      	add	r3, r2
 80082ce:	b2c9      	uxtb	r1, r1
 80082d0:	4a04      	ldr	r2, [pc, #16]	; (80082e4 <OLED_DrawPixelStatus+0xa4>)
 80082d2:	54d1      	strb	r1, [r2, r3]
 80082d4:	e000      	b.n	80082d8 <OLED_DrawPixelStatus+0x98>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 80082d6:	bf00      	nop
}
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000398 	.word	0x20000398

080082e8 <OLED_DrawPixel>:

void OLED_DrawPixel(uint8_t pos_x, uint8_t pos_y)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	460a      	mov	r2, r1
 80082f2:	71fb      	strb	r3, [r7, #7]
 80082f4:	4613      	mov	r3, r2
 80082f6:	71bb      	strb	r3, [r7, #6]
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 80082f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	db1d      	blt.n	800833c <OLED_DrawPixel+0x54>
 8008300:	79bb      	ldrb	r3, [r7, #6]
 8008302:	2b3f      	cmp	r3, #63	; 0x3f
 8008304:	d81a      	bhi.n	800833c <OLED_DrawPixel+0x54>
	
	oled_buffer[pos_x + (pos_y / 8) * OLED_WIDTH] |= (1 << (pos_y & 7));
 8008306:	79fa      	ldrb	r2, [r7, #7]
 8008308:	79bb      	ldrb	r3, [r7, #6]
 800830a:	08db      	lsrs	r3, r3, #3
 800830c:	b2d8      	uxtb	r0, r3
 800830e:	4603      	mov	r3, r0
 8008310:	01db      	lsls	r3, r3, #7
 8008312:	4413      	add	r3, r2
 8008314:	4a0c      	ldr	r2, [pc, #48]	; (8008348 <OLED_DrawPixel+0x60>)
 8008316:	5cd3      	ldrb	r3, [r2, r3]
 8008318:	b25a      	sxtb	r2, r3
 800831a:	79bb      	ldrb	r3, [r7, #6]
 800831c:	f003 0307 	and.w	r3, r3, #7
 8008320:	2101      	movs	r1, #1
 8008322:	fa01 f303 	lsl.w	r3, r1, r3
 8008326:	b25b      	sxtb	r3, r3
 8008328:	4313      	orrs	r3, r2
 800832a:	b259      	sxtb	r1, r3
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	4603      	mov	r3, r0
 8008330:	01db      	lsls	r3, r3, #7
 8008332:	4413      	add	r3, r2
 8008334:	b2c9      	uxtb	r1, r1
 8008336:	4a04      	ldr	r2, [pc, #16]	; (8008348 <OLED_DrawPixel+0x60>)
 8008338:	54d1      	strb	r1, [r2, r3]
 800833a:	e000      	b.n	800833e <OLED_DrawPixel+0x56>
	if (pos_x >= OLED_WIDTH || pos_y >= OLED_HEIGHT) return;
 800833c:	bf00      	nop
}
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	20000398 	.word	0x20000398

0800834c <OLED_GetWidthStr>:
		}
	}
}

uint8_t OLED_GetWidthStr(const char* str)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
	uint8_t stl = strlen(str);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7f7 ff63 	bl	8000220 <strlen>
 800835a:	4603      	mov	r3, r0
 800835c:	737b      	strb	r3, [r7, #13]
	uint8_t len = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < stl; i++, *str++)
 8008362:	2300      	movs	r3, #0
 8008364:	73bb      	strb	r3, [r7, #14]
 8008366:	e01a      	b.n	800839e <OLED_GetWidthStr+0x52>
	{
		len += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <OLED_GetWidthStr+0x64>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <OLED_GetWidthStr+0x64>)
 800836e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008372:	4619      	mov	r1, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	4618      	mov	r0, r3
 800837a:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <OLED_GetWidthStr+0x64>)
 800837c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008380:	1ac3      	subs	r3, r0, r3
 8008382:	fb01 f303 	mul.w	r3, r1, r3
 8008386:	3304      	adds	r3, #4
 8008388:	4413      	add	r3, r2
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	4413      	add	r3, r2
 8008390:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < stl; i++, *str++)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	3301      	adds	r3, #1
 8008396:	73bb      	strb	r3, [r7, #14]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3301      	adds	r3, #1
 800839c:	607b      	str	r3, [r7, #4]
 800839e:	7bba      	ldrb	r2, [r7, #14]
 80083a0:	7b7b      	ldrb	r3, [r7, #13]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d3e0      	bcc.n	8008368 <OLED_GetWidthStr+0x1c>
	}

	return len;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	20000b9c 	.word	0x20000b9c

080083b4 <OLED_DrawChar>:

	return OLED_GetWidthStr(buf);
}

void OLED_DrawChar(char c, uint8_t ix, uint8_t iy, uint8_t mode)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4604      	mov	r4, r0
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	4623      	mov	r3, r4
 80083c4:	71fb      	strb	r3, [r7, #7]
 80083c6:	4603      	mov	r3, r0
 80083c8:	71bb      	strb	r3, [r7, #6]
 80083ca:	460b      	mov	r3, r1
 80083cc:	717b      	strb	r3, [r7, #5]
 80083ce:	4613      	mov	r3, r2
 80083d0:	713b      	strb	r3, [r7, #4]
	const uint8_t* symbol = &fontbyte(Font.numchars * (c - Font.offset) + 4);
 80083d2:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <OLED_DrawChar+0xfc>)
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	4b36      	ldr	r3, [pc, #216]	; (80084b0 <OLED_DrawChar+0xfc>)
 80083d8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80083dc:	4618      	mov	r0, r3
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	4933      	ldr	r1, [pc, #204]	; (80084b0 <OLED_DrawChar+0xfc>)
 80083e2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80083e6:	1a5b      	subs	r3, r3, r1
 80083e8:	fb00 f303 	mul.w	r3, r0, r3
 80083ec:	3304      	adds	r3, #4
 80083ee:	4413      	add	r3, r2
 80083f0:	60bb      	str	r3, [r7, #8]

	for (uint8_t x = 0; x < symbol[0]; x++)
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	e050      	b.n	800849a <OLED_DrawChar+0xe6>
	{
		for (uint8_t y = 0; y < Font.height; y++)
 80083f8:	2300      	movs	r3, #0
 80083fa:	73bb      	strb	r3, [r7, #14]
 80083fc:	e044      	b.n	8008488 <OLED_DrawChar+0xd4>
		{
			if (symbol[1 + y / 8 + x * (Font.numchars - 1) / Font.width] & (0x01 << (y % 8)))
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	08db      	lsrs	r3, r3, #3
 8008402:	b2db      	uxtb	r3, r3
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	4929      	ldr	r1, [pc, #164]	; (80084b0 <OLED_DrawChar+0xfc>)
 800840a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800840e:	3901      	subs	r1, #1
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	4926      	ldr	r1, [pc, #152]	; (80084b0 <OLED_DrawChar+0xfc>)
 8008416:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800841a:	fb93 f3f1 	sdiv	r3, r3, r1
 800841e:	4413      	add	r3, r2
 8008420:	461a      	mov	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	4413      	add	r3, r2
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	461a      	mov	r2, r3
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	fa42 f303 	asr.w	r3, r2, r3
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d011      	beq.n	8008460 <OLED_DrawChar+0xac>
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 1 : 0);
 800843c:	79ba      	ldrb	r2, [r7, #6]
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	4413      	add	r3, r2
 8008442:	b2d8      	uxtb	r0, r3
 8008444:	797a      	ldrb	r2, [r7, #5]
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	4413      	add	r3, r2
 800844a:	b2d9      	uxtb	r1, r3
 800844c:	793b      	ldrb	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf14      	ite	ne
 8008452:	2301      	movne	r3, #1
 8008454:	2300      	moveq	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	f7ff fef1 	bl	8008240 <OLED_DrawPixelStatus>
 800845e:	e010      	b.n	8008482 <OLED_DrawChar+0xce>
			else
				OLED_DrawPixelStatus(ix + x, iy + y, (mode) ? 0 : 1);
 8008460:	79ba      	ldrb	r2, [r7, #6]
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	4413      	add	r3, r2
 8008466:	b2d8      	uxtb	r0, r3
 8008468:	797a      	ldrb	r2, [r7, #5]
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	4413      	add	r3, r2
 800846e:	b2d9      	uxtb	r1, r3
 8008470:	793b      	ldrb	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	bf0c      	ite	eq
 8008476:	2301      	moveq	r3, #1
 8008478:	2300      	movne	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	461a      	mov	r2, r3
 800847e:	f7ff fedf 	bl	8008240 <OLED_DrawPixelStatus>
		for (uint8_t y = 0; y < Font.height; y++)
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	3301      	adds	r3, #1
 8008486:	73bb      	strb	r3, [r7, #14]
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	4a09      	ldr	r2, [pc, #36]	; (80084b0 <OLED_DrawChar+0xfc>)
 800848c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008490:	4293      	cmp	r3, r2
 8008492:	dbb4      	blt.n	80083fe <OLED_DrawChar+0x4a>
	for (uint8_t x = 0; x < symbol[0]; x++)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	3301      	adds	r3, #1
 8008498:	73fb      	strb	r3, [r7, #15]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	7bfa      	ldrb	r2, [r7, #15]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3a9      	bcc.n	80083f8 <OLED_DrawChar+0x44>
		}
	}
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd90      	pop	{r4, r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000b9c 	.word	0x20000b9c

080084b4 <OLED_DrawStr>:

	OLED_DrawStr(buf, x, y, mode);
}

void OLED_DrawStr(const char *str, uint8_t x, uint8_t y, uint8_t mode)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	70fb      	strb	r3, [r7, #3]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70bb      	strb	r3, [r7, #2]
 80084ca:	4613      	mov	r3, r2
 80084cc:	707b      	strb	r3, [r7, #1]
	uint8_t stl = strlen(str);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7f7 fea6 	bl	8000220 <strlen>
 80084d4:	4603      	mov	r3, r0
 80084d6:	737b      	strb	r3, [r7, #13]
	uint8_t pos = x;
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	73fb      	strb	r3, [r7, #15]

	if (pos == RIGHT) pos = OLED_WIDTH - OLED_GetWidthStr(str) - 1;
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	2bfe      	cmp	r3, #254	; 0xfe
 80084e0:	d106      	bne.n	80084f0 <OLED_DrawStr+0x3c>
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff ff32 	bl	800834c <OLED_GetWidthStr>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80084ee:	73fb      	strb	r3, [r7, #15]
	if (pos == CENTER) pos = (OLED_WIDTH - OLED_GetWidthStr(str) - 1) / 2;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	2bff      	cmp	r3, #255	; 0xff
 80084f4:	d109      	bne.n	800850a <OLED_DrawStr+0x56>
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff ff28 	bl	800834c <OLED_GetWidthStr>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8008502:	0fda      	lsrs	r2, r3, #31
 8008504:	4413      	add	r3, r2
 8008506:	105b      	asrs	r3, r3, #1
 8008508:	73fb      	strb	r3, [r7, #15]
	if (y == CENTER) y = (OLED_HEIGHT - Font.height) / 2;
 800850a:	78bb      	ldrb	r3, [r7, #2]
 800850c:	2bff      	cmp	r3, #255	; 0xff
 800850e:	d108      	bne.n	8008522 <OLED_DrawStr+0x6e>
 8008510:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <OLED_DrawStr+0xcc>)
 8008512:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008516:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800851a:	0fda      	lsrs	r2, r3, #31
 800851c:	4413      	add	r3, r2
 800851e:	105b      	asrs	r3, r3, #1
 8008520:	70bb      	strb	r3, [r7, #2]

	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8008522:	2300      	movs	r3, #0
 8008524:	73bb      	strb	r3, [r7, #14]
 8008526:	e021      	b.n	800856c <OLED_DrawStr+0xb8>
	{
		OLED_DrawChar(*str, pos, y, mode);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7818      	ldrb	r0, [r3, #0]
 800852c:	787b      	ldrb	r3, [r7, #1]
 800852e:	78ba      	ldrb	r2, [r7, #2]
 8008530:	7bf9      	ldrb	r1, [r7, #15]
 8008532:	f7ff ff3f 	bl	80083b4 <OLED_DrawChar>
		pos += fontbyte(Font.numchars * (*str - Font.offset) + 4);
 8008536:	4b12      	ldr	r3, [pc, #72]	; (8008580 <OLED_DrawStr+0xcc>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	4b11      	ldr	r3, [pc, #68]	; (8008580 <OLED_DrawStr+0xcc>)
 800853c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008540:	4619      	mov	r1, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	4618      	mov	r0, r3
 8008548:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <OLED_DrawStr+0xcc>)
 800854a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800854e:	1ac3      	subs	r3, r0, r3
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	3304      	adds	r3, #4
 8008556:	4413      	add	r3, r2
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	4413      	add	r3, r2
 800855e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t cnt = 0; cnt < stl; cnt++, *str++)
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	3301      	adds	r3, #1
 8008564:	73bb      	strb	r3, [r7, #14]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3301      	adds	r3, #1
 800856a:	607b      	str	r3, [r7, #4]
 800856c:	7bba      	ldrb	r2, [r7, #14]
 800856e:	7b7b      	ldrb	r3, [r7, #13]
 8008570:	429a      	cmp	r2, r3
 8008572:	d3d9      	bcc.n	8008528 <OLED_DrawStr+0x74>
	}
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	20000b9c 	.word	0x20000b9c

08008584 <OLED_UpdateScreen>:
/**********************************************************************************/
/*                           U P D A T E   S C R E E N                            */
/**********************************************************************************/

void OLED_UpdateScreen()
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 800858a:	2300      	movs	r3, #0
 800858c:	71fb      	strb	r3, [r7, #7]
 800858e:	e032      	b.n	80085f6 <OLED_UpdateScreen+0x72>
	{
		OLED_SendCommand(0x00 | (oled_start_column & 0x0F));	// lo tetrad starting column address
 8008590:	4b1d      	ldr	r3, [pc, #116]	; (8008608 <OLED_UpdateScreen+0x84>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fd34 	bl	8008008 <OLED_SendCommand>
		OLED_SendCommand(0x10 | (oled_start_column >> 4));		// hi tetrad starting column address
 80085a0:	4b19      	ldr	r3, [pc, #100]	; (8008608 <OLED_UpdateScreen+0x84>)
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	091b      	lsrs	r3, r3, #4
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	f043 0310 	orr.w	r3, r3, #16
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff fd2a 	bl	8008008 <OLED_SendCommand>

		OLED_SendCommand(0xB0 | page_number);					// starting address of the page
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fd23 	bl	8008008 <OLED_SendCommand>

		for (int16_t j = 0; j < OLED_WIDTH; j++)
 80085c2:	2300      	movs	r3, #0
 80085c4:	80bb      	strh	r3, [r7, #4]
 80085c6:	e00f      	b.n	80085e8 <OLED_UpdateScreen+0x64>
		{
			OLED_SendData(oled_buffer[page_number * OLED_WIDTH + j]);
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	01da      	lsls	r2, r3, #7
 80085cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	4a0e      	ldr	r2, [pc, #56]	; (800860c <OLED_UpdateScreen+0x88>)
 80085d4:	5cd3      	ldrb	r3, [r2, r3]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7ff fd30 	bl	800803c <OLED_SendData>
		for (int16_t j = 0; j < OLED_WIDTH; j++)
 80085dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3301      	adds	r3, #1
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	80bb      	strh	r3, [r7, #4]
 80085e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80085ec:	2b7f      	cmp	r3, #127	; 0x7f
 80085ee:	ddeb      	ble.n	80085c8 <OLED_UpdateScreen+0x44>
	for (uint8_t page_number = 0; page_number < 8; page_number++)
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	3301      	adds	r3, #1
 80085f4:	71fb      	strb	r3, [r7, #7]
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	2b07      	cmp	r3, #7
 80085fa:	d9c9      	bls.n	8008590 <OLED_UpdateScreen+0xc>
		}
	}
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20000394 	.word	0x20000394
 800860c:	20000398 	.word	0x20000398

08008610 <FontSet>:
#include "OLED_Fonts.h"

font_t Font;

void FontSet(const uint8_t* new_font)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	Font.font = new_font;
 8008618:	4a13      	ldr	r2, [pc, #76]	; (8008668 <FontSet+0x58>)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6013      	str	r3, [r2, #0]
	Font.width = (int16_t)fontbyte(0); //*LARGURA DA FONTE*//
 800861e:	4b12      	ldr	r3, [pc, #72]	; (8008668 <FontSet+0x58>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	b21a      	sxth	r2, r3
 8008626:	4b10      	ldr	r3, [pc, #64]	; (8008668 <FontSet+0x58>)
 8008628:	809a      	strh	r2, [r3, #4]
	Font.height = (int16_t)fontbyte(1);//*ALTURA DA FONNTE*//
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <FontSet+0x58>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3301      	adds	r3, #1
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	b21a      	sxth	r2, r3
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <FontSet+0x58>)
 8008636:	80da      	strh	r2, [r3, #6]
	Font.offset = (int16_t)fontbyte(2);/*PRIMEIRA LINHA DO VETOR É REFERENTE A QUAL POSIÇÃO DA TABELA ASC?*/
 8008638:	4b0b      	ldr	r3, [pc, #44]	; (8008668 <FontSet+0x58>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3302      	adds	r3, #2
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b21a      	sxth	r2, r3
 8008642:	4b09      	ldr	r3, [pc, #36]	; (8008668 <FontSet+0x58>)
 8008644:	811a      	strh	r2, [r3, #8]
	Font.numchars = (int16_t)fontbyte(3);	/*NUMERO DE COMPONENTES NUMA LINHA DO VETOR*/
 8008646:	4b08      	ldr	r3, [pc, #32]	; (8008668 <FontSet+0x58>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3303      	adds	r3, #3
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	b21a      	sxth	r2, r3
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <FontSet+0x58>)
 8008652:	815a      	strh	r2, [r3, #10]
	Font.inverted = NORMAL;
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <FontSet+0x58>)
 8008656:	2200      	movs	r2, #0
 8008658:	731a      	strb	r2, [r3, #12]
}
 800865a:	bf00      	nop
 800865c:	370c      	adds	r7, #12
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	20000b9c 	.word	0x20000b9c

0800866c <sbrk_aligned>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	4e0e      	ldr	r6, [pc, #56]	; (80086a8 <sbrk_aligned+0x3c>)
 8008670:	460c      	mov	r4, r1
 8008672:	6831      	ldr	r1, [r6, #0]
 8008674:	4605      	mov	r5, r0
 8008676:	b911      	cbnz	r1, 800867e <sbrk_aligned+0x12>
 8008678:	f000 f8cc 	bl	8008814 <_sbrk_r>
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 f8c7 	bl	8008814 <_sbrk_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d00a      	beq.n	80086a0 <sbrk_aligned+0x34>
 800868a:	1cc4      	adds	r4, r0, #3
 800868c:	f024 0403 	bic.w	r4, r4, #3
 8008690:	42a0      	cmp	r0, r4
 8008692:	d007      	beq.n	80086a4 <sbrk_aligned+0x38>
 8008694:	1a21      	subs	r1, r4, r0
 8008696:	4628      	mov	r0, r5
 8008698:	f000 f8bc 	bl	8008814 <_sbrk_r>
 800869c:	3001      	adds	r0, #1
 800869e:	d101      	bne.n	80086a4 <sbrk_aligned+0x38>
 80086a0:	f04f 34ff 	mov.w	r4, #4294967295
 80086a4:	4620      	mov	r0, r4
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	20000bb0 	.word	0x20000bb0

080086ac <_malloc_r>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	1ccd      	adds	r5, r1, #3
 80086b2:	f025 0503 	bic.w	r5, r5, #3
 80086b6:	3508      	adds	r5, #8
 80086b8:	2d0c      	cmp	r5, #12
 80086ba:	bf38      	it	cc
 80086bc:	250c      	movcc	r5, #12
 80086be:	2d00      	cmp	r5, #0
 80086c0:	4607      	mov	r7, r0
 80086c2:	db01      	blt.n	80086c8 <_malloc_r+0x1c>
 80086c4:	42a9      	cmp	r1, r5
 80086c6:	d905      	bls.n	80086d4 <_malloc_r+0x28>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	2600      	movs	r6, #0
 80086ce:	4630      	mov	r0, r6
 80086d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087a8 <_malloc_r+0xfc>
 80086d8:	f000 f868 	bl	80087ac <__malloc_lock>
 80086dc:	f8d8 3000 	ldr.w	r3, [r8]
 80086e0:	461c      	mov	r4, r3
 80086e2:	bb5c      	cbnz	r4, 800873c <_malloc_r+0x90>
 80086e4:	4629      	mov	r1, r5
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ffc0 	bl	800866c <sbrk_aligned>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	4604      	mov	r4, r0
 80086f0:	d155      	bne.n	800879e <_malloc_r+0xf2>
 80086f2:	f8d8 4000 	ldr.w	r4, [r8]
 80086f6:	4626      	mov	r6, r4
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	d145      	bne.n	8008788 <_malloc_r+0xdc>
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	d048      	beq.n	8008792 <_malloc_r+0xe6>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	4631      	mov	r1, r6
 8008704:	4638      	mov	r0, r7
 8008706:	eb04 0903 	add.w	r9, r4, r3
 800870a:	f000 f883 	bl	8008814 <_sbrk_r>
 800870e:	4581      	cmp	r9, r0
 8008710:	d13f      	bne.n	8008792 <_malloc_r+0xe6>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	1a6d      	subs	r5, r5, r1
 8008716:	4629      	mov	r1, r5
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff ffa7 	bl	800866c <sbrk_aligned>
 800871e:	3001      	adds	r0, #1
 8008720:	d037      	beq.n	8008792 <_malloc_r+0xe6>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	442b      	add	r3, r5
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f8d8 3000 	ldr.w	r3, [r8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d038      	beq.n	80087a2 <_malloc_r+0xf6>
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	42a2      	cmp	r2, r4
 8008734:	d12b      	bne.n	800878e <_malloc_r+0xe2>
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	e00f      	b.n	800875c <_malloc_r+0xb0>
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	1b52      	subs	r2, r2, r5
 8008740:	d41f      	bmi.n	8008782 <_malloc_r+0xd6>
 8008742:	2a0b      	cmp	r2, #11
 8008744:	d917      	bls.n	8008776 <_malloc_r+0xca>
 8008746:	1961      	adds	r1, r4, r5
 8008748:	42a3      	cmp	r3, r4
 800874a:	6025      	str	r5, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	6059      	strne	r1, [r3, #4]
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	bf08      	it	eq
 8008754:	f8c8 1000 	streq.w	r1, [r8]
 8008758:	5162      	str	r2, [r4, r5]
 800875a:	604b      	str	r3, [r1, #4]
 800875c:	4638      	mov	r0, r7
 800875e:	f104 060b 	add.w	r6, r4, #11
 8008762:	f000 f829 	bl	80087b8 <__malloc_unlock>
 8008766:	f026 0607 	bic.w	r6, r6, #7
 800876a:	1d23      	adds	r3, r4, #4
 800876c:	1af2      	subs	r2, r6, r3
 800876e:	d0ae      	beq.n	80086ce <_malloc_r+0x22>
 8008770:	1b9b      	subs	r3, r3, r6
 8008772:	50a3      	str	r3, [r4, r2]
 8008774:	e7ab      	b.n	80086ce <_malloc_r+0x22>
 8008776:	42a3      	cmp	r3, r4
 8008778:	6862      	ldr	r2, [r4, #4]
 800877a:	d1dd      	bne.n	8008738 <_malloc_r+0x8c>
 800877c:	f8c8 2000 	str.w	r2, [r8]
 8008780:	e7ec      	b.n	800875c <_malloc_r+0xb0>
 8008782:	4623      	mov	r3, r4
 8008784:	6864      	ldr	r4, [r4, #4]
 8008786:	e7ac      	b.n	80086e2 <_malloc_r+0x36>
 8008788:	4634      	mov	r4, r6
 800878a:	6876      	ldr	r6, [r6, #4]
 800878c:	e7b4      	b.n	80086f8 <_malloc_r+0x4c>
 800878e:	4613      	mov	r3, r2
 8008790:	e7cc      	b.n	800872c <_malloc_r+0x80>
 8008792:	230c      	movs	r3, #12
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	4638      	mov	r0, r7
 8008798:	f000 f80e 	bl	80087b8 <__malloc_unlock>
 800879c:	e797      	b.n	80086ce <_malloc_r+0x22>
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	e7dc      	b.n	800875c <_malloc_r+0xb0>
 80087a2:	605b      	str	r3, [r3, #4]
 80087a4:	deff      	udf	#255	; 0xff
 80087a6:	bf00      	nop
 80087a8:	20000bac 	.word	0x20000bac

080087ac <__malloc_lock>:
 80087ac:	4801      	ldr	r0, [pc, #4]	; (80087b4 <__malloc_lock+0x8>)
 80087ae:	f000 b86b 	b.w	8008888 <__retarget_lock_acquire_recursive>
 80087b2:	bf00      	nop
 80087b4:	20000cf0 	.word	0x20000cf0

080087b8 <__malloc_unlock>:
 80087b8:	4801      	ldr	r0, [pc, #4]	; (80087c0 <__malloc_unlock+0x8>)
 80087ba:	f000 b866 	b.w	800888a <__retarget_lock_release_recursive>
 80087be:	bf00      	nop
 80087c0:	20000cf0 	.word	0x20000cf0

080087c4 <siprintf>:
 80087c4:	b40e      	push	{r1, r2, r3}
 80087c6:	b500      	push	{lr}
 80087c8:	b09c      	sub	sp, #112	; 0x70
 80087ca:	ab1d      	add	r3, sp, #116	; 0x74
 80087cc:	9002      	str	r0, [sp, #8]
 80087ce:	9006      	str	r0, [sp, #24]
 80087d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80087d4:	4809      	ldr	r0, [pc, #36]	; (80087fc <siprintf+0x38>)
 80087d6:	9107      	str	r1, [sp, #28]
 80087d8:	9104      	str	r1, [sp, #16]
 80087da:	4909      	ldr	r1, [pc, #36]	; (8008800 <siprintf+0x3c>)
 80087dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e0:	9105      	str	r1, [sp, #20]
 80087e2:	6800      	ldr	r0, [r0, #0]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	a902      	add	r1, sp, #8
 80087e8:	f000 f8f6 	bl	80089d8 <_svfiprintf_r>
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	b01c      	add	sp, #112	; 0x70
 80087f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f8:	b003      	add	sp, #12
 80087fa:	4770      	bx	lr
 80087fc:	20000058 	.word	0x20000058
 8008800:	ffff0208 	.word	0xffff0208

08008804 <memset>:
 8008804:	4402      	add	r2, r0
 8008806:	4603      	mov	r3, r0
 8008808:	4293      	cmp	r3, r2
 800880a:	d100      	bne.n	800880e <memset+0xa>
 800880c:	4770      	bx	lr
 800880e:	f803 1b01 	strb.w	r1, [r3], #1
 8008812:	e7f9      	b.n	8008808 <memset+0x4>

08008814 <_sbrk_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4d06      	ldr	r5, [pc, #24]	; (8008830 <_sbrk_r+0x1c>)
 8008818:	2300      	movs	r3, #0
 800881a:	4604      	mov	r4, r0
 800881c:	4608      	mov	r0, r1
 800881e:	602b      	str	r3, [r5, #0]
 8008820:	f7f8 ff32 	bl	8001688 <_sbrk>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_sbrk_r+0x1a>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_sbrk_r+0x1a>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	20000cec 	.word	0x20000cec

08008834 <__errno>:
 8008834:	4b01      	ldr	r3, [pc, #4]	; (800883c <__errno+0x8>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	20000058 	.word	0x20000058

08008840 <__libc_init_array>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4d0d      	ldr	r5, [pc, #52]	; (8008878 <__libc_init_array+0x38>)
 8008844:	4c0d      	ldr	r4, [pc, #52]	; (800887c <__libc_init_array+0x3c>)
 8008846:	1b64      	subs	r4, r4, r5
 8008848:	10a4      	asrs	r4, r4, #2
 800884a:	2600      	movs	r6, #0
 800884c:	42a6      	cmp	r6, r4
 800884e:	d109      	bne.n	8008864 <__libc_init_array+0x24>
 8008850:	4d0b      	ldr	r5, [pc, #44]	; (8008880 <__libc_init_array+0x40>)
 8008852:	4c0c      	ldr	r4, [pc, #48]	; (8008884 <__libc_init_array+0x44>)
 8008854:	f000 fbae 	bl	8008fb4 <_init>
 8008858:	1b64      	subs	r4, r4, r5
 800885a:	10a4      	asrs	r4, r4, #2
 800885c:	2600      	movs	r6, #0
 800885e:	42a6      	cmp	r6, r4
 8008860:	d105      	bne.n	800886e <__libc_init_array+0x2e>
 8008862:	bd70      	pop	{r4, r5, r6, pc}
 8008864:	f855 3b04 	ldr.w	r3, [r5], #4
 8008868:	4798      	blx	r3
 800886a:	3601      	adds	r6, #1
 800886c:	e7ee      	b.n	800884c <__libc_init_array+0xc>
 800886e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008872:	4798      	blx	r3
 8008874:	3601      	adds	r6, #1
 8008876:	e7f2      	b.n	800885e <__libc_init_array+0x1e>
 8008878:	08009fb0 	.word	0x08009fb0
 800887c:	08009fb0 	.word	0x08009fb0
 8008880:	08009fb0 	.word	0x08009fb0
 8008884:	08009fb4 	.word	0x08009fb4

08008888 <__retarget_lock_acquire_recursive>:
 8008888:	4770      	bx	lr

0800888a <__retarget_lock_release_recursive>:
 800888a:	4770      	bx	lr

0800888c <_free_r>:
 800888c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800888e:	2900      	cmp	r1, #0
 8008890:	d044      	beq.n	800891c <_free_r+0x90>
 8008892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008896:	9001      	str	r0, [sp, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	f1a1 0404 	sub.w	r4, r1, #4
 800889e:	bfb8      	it	lt
 80088a0:	18e4      	addlt	r4, r4, r3
 80088a2:	f7ff ff83 	bl	80087ac <__malloc_lock>
 80088a6:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <_free_r+0x94>)
 80088a8:	9801      	ldr	r0, [sp, #4]
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	b933      	cbnz	r3, 80088bc <_free_r+0x30>
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	6014      	str	r4, [r2, #0]
 80088b2:	b003      	add	sp, #12
 80088b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088b8:	f7ff bf7e 	b.w	80087b8 <__malloc_unlock>
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d908      	bls.n	80088d2 <_free_r+0x46>
 80088c0:	6825      	ldr	r5, [r4, #0]
 80088c2:	1961      	adds	r1, r4, r5
 80088c4:	428b      	cmp	r3, r1
 80088c6:	bf01      	itttt	eq
 80088c8:	6819      	ldreq	r1, [r3, #0]
 80088ca:	685b      	ldreq	r3, [r3, #4]
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	e7ed      	b.n	80088ae <_free_r+0x22>
 80088d2:	461a      	mov	r2, r3
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	b10b      	cbz	r3, 80088dc <_free_r+0x50>
 80088d8:	42a3      	cmp	r3, r4
 80088da:	d9fa      	bls.n	80088d2 <_free_r+0x46>
 80088dc:	6811      	ldr	r1, [r2, #0]
 80088de:	1855      	adds	r5, r2, r1
 80088e0:	42a5      	cmp	r5, r4
 80088e2:	d10b      	bne.n	80088fc <_free_r+0x70>
 80088e4:	6824      	ldr	r4, [r4, #0]
 80088e6:	4421      	add	r1, r4
 80088e8:	1854      	adds	r4, r2, r1
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	d1e0      	bne.n	80088b2 <_free_r+0x26>
 80088f0:	681c      	ldr	r4, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	6053      	str	r3, [r2, #4]
 80088f6:	440c      	add	r4, r1
 80088f8:	6014      	str	r4, [r2, #0]
 80088fa:	e7da      	b.n	80088b2 <_free_r+0x26>
 80088fc:	d902      	bls.n	8008904 <_free_r+0x78>
 80088fe:	230c      	movs	r3, #12
 8008900:	6003      	str	r3, [r0, #0]
 8008902:	e7d6      	b.n	80088b2 <_free_r+0x26>
 8008904:	6825      	ldr	r5, [r4, #0]
 8008906:	1961      	adds	r1, r4, r5
 8008908:	428b      	cmp	r3, r1
 800890a:	bf04      	itt	eq
 800890c:	6819      	ldreq	r1, [r3, #0]
 800890e:	685b      	ldreq	r3, [r3, #4]
 8008910:	6063      	str	r3, [r4, #4]
 8008912:	bf04      	itt	eq
 8008914:	1949      	addeq	r1, r1, r5
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	6054      	str	r4, [r2, #4]
 800891a:	e7ca      	b.n	80088b2 <_free_r+0x26>
 800891c:	b003      	add	sp, #12
 800891e:	bd30      	pop	{r4, r5, pc}
 8008920:	20000bac 	.word	0x20000bac

08008924 <__ssputs_r>:
 8008924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008928:	688e      	ldr	r6, [r1, #8]
 800892a:	461f      	mov	r7, r3
 800892c:	42be      	cmp	r6, r7
 800892e:	680b      	ldr	r3, [r1, #0]
 8008930:	4682      	mov	sl, r0
 8008932:	460c      	mov	r4, r1
 8008934:	4690      	mov	r8, r2
 8008936:	d82c      	bhi.n	8008992 <__ssputs_r+0x6e>
 8008938:	898a      	ldrh	r2, [r1, #12]
 800893a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800893e:	d026      	beq.n	800898e <__ssputs_r+0x6a>
 8008940:	6965      	ldr	r5, [r4, #20]
 8008942:	6909      	ldr	r1, [r1, #16]
 8008944:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008948:	eba3 0901 	sub.w	r9, r3, r1
 800894c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008950:	1c7b      	adds	r3, r7, #1
 8008952:	444b      	add	r3, r9
 8008954:	106d      	asrs	r5, r5, #1
 8008956:	429d      	cmp	r5, r3
 8008958:	bf38      	it	cc
 800895a:	461d      	movcc	r5, r3
 800895c:	0553      	lsls	r3, r2, #21
 800895e:	d527      	bpl.n	80089b0 <__ssputs_r+0x8c>
 8008960:	4629      	mov	r1, r5
 8008962:	f7ff fea3 	bl	80086ac <_malloc_r>
 8008966:	4606      	mov	r6, r0
 8008968:	b360      	cbz	r0, 80089c4 <__ssputs_r+0xa0>
 800896a:	6921      	ldr	r1, [r4, #16]
 800896c:	464a      	mov	r2, r9
 800896e:	f000 fadb 	bl	8008f28 <memcpy>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	6126      	str	r6, [r4, #16]
 8008980:	6165      	str	r5, [r4, #20]
 8008982:	444e      	add	r6, r9
 8008984:	eba5 0509 	sub.w	r5, r5, r9
 8008988:	6026      	str	r6, [r4, #0]
 800898a:	60a5      	str	r5, [r4, #8]
 800898c:	463e      	mov	r6, r7
 800898e:	42be      	cmp	r6, r7
 8008990:	d900      	bls.n	8008994 <__ssputs_r+0x70>
 8008992:	463e      	mov	r6, r7
 8008994:	6820      	ldr	r0, [r4, #0]
 8008996:	4632      	mov	r2, r6
 8008998:	4641      	mov	r1, r8
 800899a:	f000 faab 	bl	8008ef4 <memmove>
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	1b9b      	subs	r3, r3, r6
 80089a2:	60a3      	str	r3, [r4, #8]
 80089a4:	6823      	ldr	r3, [r4, #0]
 80089a6:	4433      	add	r3, r6
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	2000      	movs	r0, #0
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b0:	462a      	mov	r2, r5
 80089b2:	f000 fac7 	bl	8008f44 <_realloc_r>
 80089b6:	4606      	mov	r6, r0
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d1e0      	bne.n	800897e <__ssputs_r+0x5a>
 80089bc:	6921      	ldr	r1, [r4, #16]
 80089be:	4650      	mov	r0, sl
 80089c0:	f7ff ff64 	bl	800888c <_free_r>
 80089c4:	230c      	movs	r3, #12
 80089c6:	f8ca 3000 	str.w	r3, [sl]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d0:	81a3      	strh	r3, [r4, #12]
 80089d2:	f04f 30ff 	mov.w	r0, #4294967295
 80089d6:	e7e9      	b.n	80089ac <__ssputs_r+0x88>

080089d8 <_svfiprintf_r>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	4698      	mov	r8, r3
 80089de:	898b      	ldrh	r3, [r1, #12]
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	b09d      	sub	sp, #116	; 0x74
 80089e4:	4607      	mov	r7, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	d50e      	bpl.n	8008a0a <_svfiprintf_r+0x32>
 80089ec:	690b      	ldr	r3, [r1, #16]
 80089ee:	b963      	cbnz	r3, 8008a0a <_svfiprintf_r+0x32>
 80089f0:	2140      	movs	r1, #64	; 0x40
 80089f2:	f7ff fe5b 	bl	80086ac <_malloc_r>
 80089f6:	6028      	str	r0, [r5, #0]
 80089f8:	6128      	str	r0, [r5, #16]
 80089fa:	b920      	cbnz	r0, 8008a06 <_svfiprintf_r+0x2e>
 80089fc:	230c      	movs	r3, #12
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	e0d0      	b.n	8008ba8 <_svfiprintf_r+0x1d0>
 8008a06:	2340      	movs	r3, #64	; 0x40
 8008a08:	616b      	str	r3, [r5, #20]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0e:	2320      	movs	r3, #32
 8008a10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a18:	2330      	movs	r3, #48	; 0x30
 8008a1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008bc0 <_svfiprintf_r+0x1e8>
 8008a1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a22:	f04f 0901 	mov.w	r9, #1
 8008a26:	4623      	mov	r3, r4
 8008a28:	469a      	mov	sl, r3
 8008a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2e:	b10a      	cbz	r2, 8008a34 <_svfiprintf_r+0x5c>
 8008a30:	2a25      	cmp	r2, #37	; 0x25
 8008a32:	d1f9      	bne.n	8008a28 <_svfiprintf_r+0x50>
 8008a34:	ebba 0b04 	subs.w	fp, sl, r4
 8008a38:	d00b      	beq.n	8008a52 <_svfiprintf_r+0x7a>
 8008a3a:	465b      	mov	r3, fp
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff ff6f 	bl	8008924 <__ssputs_r>
 8008a46:	3001      	adds	r0, #1
 8008a48:	f000 80a9 	beq.w	8008b9e <_svfiprintf_r+0x1c6>
 8008a4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a4e:	445a      	add	r2, fp
 8008a50:	9209      	str	r2, [sp, #36]	; 0x24
 8008a52:	f89a 3000 	ldrb.w	r3, [sl]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 80a1 	beq.w	8008b9e <_svfiprintf_r+0x1c6>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a66:	f10a 0a01 	add.w	sl, sl, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a72:	931a      	str	r3, [sp, #104]	; 0x68
 8008a74:	4654      	mov	r4, sl
 8008a76:	2205      	movs	r2, #5
 8008a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7c:	4850      	ldr	r0, [pc, #320]	; (8008bc0 <_svfiprintf_r+0x1e8>)
 8008a7e:	f7f7 fbd7 	bl	8000230 <memchr>
 8008a82:	9a04      	ldr	r2, [sp, #16]
 8008a84:	b9d8      	cbnz	r0, 8008abe <_svfiprintf_r+0xe6>
 8008a86:	06d0      	lsls	r0, r2, #27
 8008a88:	bf44      	itt	mi
 8008a8a:	2320      	movmi	r3, #32
 8008a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a90:	0711      	lsls	r1, r2, #28
 8008a92:	bf44      	itt	mi
 8008a94:	232b      	movmi	r3, #43	; 0x2b
 8008a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa0:	d015      	beq.n	8008ace <_svfiprintf_r+0xf6>
 8008aa2:	9a07      	ldr	r2, [sp, #28]
 8008aa4:	4654      	mov	r4, sl
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f04f 0c0a 	mov.w	ip, #10
 8008aac:	4621      	mov	r1, r4
 8008aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab2:	3b30      	subs	r3, #48	; 0x30
 8008ab4:	2b09      	cmp	r3, #9
 8008ab6:	d94d      	bls.n	8008b54 <_svfiprintf_r+0x17c>
 8008ab8:	b1b0      	cbz	r0, 8008ae8 <_svfiprintf_r+0x110>
 8008aba:	9207      	str	r2, [sp, #28]
 8008abc:	e014      	b.n	8008ae8 <_svfiprintf_r+0x110>
 8008abe:	eba0 0308 	sub.w	r3, r0, r8
 8008ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	9304      	str	r3, [sp, #16]
 8008aca:	46a2      	mov	sl, r4
 8008acc:	e7d2      	b.n	8008a74 <_svfiprintf_r+0x9c>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	1d19      	adds	r1, r3, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	9103      	str	r1, [sp, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	bfbb      	ittet	lt
 8008ada:	425b      	neglt	r3, r3
 8008adc:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae0:	9307      	strge	r3, [sp, #28]
 8008ae2:	9307      	strlt	r3, [sp, #28]
 8008ae4:	bfb8      	it	lt
 8008ae6:	9204      	strlt	r2, [sp, #16]
 8008ae8:	7823      	ldrb	r3, [r4, #0]
 8008aea:	2b2e      	cmp	r3, #46	; 0x2e
 8008aec:	d10c      	bne.n	8008b08 <_svfiprintf_r+0x130>
 8008aee:	7863      	ldrb	r3, [r4, #1]
 8008af0:	2b2a      	cmp	r3, #42	; 0x2a
 8008af2:	d134      	bne.n	8008b5e <_svfiprintf_r+0x186>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	1d1a      	adds	r2, r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	9203      	str	r2, [sp, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bfb8      	it	lt
 8008b00:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b04:	3402      	adds	r4, #2
 8008b06:	9305      	str	r3, [sp, #20]
 8008b08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008bd0 <_svfiprintf_r+0x1f8>
 8008b0c:	7821      	ldrb	r1, [r4, #0]
 8008b0e:	2203      	movs	r2, #3
 8008b10:	4650      	mov	r0, sl
 8008b12:	f7f7 fb8d 	bl	8000230 <memchr>
 8008b16:	b138      	cbz	r0, 8008b28 <_svfiprintf_r+0x150>
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	eba0 000a 	sub.w	r0, r0, sl
 8008b1e:	2240      	movs	r2, #64	; 0x40
 8008b20:	4082      	lsls	r2, r0
 8008b22:	4313      	orrs	r3, r2
 8008b24:	3401      	adds	r4, #1
 8008b26:	9304      	str	r3, [sp, #16]
 8008b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2c:	4825      	ldr	r0, [pc, #148]	; (8008bc4 <_svfiprintf_r+0x1ec>)
 8008b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b32:	2206      	movs	r2, #6
 8008b34:	f7f7 fb7c 	bl	8000230 <memchr>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d038      	beq.n	8008bae <_svfiprintf_r+0x1d6>
 8008b3c:	4b22      	ldr	r3, [pc, #136]	; (8008bc8 <_svfiprintf_r+0x1f0>)
 8008b3e:	bb1b      	cbnz	r3, 8008b88 <_svfiprintf_r+0x1b0>
 8008b40:	9b03      	ldr	r3, [sp, #12]
 8008b42:	3307      	adds	r3, #7
 8008b44:	f023 0307 	bic.w	r3, r3, #7
 8008b48:	3308      	adds	r3, #8
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4e:	4433      	add	r3, r6
 8008b50:	9309      	str	r3, [sp, #36]	; 0x24
 8008b52:	e768      	b.n	8008a26 <_svfiprintf_r+0x4e>
 8008b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b58:	460c      	mov	r4, r1
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	e7a6      	b.n	8008aac <_svfiprintf_r+0xd4>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	3401      	adds	r4, #1
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	4619      	mov	r1, r3
 8008b66:	f04f 0c0a 	mov.w	ip, #10
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b70:	3a30      	subs	r2, #48	; 0x30
 8008b72:	2a09      	cmp	r2, #9
 8008b74:	d903      	bls.n	8008b7e <_svfiprintf_r+0x1a6>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0c6      	beq.n	8008b08 <_svfiprintf_r+0x130>
 8008b7a:	9105      	str	r1, [sp, #20]
 8008b7c:	e7c4      	b.n	8008b08 <_svfiprintf_r+0x130>
 8008b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b82:	4604      	mov	r4, r0
 8008b84:	2301      	movs	r3, #1
 8008b86:	e7f0      	b.n	8008b6a <_svfiprintf_r+0x192>
 8008b88:	ab03      	add	r3, sp, #12
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <_svfiprintf_r+0x1f4>)
 8008b90:	a904      	add	r1, sp, #16
 8008b92:	4638      	mov	r0, r7
 8008b94:	f3af 8000 	nop.w
 8008b98:	1c42      	adds	r2, r0, #1
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	d1d6      	bne.n	8008b4c <_svfiprintf_r+0x174>
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	065b      	lsls	r3, r3, #25
 8008ba2:	f53f af2d 	bmi.w	8008a00 <_svfiprintf_r+0x28>
 8008ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ba8:	b01d      	add	sp, #116	; 0x74
 8008baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bae:	ab03      	add	r3, sp, #12
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <_svfiprintf_r+0x1f4>)
 8008bb6:	a904      	add	r1, sp, #16
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f000 f879 	bl	8008cb0 <_printf_i>
 8008bbe:	e7eb      	b.n	8008b98 <_svfiprintf_r+0x1c0>
 8008bc0:	08009f72 	.word	0x08009f72
 8008bc4:	08009f7c 	.word	0x08009f7c
 8008bc8:	00000000 	.word	0x00000000
 8008bcc:	08008925 	.word	0x08008925
 8008bd0:	08009f78 	.word	0x08009f78

08008bd4 <_printf_common>:
 8008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	4616      	mov	r6, r2
 8008bda:	4699      	mov	r9, r3
 8008bdc:	688a      	ldr	r2, [r1, #8]
 8008bde:	690b      	ldr	r3, [r1, #16]
 8008be0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008be4:	4293      	cmp	r3, r2
 8008be6:	bfb8      	it	lt
 8008be8:	4613      	movlt	r3, r2
 8008bea:	6033      	str	r3, [r6, #0]
 8008bec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	b10a      	cbz	r2, 8008bfa <_printf_common+0x26>
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	6033      	str	r3, [r6, #0]
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	0699      	lsls	r1, r3, #26
 8008bfe:	bf42      	ittt	mi
 8008c00:	6833      	ldrmi	r3, [r6, #0]
 8008c02:	3302      	addmi	r3, #2
 8008c04:	6033      	strmi	r3, [r6, #0]
 8008c06:	6825      	ldr	r5, [r4, #0]
 8008c08:	f015 0506 	ands.w	r5, r5, #6
 8008c0c:	d106      	bne.n	8008c1c <_printf_common+0x48>
 8008c0e:	f104 0a19 	add.w	sl, r4, #25
 8008c12:	68e3      	ldr	r3, [r4, #12]
 8008c14:	6832      	ldr	r2, [r6, #0]
 8008c16:	1a9b      	subs	r3, r3, r2
 8008c18:	42ab      	cmp	r3, r5
 8008c1a:	dc26      	bgt.n	8008c6a <_printf_common+0x96>
 8008c1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c20:	1e13      	subs	r3, r2, #0
 8008c22:	6822      	ldr	r2, [r4, #0]
 8008c24:	bf18      	it	ne
 8008c26:	2301      	movne	r3, #1
 8008c28:	0692      	lsls	r2, r2, #26
 8008c2a:	d42b      	bmi.n	8008c84 <_printf_common+0xb0>
 8008c2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c30:	4649      	mov	r1, r9
 8008c32:	4638      	mov	r0, r7
 8008c34:	47c0      	blx	r8
 8008c36:	3001      	adds	r0, #1
 8008c38:	d01e      	beq.n	8008c78 <_printf_common+0xa4>
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	6922      	ldr	r2, [r4, #16]
 8008c3e:	f003 0306 	and.w	r3, r3, #6
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	bf02      	ittt	eq
 8008c46:	68e5      	ldreq	r5, [r4, #12]
 8008c48:	6833      	ldreq	r3, [r6, #0]
 8008c4a:	1aed      	subeq	r5, r5, r3
 8008c4c:	68a3      	ldr	r3, [r4, #8]
 8008c4e:	bf0c      	ite	eq
 8008c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c54:	2500      	movne	r5, #0
 8008c56:	4293      	cmp	r3, r2
 8008c58:	bfc4      	itt	gt
 8008c5a:	1a9b      	subgt	r3, r3, r2
 8008c5c:	18ed      	addgt	r5, r5, r3
 8008c5e:	2600      	movs	r6, #0
 8008c60:	341a      	adds	r4, #26
 8008c62:	42b5      	cmp	r5, r6
 8008c64:	d11a      	bne.n	8008c9c <_printf_common+0xc8>
 8008c66:	2000      	movs	r0, #0
 8008c68:	e008      	b.n	8008c7c <_printf_common+0xa8>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4652      	mov	r2, sl
 8008c6e:	4649      	mov	r1, r9
 8008c70:	4638      	mov	r0, r7
 8008c72:	47c0      	blx	r8
 8008c74:	3001      	adds	r0, #1
 8008c76:	d103      	bne.n	8008c80 <_printf_common+0xac>
 8008c78:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c80:	3501      	adds	r5, #1
 8008c82:	e7c6      	b.n	8008c12 <_printf_common+0x3e>
 8008c84:	18e1      	adds	r1, r4, r3
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	2030      	movs	r0, #48	; 0x30
 8008c8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c8e:	4422      	add	r2, r4
 8008c90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c98:	3302      	adds	r3, #2
 8008c9a:	e7c7      	b.n	8008c2c <_printf_common+0x58>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	47c0      	blx	r8
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d0e6      	beq.n	8008c78 <_printf_common+0xa4>
 8008caa:	3601      	adds	r6, #1
 8008cac:	e7d9      	b.n	8008c62 <_printf_common+0x8e>
	...

08008cb0 <_printf_i>:
 8008cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb4:	7e0f      	ldrb	r7, [r1, #24]
 8008cb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cb8:	2f78      	cmp	r7, #120	; 0x78
 8008cba:	4691      	mov	r9, r2
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	469a      	mov	sl, r3
 8008cc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cc6:	d807      	bhi.n	8008cd8 <_printf_i+0x28>
 8008cc8:	2f62      	cmp	r7, #98	; 0x62
 8008cca:	d80a      	bhi.n	8008ce2 <_printf_i+0x32>
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	f000 80d4 	beq.w	8008e7a <_printf_i+0x1ca>
 8008cd2:	2f58      	cmp	r7, #88	; 0x58
 8008cd4:	f000 80c0 	beq.w	8008e58 <_printf_i+0x1a8>
 8008cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ce0:	e03a      	b.n	8008d58 <_printf_i+0xa8>
 8008ce2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ce6:	2b15      	cmp	r3, #21
 8008ce8:	d8f6      	bhi.n	8008cd8 <_printf_i+0x28>
 8008cea:	a101      	add	r1, pc, #4	; (adr r1, 8008cf0 <_printf_i+0x40>)
 8008cec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cf0:	08008d49 	.word	0x08008d49
 8008cf4:	08008d5d 	.word	0x08008d5d
 8008cf8:	08008cd9 	.word	0x08008cd9
 8008cfc:	08008cd9 	.word	0x08008cd9
 8008d00:	08008cd9 	.word	0x08008cd9
 8008d04:	08008cd9 	.word	0x08008cd9
 8008d08:	08008d5d 	.word	0x08008d5d
 8008d0c:	08008cd9 	.word	0x08008cd9
 8008d10:	08008cd9 	.word	0x08008cd9
 8008d14:	08008cd9 	.word	0x08008cd9
 8008d18:	08008cd9 	.word	0x08008cd9
 8008d1c:	08008e61 	.word	0x08008e61
 8008d20:	08008d89 	.word	0x08008d89
 8008d24:	08008e1b 	.word	0x08008e1b
 8008d28:	08008cd9 	.word	0x08008cd9
 8008d2c:	08008cd9 	.word	0x08008cd9
 8008d30:	08008e83 	.word	0x08008e83
 8008d34:	08008cd9 	.word	0x08008cd9
 8008d38:	08008d89 	.word	0x08008d89
 8008d3c:	08008cd9 	.word	0x08008cd9
 8008d40:	08008cd9 	.word	0x08008cd9
 8008d44:	08008e23 	.word	0x08008e23
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	1d1a      	adds	r2, r3, #4
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	602a      	str	r2, [r5, #0]
 8008d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e09f      	b.n	8008e9c <_printf_i+0x1ec>
 8008d5c:	6820      	ldr	r0, [r4, #0]
 8008d5e:	682b      	ldr	r3, [r5, #0]
 8008d60:	0607      	lsls	r7, r0, #24
 8008d62:	f103 0104 	add.w	r1, r3, #4
 8008d66:	6029      	str	r1, [r5, #0]
 8008d68:	d501      	bpl.n	8008d6e <_printf_i+0xbe>
 8008d6a:	681e      	ldr	r6, [r3, #0]
 8008d6c:	e003      	b.n	8008d76 <_printf_i+0xc6>
 8008d6e:	0646      	lsls	r6, r0, #25
 8008d70:	d5fb      	bpl.n	8008d6a <_printf_i+0xba>
 8008d72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	da03      	bge.n	8008d82 <_printf_i+0xd2>
 8008d7a:	232d      	movs	r3, #45	; 0x2d
 8008d7c:	4276      	negs	r6, r6
 8008d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d82:	485a      	ldr	r0, [pc, #360]	; (8008eec <_printf_i+0x23c>)
 8008d84:	230a      	movs	r3, #10
 8008d86:	e012      	b.n	8008dae <_printf_i+0xfe>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	6820      	ldr	r0, [r4, #0]
 8008d8c:	1d19      	adds	r1, r3, #4
 8008d8e:	6029      	str	r1, [r5, #0]
 8008d90:	0605      	lsls	r5, r0, #24
 8008d92:	d501      	bpl.n	8008d98 <_printf_i+0xe8>
 8008d94:	681e      	ldr	r6, [r3, #0]
 8008d96:	e002      	b.n	8008d9e <_printf_i+0xee>
 8008d98:	0641      	lsls	r1, r0, #25
 8008d9a:	d5fb      	bpl.n	8008d94 <_printf_i+0xe4>
 8008d9c:	881e      	ldrh	r6, [r3, #0]
 8008d9e:	4853      	ldr	r0, [pc, #332]	; (8008eec <_printf_i+0x23c>)
 8008da0:	2f6f      	cmp	r7, #111	; 0x6f
 8008da2:	bf0c      	ite	eq
 8008da4:	2308      	moveq	r3, #8
 8008da6:	230a      	movne	r3, #10
 8008da8:	2100      	movs	r1, #0
 8008daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dae:	6865      	ldr	r5, [r4, #4]
 8008db0:	60a5      	str	r5, [r4, #8]
 8008db2:	2d00      	cmp	r5, #0
 8008db4:	bfa2      	ittt	ge
 8008db6:	6821      	ldrge	r1, [r4, #0]
 8008db8:	f021 0104 	bicge.w	r1, r1, #4
 8008dbc:	6021      	strge	r1, [r4, #0]
 8008dbe:	b90e      	cbnz	r6, 8008dc4 <_printf_i+0x114>
 8008dc0:	2d00      	cmp	r5, #0
 8008dc2:	d04b      	beq.n	8008e5c <_printf_i+0x1ac>
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dca:	fb03 6711 	mls	r7, r3, r1, r6
 8008dce:	5dc7      	ldrb	r7, [r0, r7]
 8008dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dd4:	4637      	mov	r7, r6
 8008dd6:	42bb      	cmp	r3, r7
 8008dd8:	460e      	mov	r6, r1
 8008dda:	d9f4      	bls.n	8008dc6 <_printf_i+0x116>
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d10b      	bne.n	8008df8 <_printf_i+0x148>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	07de      	lsls	r6, r3, #31
 8008de4:	d508      	bpl.n	8008df8 <_printf_i+0x148>
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	6861      	ldr	r1, [r4, #4]
 8008dea:	4299      	cmp	r1, r3
 8008dec:	bfde      	ittt	le
 8008dee:	2330      	movle	r3, #48	; 0x30
 8008df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008df8:	1b52      	subs	r2, r2, r5
 8008dfa:	6122      	str	r2, [r4, #16]
 8008dfc:	f8cd a000 	str.w	sl, [sp]
 8008e00:	464b      	mov	r3, r9
 8008e02:	aa03      	add	r2, sp, #12
 8008e04:	4621      	mov	r1, r4
 8008e06:	4640      	mov	r0, r8
 8008e08:	f7ff fee4 	bl	8008bd4 <_printf_common>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d14a      	bne.n	8008ea6 <_printf_i+0x1f6>
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
 8008e14:	b004      	add	sp, #16
 8008e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	f043 0320 	orr.w	r3, r3, #32
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	4833      	ldr	r0, [pc, #204]	; (8008ef0 <_printf_i+0x240>)
 8008e24:	2778      	movs	r7, #120	; 0x78
 8008e26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e2a:	6823      	ldr	r3, [r4, #0]
 8008e2c:	6829      	ldr	r1, [r5, #0]
 8008e2e:	061f      	lsls	r7, r3, #24
 8008e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e34:	d402      	bmi.n	8008e3c <_printf_i+0x18c>
 8008e36:	065f      	lsls	r7, r3, #25
 8008e38:	bf48      	it	mi
 8008e3a:	b2b6      	uxthmi	r6, r6
 8008e3c:	07df      	lsls	r7, r3, #31
 8008e3e:	bf48      	it	mi
 8008e40:	f043 0320 	orrmi.w	r3, r3, #32
 8008e44:	6029      	str	r1, [r5, #0]
 8008e46:	bf48      	it	mi
 8008e48:	6023      	strmi	r3, [r4, #0]
 8008e4a:	b91e      	cbnz	r6, 8008e54 <_printf_i+0x1a4>
 8008e4c:	6823      	ldr	r3, [r4, #0]
 8008e4e:	f023 0320 	bic.w	r3, r3, #32
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	2310      	movs	r3, #16
 8008e56:	e7a7      	b.n	8008da8 <_printf_i+0xf8>
 8008e58:	4824      	ldr	r0, [pc, #144]	; (8008eec <_printf_i+0x23c>)
 8008e5a:	e7e4      	b.n	8008e26 <_printf_i+0x176>
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	e7bd      	b.n	8008ddc <_printf_i+0x12c>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	6826      	ldr	r6, [r4, #0]
 8008e64:	6961      	ldr	r1, [r4, #20]
 8008e66:	1d18      	adds	r0, r3, #4
 8008e68:	6028      	str	r0, [r5, #0]
 8008e6a:	0635      	lsls	r5, r6, #24
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	d501      	bpl.n	8008e74 <_printf_i+0x1c4>
 8008e70:	6019      	str	r1, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <_printf_i+0x1ca>
 8008e74:	0670      	lsls	r0, r6, #25
 8008e76:	d5fb      	bpl.n	8008e70 <_printf_i+0x1c0>
 8008e78:	8019      	strh	r1, [r3, #0]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6123      	str	r3, [r4, #16]
 8008e7e:	4615      	mov	r5, r2
 8008e80:	e7bc      	b.n	8008dfc <_printf_i+0x14c>
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	1d1a      	adds	r2, r3, #4
 8008e86:	602a      	str	r2, [r5, #0]
 8008e88:	681d      	ldr	r5, [r3, #0]
 8008e8a:	6862      	ldr	r2, [r4, #4]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f7f7 f9ce 	bl	8000230 <memchr>
 8008e94:	b108      	cbz	r0, 8008e9a <_printf_i+0x1ea>
 8008e96:	1b40      	subs	r0, r0, r5
 8008e98:	6060      	str	r0, [r4, #4]
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea4:	e7aa      	b.n	8008dfc <_printf_i+0x14c>
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4649      	mov	r1, r9
 8008eac:	4640      	mov	r0, r8
 8008eae:	47d0      	blx	sl
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d0ad      	beq.n	8008e10 <_printf_i+0x160>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	079b      	lsls	r3, r3, #30
 8008eb8:	d413      	bmi.n	8008ee2 <_printf_i+0x232>
 8008eba:	68e0      	ldr	r0, [r4, #12]
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	bfb8      	it	lt
 8008ec2:	4618      	movlt	r0, r3
 8008ec4:	e7a6      	b.n	8008e14 <_printf_i+0x164>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4632      	mov	r2, r6
 8008eca:	4649      	mov	r1, r9
 8008ecc:	4640      	mov	r0, r8
 8008ece:	47d0      	blx	sl
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d09d      	beq.n	8008e10 <_printf_i+0x160>
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	68e3      	ldr	r3, [r4, #12]
 8008ed8:	9903      	ldr	r1, [sp, #12]
 8008eda:	1a5b      	subs	r3, r3, r1
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dcf2      	bgt.n	8008ec6 <_printf_i+0x216>
 8008ee0:	e7eb      	b.n	8008eba <_printf_i+0x20a>
 8008ee2:	2500      	movs	r5, #0
 8008ee4:	f104 0619 	add.w	r6, r4, #25
 8008ee8:	e7f5      	b.n	8008ed6 <_printf_i+0x226>
 8008eea:	bf00      	nop
 8008eec:	08009f83 	.word	0x08009f83
 8008ef0:	08009f94 	.word	0x08009f94

08008ef4 <memmove>:
 8008ef4:	4288      	cmp	r0, r1
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	eb01 0402 	add.w	r4, r1, r2
 8008efc:	d902      	bls.n	8008f04 <memmove+0x10>
 8008efe:	4284      	cmp	r4, r0
 8008f00:	4623      	mov	r3, r4
 8008f02:	d807      	bhi.n	8008f14 <memmove+0x20>
 8008f04:	1e43      	subs	r3, r0, #1
 8008f06:	42a1      	cmp	r1, r4
 8008f08:	d008      	beq.n	8008f1c <memmove+0x28>
 8008f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f12:	e7f8      	b.n	8008f06 <memmove+0x12>
 8008f14:	4402      	add	r2, r0
 8008f16:	4601      	mov	r1, r0
 8008f18:	428a      	cmp	r2, r1
 8008f1a:	d100      	bne.n	8008f1e <memmove+0x2a>
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f26:	e7f7      	b.n	8008f18 <memmove+0x24>

08008f28 <memcpy>:
 8008f28:	440a      	add	r2, r1
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f30:	d100      	bne.n	8008f34 <memcpy+0xc>
 8008f32:	4770      	bx	lr
 8008f34:	b510      	push	{r4, lr}
 8008f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f3e:	4291      	cmp	r1, r2
 8008f40:	d1f9      	bne.n	8008f36 <memcpy+0xe>
 8008f42:	bd10      	pop	{r4, pc}

08008f44 <_realloc_r>:
 8008f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4614      	mov	r4, r2
 8008f4c:	460e      	mov	r6, r1
 8008f4e:	b921      	cbnz	r1, 8008f5a <_realloc_r+0x16>
 8008f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f54:	4611      	mov	r1, r2
 8008f56:	f7ff bba9 	b.w	80086ac <_malloc_r>
 8008f5a:	b92a      	cbnz	r2, 8008f68 <_realloc_r+0x24>
 8008f5c:	f7ff fc96 	bl	800888c <_free_r>
 8008f60:	4625      	mov	r5, r4
 8008f62:	4628      	mov	r0, r5
 8008f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f68:	f000 f81b 	bl	8008fa2 <_malloc_usable_size_r>
 8008f6c:	4284      	cmp	r4, r0
 8008f6e:	4607      	mov	r7, r0
 8008f70:	d802      	bhi.n	8008f78 <_realloc_r+0x34>
 8008f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f76:	d812      	bhi.n	8008f9e <_realloc_r+0x5a>
 8008f78:	4621      	mov	r1, r4
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f7ff fb96 	bl	80086ac <_malloc_r>
 8008f80:	4605      	mov	r5, r0
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d0ed      	beq.n	8008f62 <_realloc_r+0x1e>
 8008f86:	42bc      	cmp	r4, r7
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	bf28      	it	cs
 8008f8e:	463a      	movcs	r2, r7
 8008f90:	f7ff ffca 	bl	8008f28 <memcpy>
 8008f94:	4631      	mov	r1, r6
 8008f96:	4640      	mov	r0, r8
 8008f98:	f7ff fc78 	bl	800888c <_free_r>
 8008f9c:	e7e1      	b.n	8008f62 <_realloc_r+0x1e>
 8008f9e:	4635      	mov	r5, r6
 8008fa0:	e7df      	b.n	8008f62 <_realloc_r+0x1e>

08008fa2 <_malloc_usable_size_r>:
 8008fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fa6:	1f18      	subs	r0, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	bfbc      	itt	lt
 8008fac:	580b      	ldrlt	r3, [r1, r0]
 8008fae:	18c0      	addlt	r0, r0, r3
 8008fb0:	4770      	bx	lr
	...

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
